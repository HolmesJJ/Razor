!(function() {
  "use strict";
  var t,
    f =
      "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
        ? function(t) {
            return typeof t;
          }
        : function(t) {
            return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
          };
  (t = ("function" == typeof Symbol && Symbol.for && Symbol.for("react.element")) || 60103),
    "function" == typeof Symbol &&
      Symbol.asyncIterator &&
      (e.prototype[Symbol.asyncIterator] = function() {
        return this;
      }),
    (e.prototype.next = function(t) {
      return this._invoke("next", t);
    }),
    (e.prototype.throw = function(t) {
      return this._invoke("throw", t);
    }),
    (e.prototype.return = function(t) {
      return this._invoke("return", t);
    });
  function h(t) {
    this.value = t;
  }
  function e(i) {
    var s, a;
    function o(t, e) {
      try {
        var n = i[t](e),
          r = n.value;
        r instanceof h
          ? Promise.resolve(r.value).then(
              function(t) {
                o("next", t);
              },
              function(t) {
                o("throw", t);
              },
            )
          : u(n.done ? "return" : "normal", n.value);
      } catch (t) {
        u("throw", t);
      }
    }
    function u(t, e) {
      switch (t) {
        case "return":
          s.resolve({ value: e, done: !0 });
          break;
        case "throw":
          s.reject(e);
          break;
        default:
          s.resolve({ value: e, done: !1 });
      }
      (s = s.next) ? o(s.key, s.arg) : (a = null);
    }
    (this._invoke = function(r, i) {
      return new Promise(function(t, e) {
        var n = { key: r, arg: i, resolve: t, reject: e, next: null };
        a ? (a = a.next = n) : ((s = a = n), o(r, i));
      });
    }),
      "function" != typeof i.return && (this.return = void 0);
  }
  function p(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }
  var n = function(t, e, n) {
    return e && r(t.prototype, e), n && r(t, n), t;
  };
  function r(t, e) {
    for (var n = 0; n < e.length; n++) {
      var r = e[n];
      (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
    }
  }
  function i(t, e, n) {
    return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = n), t;
  }
  function o(t, e, n) {
    null === t && (t = Function.prototype);
    var r = Object.getOwnPropertyDescriptor(t, e);
    if (void 0 === r) {
      var i = Object.getPrototypeOf(t);
      return null === i ? void 0 : o(i, e, n);
    }
    if ("value" in r) return r.value;
    var s = r.get;
    return void 0 !== s ? s.call(n) : void 0;
  }
  function s(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e);
    (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } })),
      e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : (t.__proto__ = e));
  }
  function a(t, e) {
    if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !e || ("object" != typeof e && "function" != typeof e) ? t : e;
  }
  Object.assign, "undefined" == typeof global ? self : global;
  var k = function(t, e) {
      if (Array.isArray(t)) return t;
      if (Symbol.iterator in Object(t))
        return (function(t, e) {
          var n = [],
            r = !0,
            i = !1,
            s = void 0;
          try {
            for (var a, o = t[Symbol.iterator](); !(r = (a = o.next()).done) && (n.push(a.value), !e || n.length !== e); r = !0);
          } catch (t) {
            (i = !0), (s = t);
          } finally {
            try {
              !r && o.return && o.return();
            } finally {
              if (i) throw s;
            }
          }
          return n;
        })(t, e);
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    },
    u = 0,
    c = 1,
    l = 2,
    d = 3,
    v = d;
  var y =
    (n(
      g,
      [
        {
          key: "setLevel",
          value: function(t) {
            this.level = t;
          },
        },
        {
          key: "_log",
          value: function(t, e) {
            (e = Array.prototype.slice.call(e)), this.tag && e.unshift("[" + this.tag + "]"), this.level >= t && console[g.level_map[t]].apply(console, e);
          },
        },
        {
          key: "log",
          value: function() {
            this._log(l, arguments);
          },
        },
        {
          key: "debug",
          value: function() {
            this._log(d, arguments);
          },
        },
        {
          key: "error",
          value: function() {
            this._log(u, arguments);
          },
        },
        {
          key: "warn",
          value: function() {
            this._log(c, arguments);
          },
        },
      ],
      [
        {
          key: "level_map",
          get: function() {
            var t;
            return i((t = {}), d, "log"), i(t, l, "log"), i(t, c, "warn"), i(t, u, "error"), t;
          },
        },
      ],
    ),
    g);
  function g() {
    var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : v,
      e = arguments[1];
    p(this, g), (this.tag = e), this.setLevel(t);
  }
  var m = new Map();
  function b(t) {
    return m.has(t) || m.set(t, new y(v, t)), m.get(t);
  }
  var S = new y();
  function x(o) {
    return new Promise(function(r, i) {
      function s(t, e) {
        try {
          var n = o[e ? "throw" : "next"](t);
        } catch (t) {
          return void i(t);
        }
        n.done ? r(n.value) : Promise.resolve(n.value).then(s, a);
      }
      function a(t) {
        s(t, 1);
      }
      s();
    });
  }
  var T =
    (n(_, null, [
      {
        key: "parse",
        value: function(t) {
          var e = {},
            n = /^([^:]+):\/\/([^\/]+)(.*)$/.exec(t);
          if (!n) throw new Error("bad url");
          (e.full = t), (e.protocol = n[1]), (e.urlpath = n[3]);
          var r = e.urlpath.split("/");
          (e.basename = r.pop().split(/\?|#/)[0]), (e.basepath = r.join("/"));
          var i = n[2].split("@"),
            s = i[0].split(":"),
            a = [null, null];
          return (
            2 === i.length && ((a = i[0].split(":")), (s = i[1].split(":"))),
            (e.user = a[0]),
            (e.pass = a[1]),
            (e.host = s[0]),
            (e.auth = e.user && e.pass ? e.user + ":" + e.pass : ""),
            (e.port = null == s[1] ? _.protocolDefaultPort(e.protocol) : s[1]),
            (e.portDefined = null != s[1]),
            (e.location = e.host + ":" + e.port),
            "unix" == e.protocol && ((e.socket = e.port), (e.port = void 0)),
            e
          );
        },
      },
      {
        key: "full",
        value: function(t) {
          return t.protocol + "://" + t.location + "/" + t.urlpath;
        },
      },
      {
        key: "isAbsolute",
        value: function(t) {
          return /^[^:]+:\/\//.test(t);
        },
      },
      {
        key: "protocolDefaultPort",
        value: function(t) {
          switch (t) {
            case "rtsp":
              return 554;
            case "http":
              return 80;
            case "https":
              return 443;
          }
          return 0;
        },
      },
    ]),
    _);
  function _() {
    p(this, _);
  }
  var w = Symbol("event_listener"),
    E = Symbol("event_listeners"),
    A =
      (n(D, [
        {
          key: "clear",
          value: function() {
            if (this[E]) {
              var t = !0,
                e = !1,
                n = void 0;
              try {
                for (var r, i = this[E][Symbol.iterator](); !(t = (r = i.next()).done); t = !0) {
                  var s = r.value,
                    a = !0,
                    o = !1,
                    u = void 0;
                  try {
                    for (var h, c = s[1][Symbol.iterator](); !(a = (h = c.next()).done); a = !0) {
                      var l = h.value;
                      this[w].removeEventListener(s[0], l);
                    }
                  } catch (t) {
                    (o = !0), (u = t);
                  } finally {
                    try {
                      !a && c.return && c.return();
                    } finally {
                      if (o) throw u;
                    }
                  }
                }
              } catch (t) {
                (e = !0), (n = t);
              } finally {
                try {
                  !t && i.return && i.return();
                } finally {
                  if (e) throw n;
                }
              }
            }
            this[E].clear();
          },
        },
        {
          key: "destroy",
          value: function() {
            this.clear(), (this[E] = null);
          },
        },
        {
          key: "on",
          value: function(t, e, n) {
            return (
              null == n && ((n = e), (e = null)),
              e
                ? this.addEventListener(t, function(t) {
                    t.target.matches(e) && n(t);
                  })
                : this.addEventListener(t, n)
            );
          },
        },
        {
          key: "addEventListener",
          value: function(t, e) {
            return this[E].has(t) || this[E].set(t, new Set()), this[E].get(t).add(e), this[w].addEventListener(t, e, !1), e;
          },
        },
        {
          key: "removeEventListener",
          value: function(t, e) {
            if ((this[w].removeEventListener(t, e, !1), this[E].has(t))) {
              var n = this[E].get(t);
              n.delete(e), n.size || this[E].delete(t);
            }
          },
        },
        {
          key: "dispatchEvent",
          value: function(t) {
            this[w] && this[w].dispatchEvent(t);
          },
        },
      ]),
      D);
  function D(t) {
    p(this, D), (this[w] = t), (this[E] = new Map());
  }
  var P =
    (n(R, [
      {
        key: "clear",
        value: function() {
          this[w] && this[w].clear();
        },
      },
      {
        key: "destroy",
        value: function() {
          this[w] && (this[w].destroy(), (this[w] = null));
        },
      },
      {
        key: "on",
        value: function(t, e, n) {
          return this[w] ? this[w].on(t, e, n) : null;
        },
      },
      {
        key: "addEventListener",
        value: function(t, e) {
          return this[w] ? this[w].addEventListener(t, e, !1) : null;
        },
      },
      {
        key: "removeEventListener",
        value: function(t, e) {
          this[w] && this[w].removeEventListener(t, e, !1);
        },
      },
      {
        key: "dispatchEvent",
        value: function(t, e) {
          this[w] && this[w].dispatchEvent(new CustomEvent(t, { detail: e }));
        },
      },
    ]),
    R);
  function R() {
    var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : null;
    p(this, R), (this[w] = new A(t || document.createElement("div")));
  }
  var O =
    (n(B, [
      {
        key: "on",
        value: function(t, e, n) {
          this[E].has(t) || this[E].set(t, new Set());
          var r = this.eventSource.on(t, e, n);
          r && this[E].get(t).add(r);
        },
      },
      {
        key: "off",
        value: function(t, e) {
          this.eventSource.removeEventListener(t, e);
        },
      },
      {
        key: "clear",
        value: function() {
          this.eventSource.clear(), this[E].clear();
        },
      },
      {
        key: "destroy",
        value: function() {
          this.eventSource.clear(), (this[E] = null), (this.eventSource = null);
        },
      },
    ]),
    B);
  function B(t) {
    p(this, B), (this.eventSource = t), (this[E] = new Map());
  }
  function C(t) {
    if (!(this instanceof C)) return new C(t);
    if ("object" == (void 0 === t ? "undefined" : f(t)) && Array.isArray(t._buffer) && "number" == typeof t._capacity && "number" == typeof t._first && "number" == typeof t._size)
      for (var e in t) t.hasOwnProperty(e) && (this[e] = t[e]);
    else {
      if ("number" != typeof t || t % 1 != 0 || t < 1) throw new TypeError("Invalid capacity");
      (this._buffer = new Array(t)), (this._capacity = t), (this._first = 0), (this._size = 0);
    }
  }
  C.prototype = {
    size: function() {
      return this._size;
    },
    capacity: function() {
      return this._capacity;
    },
    enq: function(t) {
      0 < this._first ? this._first-- : (this._first = this._capacity - 1), (this._buffer[this._first] = t), this._size < this._capacity && this._size++;
    },
    push: function(t) {
      this._size == this._capacity
        ? ((this._buffer[this._first] = t), (this._first = (this._first + 1) % this._capacity))
        : ((this._buffer[(this._first + this._size) % this._capacity] = t), this._size++);
    },
    deq: function() {
      if (0 == this._size) throw new RangeError("dequeue on empty buffer");
      var t = this._buffer[(this._first + this._size - 1) % this._capacity];
      return this._size--, t;
    },
    pop: function() {
      return this.deq();
    },
    shift: function() {
      if (0 == this._size) throw new RangeError("shift on empty buffer");
      var t = this._buffer[this._first];
      return this._first == this._capacity - 1 ? (this._first = 0) : this._first++, this._size--, t;
    },
    get: function(t, e) {
      if (0 == this._size && 0 == t && (null == e || 0 == e)) return [];
      if ("number" != typeof t || t % 1 != 0 || t < 0) throw new TypeError("Invalid start");
      if (t >= this._size) throw new RangeError("Index past end of buffer: " + t);
      if (null == e) return this._buffer[(this._first + t) % this._capacity];
      if ("number" != typeof e || e % 1 != 0 || e < 0) throw new TypeError("Invalid end");
      if (e >= this._size) throw new RangeError("Index past end of buffer: " + e);
      return (
        this._first + t >= this._capacity && ((t -= this._capacity), (e -= this._capacity)),
        this._first + e < this._capacity
          ? this._buffer.slice(this._first + t, this._first + e + 1)
          : this._buffer.slice(this._first + t, this._capacity).concat(this._buffer.slice(0, this._first + e + 1 - this._capacity))
      );
    },
    toarray: function() {
      return 0 == this._size ? [] : this.get(0, this._size - 1);
    },
  };
  var I =
    (n(N, null, [
      {
        key: "init",
        value: function() {
          var t;
          for (t in (N.types = {
            avc1: [],
            avcC: [],
            btrt: [],
            dinf: [],
            dref: [],
            esds: [],
            ftyp: [],
            hdlr: [],
            mdat: [],
            mdhd: [],
            mdia: [],
            mfhd: [],
            minf: [],
            moof: [],
            moov: [],
            mp4a: [],
            mvex: [],
            mvhd: [],
            sdtp: [],
            stbl: [],
            stco: [],
            stsc: [],
            stsd: [],
            stsz: [],
            stts: [],
            tfdt: [],
            tfhd: [],
            traf: [],
            trak: [],
            trun: [],
            trex: [],
            tkhd: [],
            vmhd: [],
            smhd: [],
          }))
            N.types.hasOwnProperty(t) && (N.types[t] = [t.charCodeAt(0), t.charCodeAt(1), t.charCodeAt(2), t.charCodeAt(3)]);
          var e = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]),
            n = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
          N.HDLR_TYPES = { video: e, audio: n };
          var r = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]),
            i = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
          (N.STTS = N.STSC = N.STCO = i),
            (N.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])),
            (N.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0])),
            (N.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])),
            (N.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]));
          var s = new Uint8Array([105, 115, 111, 109]),
            a = new Uint8Array([97, 118, 99, 49]),
            o = new Uint8Array([0, 0, 0, 1]);
          (N.FTYP = N.box(N.types.ftyp, s, o, s, a)), (N.DINF = N.box(N.types.dinf, N.box(N.types.dref, r)));
        },
      },
      {
        key: "box",
        value: function(t) {
          for (var e = arguments.length, n = Array(1 < e ? e - 1 : 0), r = 1; r < e; r++) n[r - 1] = arguments[r];
          for (var i, s = 8, a = n.length, o = a; a--; ) s += n[a].byteLength;
          for ((i = new Uint8Array(s))[0] = (s >> 24) & 255, i[1] = (s >> 16) & 255, i[2] = (s >> 8) & 255, i[3] = 255 & s, i.set(t, 4), a = 0, s = 8; a < o; ++a)
            i.set(n[a], s), (s += n[a].byteLength);
          return i;
        },
      },
      {
        key: "hdlr",
        value: function(t) {
          return N.box(N.types.hdlr, N.HDLR_TYPES[t]);
        },
      },
      {
        key: "mdat",
        value: function(t) {
          return N.box(N.types.mdat, t);
        },
      },
      {
        key: "mdhd",
        value: function(t, e) {
          return N.box(
            N.types.mdhd,
            new Uint8Array([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, (t >> 24) & 255, (t >> 16) & 255, (t >> 8) & 255, 255 & t, e >> 24, (e >> 16) & 255, (e >> 8) & 255, 255 & e, 85, 196, 0, 0]),
          );
        },
      },
      {
        key: "mdia",
        value: function(t) {
          return N.box(N.types.mdia, N.mdhd(t.timescale, t.duration), N.hdlr(t.type), N.minf(t));
        },
      },
      {
        key: "mfhd",
        value: function(t) {
          return N.box(N.types.mfhd, new Uint8Array([0, 0, 0, 0, t >> 24, (t >> 16) & 255, (t >> 8) & 255, 255 & t]));
        },
      },
      {
        key: "minf",
        value: function(t) {
          return "audio" === t.type ? N.box(N.types.minf, N.box(N.types.smhd, N.SMHD), N.DINF, N.stbl(t)) : N.box(N.types.minf, N.box(N.types.vmhd, N.VMHD), N.DINF, N.stbl(t));
        },
      },
      {
        key: "moof",
        value: function(t, e, n) {
          return N.box(N.types.moof, N.mfhd(t), N.traf(n, e));
        },
      },
      {
        key: "moov",
        value: function(t, e, n) {
          for (var r = t.length, i = []; r--; ) i[r] = N.trak(t[r]);
          return N.box.apply(null, [N.types.moov, N.mvhd(n, e)].concat(i).concat(N.mvex(t)));
        },
      },
      {
        key: "mvex",
        value: function(t) {
          for (var e = t.length, n = []; e--; ) n[e] = N.trex(t[e]);
          return N.box.apply(null, [N.types.mvex].concat(n));
        },
      },
      {
        key: "mvhd",
        value: function(t, e) {
          var n = new Uint8Array([
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            2,
            (t >> 24) & 255,
            (t >> 16) & 255,
            (t >> 8) & 255,
            255 & t,
            (e >> 24) & 255,
            (e >> 16) & 255,
            (e >> 8) & 255,
            255 & e,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            64,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            255,
            255,
          ]);
          return N.box(N.types.mvhd, n);
        },
      },
      {
        key: "sdtp",
        value: function(t) {
          var e,
            n,
            r = t.samples || [],
            i = new Uint8Array(4 + r.length);
          for (n = 0; n < r.length; n++) (e = r[n].flags), (i[n + 4] = (e.dependsOn << 4) | (e.isDependedOn << 2) | e.hasRedundancy);
          return N.box(N.types.sdtp, i);
        },
      },
      {
        key: "stbl",
        value: function(t) {
          return N.box(N.types.stbl, N.stsd(t), N.box(N.types.stts, N.STTS), N.box(N.types.stsc, N.STSC), N.box(N.types.stsz, N.STSZ), N.box(N.types.stco, N.STCO));
        },
      },
      {
        key: "avc1",
        value: function(t) {
          var e,
            n,
            r,
            i = [],
            s = [];
          for (e = 0; e < t.sps.length; e++) (r = (n = t.sps[e]).byteLength), i.push((r >>> 8) & 255), i.push(255 & r), (i = i.concat(Array.prototype.slice.call(n)));
          for (e = 0; e < t.pps.length; e++) (r = (n = t.pps[e]).byteLength), s.push((r >>> 8) & 255), s.push(255 & r), (s = s.concat(Array.prototype.slice.call(n)));
          var a = N.box(
              N.types.avcC,
              new Uint8Array(
                [1, i[3], i[4], i[5], 255, 224 | t.sps.length]
                  .concat(i)
                  .concat([t.pps.length])
                  .concat(s),
              ),
            ),
            o = t.width,
            u = t.height;
          return N.box(
            N.types.avc1,
            new Uint8Array([
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              (o >> 8) & 255,
              255 & o,
              (u >> 8) & 255,
              255 & u,
              0,
              72,
              0,
              0,
              0,
              72,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              18,
              98,
              105,
              110,
              101,
              108,
              112,
              114,
              111,
              46,
              114,
              117,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              24,
              17,
              17,
            ]),
            a,
            N.box(N.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])),
          );
        },
      },
      {
        key: "esds",
        value: function(t) {
          var e = t.config.byteLength,
            n = new Uint8Array(26 + e + 3);
          return n.set([0, 0, 0, 0, 3, 23 + e, 0, 1, 0, 4, 15 + e, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, e]), n.set(t.config, 26), n.set([6, 1, 2], 26 + e), n;
        },
      },
      {
        key: "mp4a",
        value: function(t) {
          var e = t.audiosamplerate;
          return N.box(
            N.types.mp4a,
            new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t.channelCount, 0, 16, 0, 0, 0, 0, (e >> 8) & 255, 255 & e, 0, 0]),
            N.box(N.types.esds, N.esds(t)),
          );
        },
      },
      {
        key: "stsd",
        value: function(t) {
          return "audio" === t.type ? N.box(N.types.stsd, N.STSD, N.mp4a(t)) : N.box(N.types.stsd, N.STSD, N.avc1(t));
        },
      },
      {
        key: "tkhd",
        value: function(t) {
          var e = t.id,
            n = t.duration,
            r = t.width,
            i = t.height,
            s = t.volume;
          return N.box(
            N.types.tkhd,
            new Uint8Array([
              0,
              0,
              0,
              7,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              (e >> 24) & 255,
              (e >> 16) & 255,
              (e >> 8) & 255,
              255 & e,
              0,
              0,
              0,
              0,
              n >> 24,
              (n >> 16) & 255,
              (n >> 8) & 255,
              255 & n,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              (s >> 0) & 255,
              (((s % 1) * 10) >> 0) & 255,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              64,
              0,
              0,
              0,
              (r >> 8) & 255,
              255 & r,
              0,
              0,
              (i >> 8) & 255,
              255 & i,
              0,
              0,
            ]),
          );
        },
      },
      {
        key: "traf",
        value: function(t, e) {
          var n = N.sdtp(t),
            r = t.id;
          return N.box(
            N.types.traf,
            N.box(N.types.tfhd, new Uint8Array([0, 0, 0, 0, r >> 24, (r >> 16) & 255, (r >> 8) & 255, 255 & r])),
            N.box(N.types.tfdt, new Uint8Array([0, 0, 0, 0, e >> 24, (e >> 16) & 255, (e >> 8) & 255, 255 & e])),
            N.trun(t, n.length + 16 + 16 + 8 + 16 + 8 + 8),
            n,
          );
        },
      },
      {
        key: "trak",
        value: function(t) {
          return (t.duration = t.duration || 4294967295), N.box(N.types.trak, N.tkhd(t), N.mdia(t));
        },
      },
      {
        key: "trex",
        value: function(t) {
          var e = t.id;
          return N.box(N.types.trex, new Uint8Array([0, 0, 0, 0, e >> 24, (e >> 16) & 255, (e >> 8) & 255, 255 & e, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]));
        },
      },
      {
        key: "trun",
        value: function(t, e) {
          var n,
            r,
            i,
            s,
            a,
            o,
            u = t.samples || [],
            h = u.length,
            c = 12 + 16 * h,
            l = new Uint8Array(c);
          for (e += 8 + c, l.set([0, 0, 15, 1, (h >>> 24) & 255, (h >>> 16) & 255, (h >>> 8) & 255, 255 & h, (e >>> 24) & 255, (e >>> 16) & 255, (e >>> 8) & 255, 255 & e], 0), n = 0; n < h; n++)
            (i = (r = u[n]).duration),
              (s = r.size),
              (a = r.flags),
              (o = r.cts),
              l.set(
                [
                  (i >>> 24) & 255,
                  (i >>> 16) & 255,
                  (i >>> 8) & 255,
                  255 & i,
                  (s >>> 24) & 255,
                  (s >>> 16) & 255,
                  (s >>> 8) & 255,
                  255 & s,
                  (a.isLeading << 2) | a.dependsOn,
                  (a.isDependedOn << 6) | (a.hasRedundancy << 4) | (a.paddingValue << 1) | a.isNonSync,
                  61440 & a.degradPrio,
                  15 & a.degradPrio,
                  (o >>> 24) & 255,
                  (o >>> 16) & 255,
                  (o >>> 8) & 255,
                  255 & o,
                ],
                12 + 16 * n,
              );
          return N.box(N.types.trun, l);
        },
      },
      {
        key: "initSegment",
        value: function(t, e, n) {
          N.types || N.init();
          var r,
            i = N.moov(t, e, n);
          return (r = new Uint8Array(N.FTYP.byteLength + i.byteLength)).set(N.FTYP), r.set(i, N.FTYP.byteLength), r;
        },
      },
    ]),
    N);
  function N() {
    p(this, N);
  }
  window.DataView;
  function U() {
    var n,
      r,
      t = new Promise(function(t, e) {
        (n = t), (r = e);
      });
    return (t.resolve = n), (t.reject = r), t;
  }
  var L = b("mse"),
    M =
      (n(
        V,
        [
          {
            key: "destroy",
            value: function() {
              var t = this;
              function e(t) {}
              this._destroyed = !0;
              var n = [],
                r = this._queue,
                i = r[0];
              (this._queue = r.slice(0, 1)), i && n.push(i.p.catch(e));
              for (var s = 1; s < r.length; s++) r[s].p.catch(e), r[s].p.reject();
              return Promise.all(n).then(function() {
                t.eventSource.destroy(), (t.eventSource = null), t.mediaSource.removeSourceBuffer(t._sourceBuffer), (t._sourceBuffer = null), (t._queue = {}), (t._lastClearEnd = 0);
              });
            },
          },
          {
            key: "setLive",
            value: function(t) {
              this.is_live = t;
            },
          },
          {
            key: "appendBuffer",
            value: function(t) {
              return this._enqueueOperations(this._opAppend.bind(this, t));
            },
          },
          {
            key: "clear",
            value: function() {
              return this._enqueueOperations(this._opRemove.bind(this, 0, this.mediaSource.duration));
            },
          },
          {
            key: "remove",
            value: function(t, e) {
              return this._enqueueOperations(this._opRemove.bind(this, t, e));
            },
          },
          {
            key: "_clearLiveBuffer",
            value: function() {
              if (this.is_live) {
                var t = this._sourceBuffer.buffered;
                if (0 != t.length) {
                  var e = t.start(0),
                    n = t.end(0),
                    r = this.players[0].currentTime - V.LIVE_BUFFER_DURATION;
                  n - e < V.LIVE_BUFFER_DURATION || r <= e || r - this._lastClearEnd < V.LIVE_BUFFER_DURATION || ((this._lastClearEnd = r), this.remove(e, r));
                }
              }
            },
          },
          {
            key: "_enqueueOperations",
            value: function(t) {
              if (this._destroyed) return Promise.reject();
              var e = { start: t, p: new U() };
              if ((this._queue.push(e), 1 == this._queue.length))
                try {
                  e.start();
                } catch (t) {
                  e.p.reject(t), this._popFromQueue();
                }
            },
          },
          {
            key: "_popFromQueue",
            value: function() {
              this._queue.shift();
              var e = this._queue[0];
              if (e)
                try {
                  e.start();
                } catch (t) {
                  console.log("pop op: ", t), e.p.reject(t), this._popFromQueue();
                }
            },
          },
          {
            key: "_onUpdateEnd",
            value: function() {
              var t = this._queue[0];
              t ? (this._sourceBuffer.updating ? console.log("SourceBuffer should not be updating on updateend!") : (t.p.resolve(), this._popFromQueue())) : console.log("Spurious updateend event!");
            },
          },
          {
            key: "_onError",
            value: function() {
              var t = this._queue[0];
              if (t)
                if (this._sourceBuffer.updating) console.log("SourceBuffer should not be updating on updateend!");
                else {
                  var e = this.mediaSource.error ? this.mediaSource.error.code : 0;
                  t.p.reject(new Error("media source error: " + e));
                }
              else console.log("Spurious updateend event!");
            },
          },
          {
            key: "_adjustPlaySpeed",
            value: function() {
              if (0 != this._sourceBuffer.buffered.length) {
                var t = this._sourceBuffer.buffered.end(0),
                  e = this.players[0].currentTime;
                1 == this.mediaSource.playbackRate
                  ? e < t - V.FAST_FORWARD_BEGIN_DURATION &&
                    ((this.mediaSource.playbackRate = 1.5), console.log("begin fast forward readyState: ", this.mediaSource.readyState, "currentTime: ", e, "buffer end", t))
                  : 1 < this.mediaSource.playbackRate &&
                    t - V.FAST_FORWARD_END_DURATION <= e &&
                    ((this.mediaSource.playbackRate = 1), console.log("end fast forward readyState: ", this.mediaSource.readyState, "currentTime: ", e, "buffer end", t));
              }
            },
          },
          {
            key: "_opAppend",
            value: function(t) {
              this._adjustPlaySpeed(), this._sourceBuffer.appendBuffer(t), this._clearLiveBuffer();
            },
          },
          {
            key: "_opRemove",
            value: function(t, e) {
              e <= t ? this.onUpdateEnd_() : (L.debug("cleaing streaming buffer: ", t, e), this._sourceBuffer.remove(t, e));
            },
          },
          {
            key: "_opAbort",
            value: function() {
              var t = this._sourceBuffer.appendWindowStart,
                e = this._sourceBuffer.appendWindowEnd;
              this._sourceBuffer.abort(), (this._sourceBuffer.appendWindowStart = t), (this._sourceBuffer.appendWindowEnd = e), this._onUpdateEnd();
            },
          },
          {
            key: "_opFlush",
            value: function() {
              if (0 != this.mediaSource.buffered.length) throw new Error("flush_ should only be used after clearing all data!");
              (this.mediaSource.currentTime -= 0.001), this._onUpdateEnd();
            },
          },
        ],
        [
          {
            key: "LIVE_BUFFER_DURATION",
            get: function() {
              return 60;
            },
          },
          {
            key: "FAST_FORWARD_END_DURATION",
            get: function() {
              return 3;
            },
          },
          {
            key: "FAST_FORWARD_BEGIN_DURATION",
            get: function() {
              return 6;
            },
          },
        ],
      ),
      V);
  function V(t, e) {
    p(this, V),
      (this.mediaSource = t.mediaSource),
      (this.players = t.players),
      (this._parent = t),
      (this._queue = []),
      (this.codec = e),
      (this._destroyed = !1),
      (this._lastClearEnd = 0),
      L.debug("Use codec: " + e),
      (this._sourceBuffer = this.mediaSource.addSourceBuffer(e)),
      (this.eventSource = new P(this._sourceBuffer)),
      this.eventSource.addEventListener("updateend", this._onUpdateEnd.bind(this)),
      this.eventSource.addEventListener("error", this._onError.bind(this));
  }
  var q =
    (n(H, null, [
      {
        key: "isSupported",
        value: function(t) {
          return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs="' + t.join(",") + '"');
        },
      },
      {
        key: "ErrorNotes",
        get: function() {
          var t;
          return (
            i((t = {}), MediaError.MEDIA_ERR_ABORTED, "fetching process aborted by user"),
            i(t, MediaError.MEDIA_ERR_NETWORK, "error occurred when downloading"),
            i(t, MediaError.MEDIA_ERR_DECODE, "error occurred when decoding"),
            i(t, MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED, "audio/video not supported"),
            t
          );
        },
      },
    ]),
    n(H, [
      {
        key: "destroy",
        value: function() {
          this._reset(), this.eventSource.destroy(), (this.mediaSource = null), (this.eventSource = null);
        },
      },
      {
        key: "play",
        value: function() {
          var r = this;
          this.players.forEach(function(t, e) {
            if (t.paused && !r.playing[e]) {
              var n = t.play();
              void 0 !== n &&
                n
                  .catch(function(t) {
                    console.log("auto play disabled by browser: ", t);
                  })
                  .then(function() {
                    L.debug("player " + e + ": play");
                  });
            }
          });
        },
      },
      {
        key: "setLive",
        value: function(t) {
          for (var e in this.buffers) this.buffers[e].setLive(t);
          this.is_live = t;
        },
      },
      {
        key: "_resetBuffers",
        value: function() {
          var n = this;
          this.players.forEach(function(t, e) {
            !t.paused && n.playing[e] && (t.pause(), (t.currentTime = 0));
          });
          var t = [];
          for (var e in this.buffers) t.push(this.buffers[e].destroy());
          return 0 == t.length
            ? Promise.resolve()
            : ((this.buffers = {}),
              Promise.all(t).then(function() {
                "open" == n.mediaSource.readyState && ((n.mediaSource.duration = 0), n.mediaSource.endOfStream());
              }));
        },
      },
      {
        key: "attachMediaSource",
        value: function() {
          var e = this;
          return this._resetBuffers().then(function(t) {
            return (
              L.debug("source buffers reset."),
              e._reset(),
              e.players.forEach(function(t) {
                t.src = URL.createObjectURL(e.mediaSource);
              }),
              e._setupEvents()
            );
          });
        },
      },
      {
        key: "_setupEvents",
        value: function() {
          var n = this;
          return (
            this.eventSource.clear(),
            (this.resolved = !1),
            (this.mediaReady = new Promise(function(t, e) {
              (n._sourceOpen = function() {
                L.debug("Media source opened: " + n.mediaSource.readyState), n.resolved || ((n.resolved = !0), t());
              }),
                (n._sourceEnded = function() {
                  L.debug("Media source ended: " + n.mediaSource.readyState);
                }),
                (n._sourceClose = function() {
                  L.debug("Media source closed: " + n.mediaSource.readyState), n.resolved && n.eventSource.dispatchEvent("sourceclosed");
                }),
                n.eventSource.addEventListener("sourceopen", n._sourceOpen),
                n.eventSource.addEventListener("sourceended", n._sourceEnded),
                n.eventSource.addEventListener("sourceclose", n._sourceClose);
            })),
            this.mediaReady
          );
        },
      },
      {
        key: "_reset",
        value: function() {
          (this.ready = !1), (this.resolved = !1), (this.buffers = {});
        },
      },
      {
        key: "setCodec",
        value: function(t, e) {
          var n = this;
          return this.mediaReady.then(function() {
            (n.buffers[t] = new M(n, e)), n.buffers[t].setLive(n.is_live);
          });
        },
      },
      {
        key: "feed",
        value: function(e, t) {
          var n = this;
          this.buffers[e] &&
            (Array.isArray(t)
              ? t.forEach(function(t) {
                  n.buffers[e].appendBuffer(t);
                })
              : this.buffers[e].appendBuffer(t));
        },
      },
    ]),
    H);
  function H(t) {
    p(this, H), (this.players = t);
    var n = this.players.map(function(t, e) {
      return (
        (t.onplaying = function() {
          n[e] = !0;
        }),
        (t.onpause = function() {
          n[e] = !1;
        }),
        !t.paused
      );
    });
    (this.playing = n), (this.mediaSource = new MediaSource()), (this.eventSource = new P(this.mediaSource)), this._reset();
  }
  var F = b("remuxer:base"),
    j = 1,
    z =
      (n(K, null, [
        {
          key: "getTrackID",
          value: function() {
            return j++;
          },
        },
        {
          key: "MP4_TIMESCALE",
          get: function() {
            return 9e4;
          },
        },
      ]),
      n(
        K,
        [
          {
            key: "scaled",
            value: function(t) {
              return t / this.scaleFactor;
            },
          },
          {
            key: "unscaled",
            value: function(t) {
              return t * this.scaleFactor;
            },
          },
          {
            key: "remux",
            value: function(t) {
              return !!t && (this.samples.push({ unit: t, pts: t.pts, dts: t.dts }), !0);
            },
          },
          { key: "setConfig", value: function(t) {} },
          {
            key: "insertDscontinuity",
            value: function() {
              this.samples.push(null);
            },
          },
          {
            key: "init",
            value: function(t, e, n) {
              var r = !(2 < arguments.length && void 0 !== n) || n;
              (this.initPTS = Math.min(t, this.samples[0].dts)),
                (this.initDTS = Math.min(e, this.samples[0].dts)),
                F.debug("Initial pts=" + this.initPTS + " dts=" + this.initDTS + " offset=" + this.unscaled(this.timeOffset)),
                (this.initialized = r);
            },
          },
          {
            key: "flush",
            value: function() {
              this.seq++, (this.mp4track.len = 0), (this.mp4track.samples = []);
            },
          },
          {
            key: "getPayloadBase",
            value: function(t, e) {
              return this.readyToDecode && this.initialized && this.samples.length ? (this.samples.sort(K.dtsSortFunc), !0) : null;
            },
          },
          {
            key: "setOOBDataHandler",
            value: function(t) {
              this._oobHandler = t;
            },
          },
          {
            key: "sendOOBData",
            value: function(t) {
              this._oobHandler && this._oobHandler(t);
            },
          },
        ],
        [
          {
            key: "toMS",
            value: function(t) {
              return t / 90;
            },
          },
          {
            key: "dtsSortFunc",
            value: function(t, e) {
              return t.dts - e.dts;
            },
          },
        ],
      ),
      K);
  function K(t, e, n) {
    p(this, K), (this.timeOffset = 0), (this.timescale = t), (this.scaleFactor = e), (this.readyToDecode = !1), (this.samples = []), (this.seq = 1), (this.tsAlign = 1);
  }
  var G = b("remuxer:aac"),
    W =
      (s(Z, z),
      n(Z, [
        {
          key: "setConfig",
          value: function(t) {
            (this.mp4track.channelCount = t.channels),
              (this.mp4track.audiosamplerate = t.samplerate),
              this.mp4track.duration || (this.mp4track.duration = (this.duration ? this.duration : 0) * t.samplerate),
              (this.mp4track.timescale = t.samplerate),
              (this.mp4track.config = t.config),
              (this.mp4track.codec = t.codec),
              (this.timescale = t.samplerate),
              (this.scaleFactor = z.MP4_TIMESCALE / t.samplerate),
              (this.expectedSampleDuration = 1024 * this.scaleFactor),
              (this.readyToDecode = !0);
          },
        },
        {
          key: "remux",
          value: function(t) {
            o(Z.prototype.__proto__ || Object.getPrototypeOf(Z.prototype), "remux", this).call(this, t) && (this.mp4track.len += t.getSize());
          },
        },
        {
          key: "getPayload",
          value: function() {
            if (!this.readyToDecode || !this.samples.length) return null;
            this.samples.sort(function(t, e) {
              return t.dts - e.dts;
            });
            for (var t = new Uint8Array(this.mp4track.len), e = 0, n = this.mp4track.samples, r = void 0, i = void 0, s = void 0, a = void 0; this.samples.length; ) {
              var o = this.samples.shift();
              if (null === o) {
                this.nextDts = void 0;
                break;
              }
              var u = o.unit;
              if (((s = o.pts - this.initDTS), (a = o.dts - this.initDTS), void 0 === i)) {
                if (this.nextDts) {
                  var h = Math.round(this.scaled(s - this.nextAacPts));
                  if (Math.abs(h) < 600 && h) {
                    if (0 < h) G.log(h + " ms hole between AAC samples detected,filling it");
                    else if (h < -12) {
                      G.log(-h + " ms overlapping between AAC samples detected, drop frame"), (this.mp4track.len -= u.getSize());
                      continue;
                    }
                    s = a = this.nextAacPts;
                  }
                }
                this.firstDTS = Math.max(0, a);
              }
              (r = { size: u.getSize(), cts: 0, duration: 1024, flags: { isLeading: 0, isDependedOn: 0, hasRedundancy: 0, degradPrio: 0, dependsOn: 1 } }),
                t.set(u.getData(), e),
                (e += u.getSize()),
                n.push(r),
                (i = a);
            }
            return n.length ? ((this.nextDts = s + this.expectedSampleDuration), new Uint8Array(t.buffer, 0, this.mp4track.len)) : null;
          },
        },
      ]),
      Z);
  function Z(t) {
    var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 1,
      n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
    p(this, Z);
    var r = a(this, (Z.__proto__ || Object.getPrototypeOf(Z)).call(this, t, e));
    return (
      (r.codecstring = q.CODEC_AAC),
      (r.units = []),
      (r.initDTS = void 0),
      (r.nextAacPts = void 0),
      (r.lastPts = 0),
      (r.firstDTS = 0),
      (r.firstPTS = 0),
      (r.duration = n.duration || 0),
      (r.initialized = !1),
      (r.mp4track = {
        id: z.getTrackID(),
        type: "audio",
        fragmented: !0,
        channelCount: 0,
        audiosamplerate: r.timescale,
        duration: 0,
        timescale: r.timescale,
        volume: 1,
        samples: [],
        config: "",
        len: 0,
      }),
      n.config && r.setConfig(n.config),
      r
    );
  }
  var Y =
    (n(Q, [
      {
        key: "loadWord",
        value: function() {
          var t = this.data.byteLength - this.bytesAvailable,
            e = new Uint8Array(4),
            n = Math.min(4, this.bytesAvailable);
          if (0 === n) throw new Error("no bytes available");
          e.set(this.data.subarray(t, t + n)), (this.word = new DataView(e.buffer, e.byteOffset, e.byteLength).getUint32(0)), (this.bitsAvailable = 8 * n), (this.bytesAvailable -= n);
        },
      },
      {
        key: "skipBits",
        value: function(t) {
          var e;
          this.bitsAvailable > t || ((t -= this.bitsAvailable), (t -= (e = t >> 3) << 3), (this.bytesAvailable -= e), this.loadWord()), (this.word <<= t), (this.bitsAvailable -= t);
        },
      },
      {
        key: "readBits",
        value: function(t) {
          var e = Math.min(this.bitsAvailable, t),
            n = this.word >>> (32 - e);
          return (
            32 < t && S.error("Cannot read more than 32 bits at a time"),
            (this.bitsAvailable -= e),
            0 < this.bitsAvailable ? (this.word <<= e) : this.loadWord(),
            0 < (e = t - e) ? (n << e) | this.readBits(e) : n
          );
        },
      },
      {
        key: "skipLZ",
        value: function() {
          var t;
          for (t = 0; t < this.bitsAvailable; ++t) if (0 != (this.word & (2147483648 >>> t))) return (this.word <<= t), (this.bitsAvailable -= t), t;
          return this.loadWord(), t + this.skipLZ();
        },
      },
      {
        key: "skipUEG",
        value: function() {
          this.skipBits(1 + this.skipLZ());
        },
      },
      {
        key: "skipEG",
        value: function() {
          this.skipBits(1 + this.skipLZ());
        },
      },
      {
        key: "readUEG",
        value: function() {
          var t = this.skipLZ();
          return this.readBits(t + 1) - 1;
        },
      },
      {
        key: "readEG",
        value: function() {
          var t = this.readUEG();
          return 1 & t ? (1 + t) >>> 1 : -1 * (t >>> 1);
        },
      },
      {
        key: "readBoolean",
        value: function() {
          return 1 === this.readBits(1);
        },
      },
      {
        key: "readUByte",
        value: function() {
          return this.readBits(8);
        },
      },
      {
        key: "readUShort",
        value: function() {
          return this.readBits(16);
        },
      },
      {
        key: "readUInt",
        value: function() {
          return this.readBits(32);
        },
      },
    ]),
    Q);
  function Q(t) {
    p(this, Q), (this.data = t), (this.bytesAvailable = this.data.byteLength), (this.word = 0), (this.bitsAvailable = 0);
  }
  function $(t) {
    for (var e = window.atob(t), n = e.length, r = new Uint8Array(n), i = 0; i < n; i++) r[i] = e.charCodeAt(i);
    return r.buffer;
  }
  function J(t) {
    for (var e = t.length >> 1, n = new Uint8Array(e), r = 0; r < e; r++) n[r] = parseInt(t.substr(r << 1, 2), 16);
    return n;
  }
  var X =
    (n(tt, [
      {
        key: "readBits",
        value: function(t) {
          if (32 < (0 | t) || 0 == (0 | t)) throw new Error("too big");
          for (var e = 0, n = t; 0 < n; --n)
            (e = ((0 | e) << 1) | (((0 | this.byte) >> (8 - ++this.bitpos)) & 1)), 8 <= (0 | this.bitpos) && ((this.byte = this.src.getUint8(++this.bytepos)), (this.bitpos &= 7));
          return e;
        },
      },
      {
        key: "skipBits",
        value: function(t) {
          return (
            (this.bitpos += 7 & (0 | t)),
            (this.bytepos += (0 | t) >>> 3),
            7 < this.bitpos && ((this.bitpos &= 7), ++this.bytepos),
            this.finished() ? this.bytepos - this.src.byteLength - this.src.bitpos : ((this.byte = this.src.getUint8(this.bytepos)), 0)
          );
        },
      },
      {
        key: "finished",
        value: function() {
          return this.bytepos >= this.src.byteLength;
        },
      },
    ]),
    tt);
  function tt(t) {
    p(this, tt), (this.src = new DataView(t.buffer, t.byteOffset, t.byteLength)), (this.bitpos = 0), (this.byte = this.src.getUint8(0)), (this.bytepos = 0);
  }
  var et =
    (n(nt, null, [
      {
        key: "type",
        value: function(t) {
          return t.ntype in nt.TYPES ? nt.TYPES[t.ntype] : "UNKNOWN";
        },
      },
      {
        key: "NDR",
        get: function() {
          return 1;
        },
      },
      {
        key: "IDR",
        get: function() {
          return 5;
        },
      },
      {
        key: "SEI",
        get: function() {
          return 6;
        },
      },
      {
        key: "SPS",
        get: function() {
          return 7;
        },
      },
      {
        key: "PPS",
        get: function() {
          return 8;
        },
      },
      {
        key: "STAP_A",
        get: function() {
          return 24;
        },
      },
      {
        key: "STAP_B",
        get: function() {
          return 25;
        },
      },
      {
        key: "FU_A",
        get: function() {
          return 28;
        },
      },
      {
        key: "FU_B",
        get: function() {
          return 29;
        },
      },
      {
        key: "TYPES",
        get: function() {
          var t;
          return i((t = {}), nt.IDR, "IDR"), i(t, nt.SEI, "SEI"), i(t, nt.SPS, "SPS"), i(t, nt.PPS, "PPS"), i(t, nt.NDR, "NDR"), t;
        },
      },
    ]),
    n(nt, [
      {
        key: "appendData",
        value: function(t) {
          this.data = (function(t, e) {
            var n = new Uint8Array((0 | t.byteLength) + (0 | e.byteLength));
            return n.set(t, 0), n.set(e, 0 | t.byteLength), n;
          })(this.data, t);
        },
      },
      {
        key: "toString",
        value: function() {
          return nt.type(this) + "(" + this.data.byteLength + "): NRI: " + this.getNri() + ", PTS: " + this.pts + ", DTS: " + this.dts;
        },
      },
      {
        key: "getNri",
        value: function() {
          return this.nri >> 5;
        },
      },
      {
        key: "type",
        value: function() {
          return this.ntype;
        },
      },
      {
        key: "isSpsPps",
        value: function() {
          return this.ntype == nt.SPS || this.ntype == nt.PPS;
        },
      },
      {
        key: "isKeyframe",
        value: function() {
          return this.ntype == nt.IDR;
        },
      },
      {
        key: "isDataType",
        value: function() {
          return this.ntype == nt.NDR || this.ntype == nt.IDR || this.ntype == nt.SEI;
        },
      },
      {
        key: "isSEI",
        value: function() {
          return this.ntype == nt.SEI;
        },
      },
      {
        key: "getSize",
        value: function() {
          return 5 + this.data.byteLength;
        },
      },
      {
        key: "getData",
        value: function() {
          var t = new Uint8Array(5 + this.data.byteLength),
            e = new DataView(t.buffer);
          return e.setUint32(0, this.data.byteLength + 1), e.setUint8(4, 0 | (96 & this.nri) | (31 & this.ntype)), t.set(this.data, 5), t;
        },
      },
      {
        key: "getRBSPData",
        value: function() {
          for (var t = this.data.byteLength, e = this.data, n = 0; n + 1 < t; n += 2)
            if (0 == e[n] && (0 < n && 0 == e[n - 1] && n--, n + 2 < t && 0 == e[n + 1] && e[n + 2] <= 3)) {
              3 != e[n + 2] && 0 != e[n + 2] && (t = n);
              break;
            }
          if (t - 1 <= n) return this.data.slice(0, t);
          for (var r = new ArrayBuffer(t), i = new Uint8Array(r), s = 0; s < n; s++) i[s] = e[s];
          for (var a = n, o = n; a + 2 < t; ) {
            if (3 < e[a + 2]) (i[o++] = e[a++]), (i[o++] = e[a++]);
            else if (0 == e[a] && 0 == e[a + 1] && 0 != e[a + 2]) {
              if (3 != e[a + 2]) return new Uint8Array(r, 0, o);
              (i[o++] = 0), (i[o++] = 0), (a += 3);
              continue;
            }
            i[o++] = e[a++];
          }
          for (; a < t; ) i[o++] = e[a++];
          return new Uint8Array(r, 0, o);
        },
      },
    ]),
    nt);
  function nt(t, e, n, r, i) {
    p(this, nt), (this.data = n), (this.ntype = t), (this.nri = e), (this.dts = r), (this.pts = i || this.dts);
  }
  var rt =
    (n(it, null, [
      {
        key: "SEI_TYPE_USER_DATA_UNREGISTERED",
        get: function() {
          return 5;
        },
      },
    ]),
    n(
      it,
      [
        {
          key: "_parse",
          value: function() {
            var t = new Y(this._rbsp);
            (this._payloadType = it.readFFLongUint(t)), (this._payloadSize = it.readFFLongUint(t)), (this._payload = new Uint8Array(this._payloadSize));
            for (var e = 0; e < this._payloadSize; e++) this._payload[e] = t.readUByte();
          },
        },
        {
          key: "payloadType",
          get: function() {
            return this._payloadType;
          },
        },
        {
          key: "payload",
          get: function() {
            return this._payload;
          },
        },
        {
          key: "rbsp",
          get: function() {
            return this._rbsp;
          },
        },
        {
          key: "payloadSize",
          get: function() {
            return this._payloadSize;
          },
        },
      ],
      [
        {
          key: "readFFLongUint",
          value: function(t) {
            var e = 0,
              n = 0;
            for (n = t.readUByte(); 255 === n; ) (e += n), (n = t.readUByte());
            return (e += n);
          },
        },
      ],
    ),
    it);
  function it(t) {
    p(this, it), (this._rbsp = t), this._parse();
  }
  var st =
    (n(
      at,
      [
        {
          key: "msToScaled",
          value: function(t) {
            return (t - this.remuxer.timeOffset) * this.remuxer.scaleFactor;
          },
        },
        {
          key: "setHeaderSPS",
          value: function(t) {
            this.headerSPS = t;
          },
        },
        {
          key: "setHeaderPPS",
          value: function(t) {
            this.headerPPS = t;
          },
        },
        {
          key: "parseSPS",
          value: function(t) {
            var e = at.readSPS(new Uint8Array(t));
            (this.track.width = e.width), (this.track.height = e.height), (this.track.sps = [new Uint8Array(t)]), (this.track.codec = "avc1.");
            for (var n = new DataView(t.buffer, t.byteOffset + 1, 4), r = 0; r < 3; ++r) {
              var i = n.getUint8(r).toString(16);
              i.length < 2 && (i = "0" + i), (this.track.codec += i);
            }
          },
        },
        {
          key: "parsePPS",
          value: function(t) {
            this.track.pps = [new Uint8Array(t)];
          },
        },
        {
          key: "checkReady",
          value: function() {
            !this.remuxer.readyToDecode && this.track.pps && this.track.sps && (this.remuxer.readyToDecode = !0);
          },
        },
        {
          key: "parseNAL",
          value: function(t) {
            if (!t) return !1;
            var e = !1,
              n = !1;
            switch (t.type()) {
              case et.NDR:
                e = this.seenIDR;
                break;
              case et.IDR:
                !this.track.pps && this.headerPPS && this.parsePPS(this.headerPPS), !this.track.sps && this.headerSPS && this.parseSPS(this.headerSPS), this.checkReady(), (e = this.seenIDR = !0);
                break;
              case et.PPS:
                this.track.pps || (this.parsePPS(t.getData().subarray(4)), this.checkReady()), (n = !0);
                break;
              case et.SPS:
                this.track.sps || (this.parseSPS(t.getData().subarray(4)), this.checkReady()), (n = !0);
                break;
              case et.SEI:
            }
            return 0 < t.getNri() && !n && (e = !0), e;
          },
        },
      ],
      [
        {
          key: "skipScalingList",
          value: function(t, e) {
            for (var n = 8, r = 8, i = 0; i < e; i++) 0 !== r && (r = (n + t.readEG() + 256) % 256), (n = 0 === r ? n : r);
          },
        },
        {
          key: "readSPS",
          value: function(t) {
            var e,
              n,
              r,
              i,
              s = new Y(t),
              a = 0,
              o = 0,
              u = 0,
              h = 0,
              c = 1,
              l = void 0,
              d = void 0;
            if (
              (s.readUByte(),
              (e = s.readUByte()),
              s.readBits(5),
              s.skipBits(3),
              s.readUByte(),
              s.skipUEG(),
              100 === e || 110 === e || 122 === e || 244 === e || 44 === e || 83 === e || 86 === e || 118 === e || 128 === e)
            ) {
              var f = s.readUEG();
              if ((3 === f && s.skipBits(1), s.skipUEG(), s.skipUEG(), s.skipBits(1), s.readBoolean())) {
                d = 3 !== f ? 8 : 12;
                for (var p = 0; p < d; ++p) s.readBoolean() && at.skipScalingList(s, p < 6 ? 16 : 64);
              }
            }
            s.skipUEG();
            var v = s.readUEG();
            if (0 === v) s.readUEG();
            else if (1 === v) {
              s.skipBits(1), s.skipEG(), s.skipEG(), (l = s.readUEG());
              for (var y = 0; y < l; ++y) s.skipEG();
            }
            if (
              (s.skipUEG(),
              s.skipBits(1),
              (n = s.readUEG()),
              (r = s.readUEG()),
              0 === (i = s.readBits(1)) && s.skipBits(1),
              s.skipBits(1),
              s.readBoolean() && ((a = s.readUEG()), (o = s.readUEG()), (u = s.readUEG()), (h = s.readUEG())),
              s.readBoolean())
            ) {
              if (s.readBoolean()) {
                var g = void 0;
                switch (s.readUByte()) {
                  case 1:
                    g = [1, 1];
                    break;
                  case 2:
                    g = [12, 11];
                    break;
                  case 3:
                    g = [10, 11];
                    break;
                  case 4:
                    g = [16, 11];
                    break;
                  case 5:
                    g = [40, 33];
                    break;
                  case 6:
                    g = [24, 11];
                    break;
                  case 7:
                    g = [20, 11];
                    break;
                  case 8:
                    g = [32, 11];
                    break;
                  case 9:
                    g = [80, 33];
                    break;
                  case 10:
                    g = [18, 11];
                    break;
                  case 11:
                    g = [15, 11];
                    break;
                  case 12:
                    g = [64, 33];
                    break;
                  case 13:
                    g = [160, 99];
                    break;
                  case 14:
                    g = [4, 3];
                    break;
                  case 15:
                    g = [3, 2];
                    break;
                  case 16:
                    g = [2, 1];
                    break;
                  case 255:
                    g = [(s.readUByte() << 8) | s.readUByte(), (s.readUByte() << 8) | s.readUByte()];
                }
                g && (c = g[0] / g[1]);
              }
              if ((s.readBoolean() && s.skipBits(1), s.readBoolean() && (s.skipBits(4), s.readBoolean() && s.skipBits(24)), s.readBoolean() && (s.skipUEG(), s.skipUEG()), s.readBoolean())) {
                var m = s.readUInt(),
                  b = s.readUInt(),
                  S = s.readBoolean(),
                  k = b / (2 * m);
                console.log("h264: timescale: " + b + "; unitsInTick: " + m + "; fixedFramerate: " + S + "; avgFrameDuration: " + k);
              }
            }
            return { width: Math.ceil((16 * (n + 1) - 2 * a - 2 * o) * c), height: (2 - i) * (r + 1) * 16 - (i ? 2 : 4) * (u + h) };
          },
        },
        {
          key: "readSliceType",
          value: function(t) {
            return t.readUByte(), t.readUEG(), t.readUEG();
          },
        },
      ],
    ),
    at);
  function at(t) {
    p(this, at), (this.remuxer = t), (this.track = t.mp4track), (this.seenIDR = !1), (this.headerSPS = null), (this.headerPPS = null);
  }
  var ot = b("remuxer:h264"),
    ut =
      (s(ht, z),
      n(ht, [
        {
          key: "_scaled",
          value: function(t) {
            return t >>> this.scaleFactor;
          },
        },
        {
          key: "_unscaled",
          value: function(t) {
            return t << this.scaleFactor;
          },
        },
        {
          key: "setSPS",
          value: function(t) {
            this.h264.setHeaderSPS(t);
          },
        },
        {
          key: "setPPS",
          value: function(t) {
            this.h264.setHeaderPPS(t);
          },
        },
        {
          key: "remuxSEI",
          value: function(e) {
            try {
              var t = new rt(e.getRBSPData());
              this.sendOOBData({ codec: "h264", type: "sei", subtype: t.payloadType, payload: t.payload, dts: e.dts, pts: e.pts, scaledPTS: e.pts / this.timescale, foundIDR: this.foundIDR });
            } catch (t) {
              console.log("Bad SEI: ", e, t);
            }
          },
        },
        {
          key: "remuxNalu",
          value: function(t) {
            if (this.lastGopDTS < t.dts) {
              this.gop.sort(z.dtsSortFunc);
              var e = !0,
                n = !1,
                r = void 0;
              try {
                for (var i, s = this.gop[Symbol.iterator](); !(e = (i = s.next()).done); e = !0) {
                  var a = i.value;
                  a.ntype == et.IDR && (this.foundIDR = !0), o(ht.prototype.__proto__ || Object.getPrototypeOf(ht.prototype), "remux", this).call(this, a) && (this.mp4track.len += a.getSize());
                }
              } catch (t) {
                (n = !0), (r = t);
              } finally {
                try {
                  !e && s.return && s.return();
                } finally {
                  if (n) throw r;
                }
              }
              (this.gop = []), (this.lastGopDTS = t.dts);
            }
            this.h264.parseNAL(t) && this.gop.push(t);
          },
        },
        {
          key: "remux",
          value: function(t) {
            t.type() === et.SEI ? this.remuxSEI(t) : this.remuxNalu(t);
          },
        },
        {
          key: "getPayload",
          value: function() {
            if (!this.getPayloadBase()) return null;
            for (var t = new Uint8Array(this.mp4track.len), e = 0, n = this.mp4track.samples, r = void 0, i = void 0, s = void 0, a = void 0; this.samples.length; ) {
              var o = this.samples.shift();
              if (null === o) {
                this.nextDts = void 0;
                break;
              }
              var u = o.unit;
              (s = o.pts + this.offset), (a = o.dts + this.offset);
              var h = void 0 !== i ? a - i : a - this.nextDts;
              if ((h < 0 && ((this.offset -= h), (s = o.pts + this.offset), (a = o.dts + this.offset), (h = 0), ot.log("new offset=" + this.offset + " dts=" + a + " pts=" + s)), void 0 !== i)) {
                var c = this.scaled(a - i);
                if (c < 0) {
                  ot.log("invalid AVC sample duration at PTS/DTS: " + s + "/" + a + "|lastDTS: " + i + ":" + c), (this.mp4track.len -= u.getSize());
                  continue;
                }
                this.lastDurations.push(c), 100 < this.lastDurations.length && this.lastDurations.shift(), (r.duration = c);
              } else {
                if (this.nextDts)
                  if (Math.abs(Math.round(z.toMS(h))) < 600) h && ((a = this.nextDts), (s = Math.max(s - h, a)));
                  else if (h < 0) {
                    ot.log("skip frame from the past at DTS=" + a + " with expected DTS=" + this.nextDts), (this.mp4track.len -= u.getSize());
                    continue;
                  }
                this.firstDTS = Math.max(0, a);
              }
              var l = (r = { size: u.getSize(), duration: 0, cts: this.scaled(s - a), flags: { isLeading: 0, isDependedOn: 0, hasRedundancy: 0, degradPrio: 0 } }).flags;
              !0 === o.unit.isKeyframe() ? ((l.dependsOn = 2), (l.isNonSync = 0)) : ((l.dependsOn = 1), (l.isNonSync = 1)), t.set(u.getData(), e), (e += u.getSize()), n.push(r), (i = a);
            }
            if (!n.length) return null;
            var d =
              (this.lastDurations.reduce(function(t, e) {
                return (0 | t) + (0 | e);
              }, 0) /
                (this.lastDurations.length || 1)) |
              0;
            if (
              (2 <= n.length ? ((this.lastSampleDuration = d), (r.duration = d)) : (r.duration = this.lastSampleDuration),
              n.length && (!this.nextDts || -1 < navigator.userAgent.toLowerCase().indexOf("chrome")))
            ) {
              var f = n[0].flags;
              (f.dependsOn = 2), (f.isNonSync = 0);
            }
            return (this.nextDts = a + this.unscaled(this.lastSampleDuration)), new Uint8Array(t.buffer, 0, this.mp4track.len);
          },
        },
      ]),
      ht);
  function ht(t) {
    var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 1,
      n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
    p(this, ht);
    var r = a(this, (ht.__proto__ || Object.getPrototypeOf(ht)).call(this, t, e));
    if (
      ((r.nextDts = void 0),
      (r.readyToDecode = !1),
      (r.initialized = !1),
      (r.firstDTS = 0),
      (r.firstPTS = 0),
      (r.lastDTS = void 0),
      (r.lastSampleDuration = 0),
      (r.lastDurations = []),
      (r.tsAlign = Math.round(r.timescale / 60)),
      (r.mp4track = { id: z.getTrackID(), type: "video", len: 0, fragmented: !0, sps: "", pps: "", width: 0, height: 0, timescale: t, duration: t, samples: [] }),
      (r.samples = []),
      (r.lastGopDTS = -99999999999999),
      (r.gop = []),
      (r.foundIDR = !1),
      (r.offset = 0),
      (r.h264 = new st(r)),
      n.sps)
    ) {
      var i = new Uint8Array(n.sps);
      7 == (31 & i[0]) ? r.setSPS(i) : console.log("bad SPS in SDP");
    }
    if (n.pps) {
      var s = new Uint8Array(n.pps);
      8 == (31 & s[0]) ? r.setPPS(s) : console.log("bad PPS in SDP");
    }
    return r.mp4track.pps && r.mp4track.sps && (r.readyToDecode = !0), r;
  }
  n(ct, null, [
    {
      key: "VIDEO",
      get: function() {
        return 1;
      },
    },
    {
      key: "AUDIO",
      get: function() {
        return 2;
      },
    },
    {
      key: "map",
      get: function() {
        var t;
        return i((t = {}), ct.VIDEO, "video"), i(t, ct.AUDIO, "audio"), t;
      },
    },
  ]);
  function ct() {
    p(this, ct);
  }
  var lt =
    (n(dt, null, [
      {
        key: "H264",
        get: function() {
          return 1;
        },
      },
      {
        key: "AAC",
        get: function() {
          return 2;
        },
      },
      {
        key: "map",
        get: function() {
          var t;
          return i((t = {}), dt.H264, "video"), i(t, dt.AAC, "audio"), t;
        },
      },
      {
        key: "string_map",
        get: function() {
          return { H264: dt.H264, AAC: dt.AAC, "MP4A-LATM": dt.AAC, "MPEG4-GENERIC": dt.AAC };
        },
      },
    ]),
    dt);
  function dt() {
    p(this, dt);
  }
  var ft =
    (n(pt, null, [
      {
        key: "parseAudioSpecificConfig",
        value: function(t) {
          var e = void 0,
            n = (e = t.byteLength ? new X(t) : t).bitpos + 8 * (e.src.byteOffset + e.bytepos),
            r = e.readBits(5);
          this.codec = "mp4a.40." + r;
          var i = e.readBits(4);
          15 == i && e.skipBits(24);
          var s = e.readBits(4);
          return {
            config: (function(t, e, n) {
              for (
                var r = 1 < arguments.length && void 0 !== e ? e : 0,
                  i = 2 < arguments.length && void 0 !== n ? n : 8 * t.byteLength,
                  s = Math.ceil((i - r) / 8),
                  a = new Uint8Array(s),
                  o = r >>> 3,
                  u = (i >>> 3) - 1,
                  h = 7 & r,
                  c = 8 - h,
                  l = (8 - i) & 7,
                  d = 0;
                d < s;
                ++d
              ) {
                var f = 0;
                d < u && ((f = t[o + d + 1] >> c), d == u - 1 && l < 8 && ((f >>= l), (f <<= l))), (a[d] = (t[o + d] << h) | f);
              }
              return a;
            })(new Uint8Array(e.src.buffer), n, n + 16),
            codec: "mp4a.40." + r,
            samplerate: pt.SampleRates[i],
            channels: s,
          };
        },
      },
      {
        key: "parseStreamMuxConfig",
        value: function(t) {
          var e = new X(t);
          if (!e.readBits(1)) return e.skipBits(14), pt.parseAudioSpecificConfig(e);
        },
      },
      {
        key: "SampleRates",
        get: function() {
          return [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
        },
      },
    ]),
    pt);
  function pt() {
    p(this, pt);
  }
  var vt =
    (n(yt, [
      {
        key: "getData",
        value: function() {
          return this.data;
        },
      },
      {
        key: "getSize",
        value: function() {
          return this.data.byteLength;
        },
      },
    ]),
    yt);
  function yt(t, e, n) {
    p(this, yt), (this.dts = e), (this.pts = n || this.dts), (this.data = t);
  }
  var gt = b("remuxer"),
    mt =
      (n(bt, null, [
        {
          key: "TrackConverters",
          get: function() {
            var t;
            return i((t = {}), lt.H264, ut), i(t, lt.AAC, W), t;
          },
        },
        {
          key: "TrackScaleFactor",
          get: function() {
            var t;
            return i((t = {}), lt.H264, 1), i(t, lt.AAC, 0), t;
          },
        },
        {
          key: "TrackTimescale",
          get: function() {
            var t;
            return i((t = {}), lt.H264, 9e4), i(t, lt.AAC, 0), t;
          },
        },
      ]),
      n(bt, [
        {
          key: "pullOOBData",
          value: function(t) {
            for (var e = []; this._oobBuffer.size() && !(t < this._oobBuffer.get(this._oobBuffer.size() - 1).scaledPTS); ) e.push(this._oobBuffer.deq());
            return e;
          },
        },
        {
          key: "_initMSEHandlers",
          value: function() {
            this.mseEventSource.on("error", this.errorListener), this.mseEventSource.on("sourceclosed", this.closeListener);
          },
        },
        {
          key: "_reset",
          value: function() {
            (this.tracks = {}),
              (this._status = 0),
              (this.initSegments = {}),
              (this.codecs = []),
              (this.streams = {}),
              (this.enabled = !1),
              (this._silentDts = 0),
              (this._enableSilentAAC = !1),
              gt.debug("reset remuxer");
          },
        },
        {
          key: "destroy",
          value: function() {
            gt.debug("destroy remuxer"), (this._status = 3), this.mseEventSource.destroy(), this.mse.destroy(), (this.mse = null), this.detachClient(), this.eventSource.destroy();
          },
        },
        {
          key: "_onTracks",
          value: function(t) {
            gt.debug("tracks: ", t.detail);
            var e = !0,
              n = !1,
              r = void 0;
            try {
              for (var i, s = t.detail[Symbol.iterator](); !(e = (i = s.next()).done); e = !0) {
                var a = i.value;
                (this.tracks[a.type] = new bt.TrackConverters[a.type](bt.TrackTimescale[a.type], bt.TrackScaleFactor[a.type], a.params)),
                  a.offset && (this.tracks[a.type].timeOffset = a.offset),
                  a.duration
                    ? ((this.tracks[a.type].mp4track.duration = a.duration * (this.tracks[a.type].timescale || bt.TrackTimescale[a.type])), (this.tracks[a.type].duration = a.duration))
                    : (this.tracks[a.type].duration = 0),
                  a.type === lt.H264 && this.tracks[a.type].setOOBDataHandler(this._oobHandler);
              }
            } catch (t) {
              (n = !0), (r = t);
            } finally {
              try {
                !e && s.return && s.return();
              } finally {
                if (n) throw r;
              }
            }
            this._setupSilentAAC(), this.mse.setLive(!this.client.seekable);
          },
        },
        {
          key: "setTimeOffset",
          value: function(t, e) {
            this.tracks[e.type] && (this.tracks[e.type].timeOffset = t);
          },
        },
        {
          key: "_setupSilentAAC",
          value: function() {
            if (!this.tracks[lt.AAC]) {
              var t = { config: ft.parseAudioSpecificConfig(new Uint8Array([18, 16])) };
              gt.debug("adding silent AAC track: ", t), (this.tracks[lt.AAC] = new W(0, 0, t)), (this._enableSilentAAC = !0);
            }
          },
        },
        {
          key: "_init",
          value: function() {
            var t = this;
            return (
              gt.debug("initializing remuxer"),
              this.mse.attachMediaSource().then(function() {
                return t._initAllCodecs();
              })
            );
          },
        },
        {
          key: "_initAllCodecs",
          value: function() {
            var t = this;
            gt.debug("initialize all codecs");
            var e = [];
            this.codecs = [];
            var n = [];
            for (var r in this.tracks) {
              var i = this.tracks[r];
              if (!q.isSupported([i.mp4track.codec])) throw new Error(i.mp4track.type + " codec " + i.mp4track.codec + " is not supported");
              e.push(i.mp4track), this.codecs.push(i.mp4track.codec), i.init(1 / 0, 1 / 0);
            }
            for (var s in this.tracks) {
              var a = this.tracks[s];
              (this.initSegments[s] = I.initSegment([a.mp4track], a.duration * a.timescale, a.timescale)), n.push(this._initCodec(s, a.mp4track.codec));
            }
            return Promise.all(n).then(function() {
              (t.enabled = !0), (t._status = 2);
            });
          },
        },
        {
          key: "_initCodec",
          value: function(t, e) {
            var n = this;
            if (q.isSupported(this.codecs))
              return this.mse.setCodec(t, lt.map[t] + '/mp4; codecs="' + e + '"').then(function() {
                n.mse.feed(t, n.initSegments[t]);
              });
            throw new Error("Codecs are not supported");
          },
        },
        {
          key: "_mseClose",
          value: function() {
            this.client.stop(), this.eventSource.dispatchEvent("stopped");
          },
        },
        {
          key: "flush",
          value: function() {
            switch (this._status) {
              case 0:
                if ((this._onSamples(), Object.keys(this.tracks).length)) {
                  for (var t in this.tracks) if (!this.tracks[t].readyToDecode || !this.tracks[t].samples.length) return;
                  (this._status = 1), this._init();
                }
                return;
              case 1:
                return;
              case 2:
                for (var e in (this._onSamples(), this.tracks)) {
                  var n = this.tracks[e],
                    r = n.getPayload();
                  r && r.byteLength && (this.mse.feed(e, [I.moof(n.seq, n.scaled(n.firstDTS), n.mp4track), I.mdat(r)]), n.flush());
                }
                return;
              case 3:
                return;
            }
          },
        },
        {
          key: "_remuxSilentAAC",
          value: function(t) {
            if (this.tracks[lt.AAC] && this._enableSilentAAC)
              for (var e = this.tracks[lt.AAC].expectedSampleDuration; this._silentDts < t + 2 * e; ) {
                var n = new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                this.tracks[lt.AAC].remux(new vt(n, this._silentDts)), (this._silentDts += e);
              }
          },
        },
        {
          key: "_onSamples",
          value: function(t) {
            for (var e in this.client.sampleQueues)
              for (var n = this.client.sampleQueues[e]; n.length; ) {
                var r = n.shift(),
                  i = !0,
                  s = !1,
                  a = void 0;
                try {
                  for (var o, u = r[Symbol.iterator](); !(i = (o = u.next()).done); i = !0) {
                    var h = o.value;
                    this.tracks[e].remux(h), h.isSEI() || this._remuxSilentAAC(h.dts);
                  }
                } catch (t) {
                  (s = !0), (a = t);
                } finally {
                  try {
                    !i && u.return && u.return();
                  } finally {
                    if (s) throw a;
                  }
                }
              }
          },
        },
        {
          key: "attachClient",
          value: function(t) {
            this.detachClient(),
              (this.client = t),
              (this.clientEventSource = new O(this.client.eventSource)),
              this.clientEventSource.on("tracks", this._onTracks.bind(this)),
              this.clientEventSource.on("flush", this.flush.bind(this)),
              this.clientEventSource.on("reconnected", this._reset.bind(this));
          },
        },
        {
          key: "detachClient",
          value: function() {
            this.client && (this.clientEventSource.destroy(), (this.client = null));
          },
        },
      ]),
      bt);
  function bt(t) {
    var e = this;
    p(this, bt),
      (this.mse = new q([t])),
      (this.eventSource = new P()),
      (this.mseEventSource = new O(this.mse.eventSource)),
      this._reset(),
      (this.errorListener = this._mseClose.bind(this)),
      (this.closeListener = this._mseClose.bind(this)),
      this._initMSEHandlers(),
      (this._oobBuffer = new C(1e3)),
      (this._oobHandler = function(t) {
        e._oobBuffer.size() == e._oobBuffer.capacity() && e._oobBuffer.deq(), e._oobBuffer.enq(t);
      });
  }
  var St =
    (n(kt, [
      {
        key: "activate",
        value: function() {
          return Promise.resolve(null);
        },
      },
      { key: "finishTransition", value: function() {} },
      { key: "failHandler", value: function() {} },
      {
        key: "deactivate",
        value: function() {
          return Promise.resolve(null);
        },
      },
    ]),
    kt);
  function kt(t, e) {
    p(this, kt), (this.stateMachine = e), (this.transitions = new Set()), (this.name = t);
  }
  var xt =
    (n(Tt, [
      {
        key: "addState",
        value: function(t, e) {
          var n = e.activate,
            r = e.finishTransition,
            i = e.deactivate,
            s = new St(t, this);
          return n && (s.activate = n), r && (s.finishTransition = r), i && (s.deactivate = i), this.states.set(t, s), this;
        },
      },
      {
        key: "addTransition",
        value: function(t, e) {
          if (!this.states.has(t)) throw ReferenceError("No such state: " + t + " while connecting to " + e);
          if (!this.states.has(e)) throw ReferenceError("No such state: " + e + " while connecting from " + t);
          return this.states.get(t).transitions.add(e), this;
        },
      },
      {
        key: "_promisify",
        value: function(t) {
          var e = void 0;
          try {
            (e = t).then || (e = Promise.resolve(e));
          } catch (t) {
            e = Promise.reject(t);
          }
          return e;
        },
      },
      {
        key: "transitionTo",
        value: function(t) {
          var e = this;
          if (null == this.currentState) {
            var n = this.states.get(t);
            return this._promisify(n.activate.call(this))
              .then(function(t) {
                return (e.currentState = n), t;
              })
              .then(n.finishTransition.bind(this))
              .catch(function(t) {
                throw (n.failHandler(), t);
              });
          }
          if (this.currentState.name == t) return Promise.resolve();
          if (this.currentState.transitions.has(t)) {
            var r = this.states.get(t);
            return this._promisify(r.deactivate.call(this))
              .then(r.activate.bind(this))
              .then(function(t) {
                return (e.currentState = r), t;
              })
              .then(r.finishTransition.bind(this))
              .catch(function(t) {
                throw (r.failHandler(), t);
              });
          }
          return Promise.reject("No such transition: " + this.currentState.name + " to " + t);
        },
      },
    ]),
    Tt);
  function Tt() {
    p(this, Tt), (this.storage = {}), (this.currentState = null), (this.states = new Map());
  }
  var _t = b("parser:sdp"),
    wt =
      (n(
        Et,
        [
          {
            key: "parse",
            value: function(l) {
              var d = this;
              return (
                _t.debug(l),
                new Promise(function(t, e) {
                  var n = l,
                    r = !0,
                    i = d.sessionBlock,
                    s = !0,
                    a = !1,
                    o = void 0;
                  try {
                    for (var u, h = n.split("\n")[Symbol.iterator](); !(s = (u = h.next()).done); s = !0) {
                      var c = u.value;
                      if (0 !== (c = c.replace(/\r/, "")).length) {
                        switch (c.charAt(0)) {
                          case "v":
                            if (-1 !== d.version) return _t.log("Version present multiple times in SDP"), e(), !1;
                            r = r && d._parseVersion(c);
                            break;
                          case "o":
                            if (null !== d.origin) return _t.log("Origin present multiple times in SDP"), e(), !1;
                            r = r && d._parseOrigin(c);
                            break;
                          case "s":
                            if (null !== d.sessionName) return _t.log("Session Name present multiple times in SDP"), e(), !1;
                            r = r && d._parseSessionName(c);
                            break;
                          case "t":
                            if (null !== d.timing) return _t.log("Timing present multiple times in SDP"), e(), !1;
                            r = r && d._parseTiming(c);
                            break;
                          case "m":
                            null !== i && d.sessionBlock !== i && (d.media[i.type] = i), (i = { rtpmap: {} }), d._parseMediaDescription(c, i);
                            break;
                          case "a":
                            Et._parseAttribute(c, i);
                            break;
                          default:
                            _t.log("Ignored unknown SDP directive: " + c);
                        }
                        if (!r) return void e();
                      }
                    }
                  } catch (t) {
                    (a = !0), (o = t);
                  } finally {
                    try {
                      !s && h.return && h.return();
                    } finally {
                      if (a) throw o;
                    }
                  }
                  (d.media[i.type] = i), r ? t() : e();
                })
              );
            },
          },
          {
            key: "_parseVersion",
            value: function(t) {
              var e = t.match(/^v=([0-9]+)$/);
              return e && e.length ? ((this.version = e[1]), 0 == this.version || (_t.log("Unsupported SDP version:" + this.version), !1)) : (_t.log("'v=' (Version) formatted incorrectly: " + t), !1);
            },
          },
          {
            key: "_parseOrigin",
            value: function(t) {
              var e = t.match(/^o=([^ ]+) (-?[0-9]+) (-?[0-9]+) (IN) (IP4|IP6) ([^ ]+)$/);
              return (
                e && e.length
                  ? ((this.origin = {}),
                    (this.origin.username = e[1]),
                    (this.origin.sessionid = e[2]),
                    (this.origin.sessionversion = e[3]),
                    (this.origin.nettype = e[4]),
                    (this.origin.addresstype = e[5]),
                    (this.origin.unicastaddress = e[6]))
                  : (_t.log("'o=' (Origin) formatted incorrectly: " + t), (this.origin = {})),
                !0
              );
            },
          },
          {
            key: "_parseSessionName",
            value: function(t) {
              var e = t.match(/^s=([^\r\n]+)$/);
              return e && e.length ? ((this.sessionName = e[1]), !0) : (_t.log("'s=' (Session Name) formatted incorrectly: " + t), !1);
            },
          },
          {
            key: "_parseTiming",
            value: function(t) {
              var e = t.match(/^t=([0-9]+) ([0-9]+)$/);
              return e && e.length ? ((this.timing = {}), (this.timing.start = e[1]), (this.timing.stop = e[2]), !0) : (_t.log("'t=' (Timing) formatted incorrectly: " + t), !1);
            },
          },
          {
            key: "_parseMediaDescription",
            value: function(t, e) {
              var n = t.match(/^m=([^ ]+) ([^ ]+) ([^ ]+)[ ]/);
              if (!n || !n.length) return _t.log("'m=' (Media) formatted incorrectly: " + t), !1;
              (e.type = n[1]),
                (e.port = n[2]),
                (e.proto = n[3]),
                (e.fmt = t
                  .substr(n[0].length)
                  .split(" ")
                  .map(function(t, e, n) {
                    return parseInt(t);
                  }));
              var r = !0,
                i = !1,
                s = void 0;
              try {
                for (var a, o = e.fmt[Symbol.iterator](); !(r = (a = o.next()).done); r = !0) {
                  var u = a.value;
                  this.mediaMap[u] = e;
                }
              } catch (t) {
                (i = !0), (s = t);
              } finally {
                try {
                  !r && o.return && o.return();
                } finally {
                  if (i) throw s;
                }
              }
              return !0;
            },
          },
          {
            key: "getSessionBlock",
            value: function() {
              return this.sessionBlock;
            },
          },
          {
            key: "hasMedia",
            value: function(t) {
              return null != this.media[t];
            },
          },
          {
            key: "getMediaBlock",
            value: function(t) {
              return this.media[t];
            },
          },
          {
            key: "getMediaBlockByPayloadType",
            value: function(t) {
              return this.mediaMap[t] || null;
            },
          },
          {
            key: "getMediaBlockList",
            value: function() {
              var t = [];
              for (var e in this.media) t.push(e);
              return t;
            },
          },
        ],
        [
          {
            key: "_parseAttribute",
            value: function(t, e) {
              if (null === e) return !0;
              var n,
                r = t.indexOf(":");
              switch (t.substr(0, -1 === r ? 2147483647 : r)) {
                case "a=recvonly":
                case "a=sendrecv":
                case "a=sendonly":
                case "a=inactive":
                  e.mode = t.substr("a=".length);
                  break;
                case "a=range":
                  (n = t.match(/^a=range:\s*([a-zA-Z-]+)=([0-9.]+|now)\s*-\s*([0-9.]*)$/)), (e.range = [Number("now" == n[2] ? -1 : n[2]), Number(n[3]), n[1]]);
                  break;
                case "a=control":
                  e.control = t.substr("a=control:".length);
                  break;
                case "a=rtpmap":
                  if (null === (n = t.match(/^a=rtpmap:(\d+) (.*)$/))) return _t.log("Could not parse 'rtpmap' of 'a='"), !1;
                  var i = parseInt(n[1]);
                  e.rtpmap[i] = {};
                  var s = n[2].split("/");
                  (e.rtpmap[i].name = s[0].toUpperCase()), (e.rtpmap[i].clock = s[1]), void 0 !== s[2] && (e.rtpmap[i].encparams = s[2]);
                  var a = lt.string_map[s[0].toUpperCase()];
                  a && (e.ptype = a);
                  break;
                case "a=fmtp":
                  if (0 === (n = t.match(/^a=fmtp:(\d+) (.*)$/)).length) return _t.log("Could not parse 'fmtp'  of 'a='"), !1;
                  var o = !0,
                    u = !(e.fmtp = {}),
                    h = void 0;
                  try {
                    for (var c, l = n[2].split(";")[Symbol.iterator](); !(o = (c = l.next()).done); o = !0) {
                      var d = c.value,
                        f = d.indexOf("=");
                      e.fmtp[
                        d
                          .substr(0, f)
                          .toLowerCase()
                          .trim()
                      ] = d.substr(f + 1).trim();
                    }
                  } catch (t) {
                    (u = !0), (h = t);
                  } finally {
                    try {
                      !o && l.return && l.return();
                    } finally {
                      if (u) throw h;
                    }
                  }
              }
              return !0;
            },
          },
        ],
      ),
      Et);
  function Et() {
    p(this, Et), (this.version = -1), (this.origin = null), (this.sessionName = null), (this.timing = null), (this.sessionBlock = {}), (this.media = {}), (this.tracks = {}), (this.mediaMap = {});
  }
  function At(t, e) {
    var n = (65535 & t) + (65535 & e);
    return (((t >> 16) + (e >> 16) + (n >> 16)) << 16) | (65535 & n);
  }
  function Dt(t, e, n, r, i, s) {
    return At(
      (function(t, e) {
        return (t << e) | (t >>> (32 - e));
      })(At(At(e, t), At(r, s)), i),
      n,
    );
  }
  function Pt(t, e, n, r, i, s, a) {
    return Dt((e & n) | (~e & r), t, e, i, s, a);
  }
  function Rt(t, e, n, r, i, s, a) {
    return Dt((e & r) | (n & ~r), t, e, i, s, a);
  }
  function Ot(t, e, n, r, i, s, a) {
    return Dt(e ^ n ^ r, t, e, i, s, a);
  }
  function Bt(t, e, n, r, i, s, a) {
    return Dt(n ^ (e | ~r), t, e, i, s, a);
  }
  function Ct(t, e) {
    var n, r, i, s, a;
    (t[e >> 5] |= 128 << e % 32), (t[14 + (((e + 64) >>> 9) << 4)] = e);
    var o = 1732584193,
      u = -271733879,
      h = -1732584194,
      c = 271733878;
    for (n = 0; n < t.length; n += 16)
      (u = Bt(
        (u = Bt(
          (u = Bt(
            (u = Bt(
              (u = Ot(
                (u = Ot(
                  (u = Ot(
                    (u = Ot(
                      (u = Rt(
                        (u = Rt(
                          (u = Rt(
                            (u = Rt(
                              (u = Pt(
                                (u = Pt(
                                  (u = Pt(
                                    (u = Pt(
                                      (i = u),
                                      (h = Pt((s = h), (c = Pt((a = c), (o = Pt((r = o), u, h, c, t[n], 7, -680876936)), u, h, t[n + 1], 12, -389564586)), o, u, t[n + 2], 17, 606105819)),
                                      c,
                                      o,
                                      t[n + 3],
                                      22,
                                      -1044525330,
                                    )),
                                    (h = Pt(h, (c = Pt(c, (o = Pt(o, u, h, c, t[n + 4], 7, -176418897)), u, h, t[n + 5], 12, 1200080426)), o, u, t[n + 6], 17, -1473231341)),
                                    c,
                                    o,
                                    t[n + 7],
                                    22,
                                    -45705983,
                                  )),
                                  (h = Pt(h, (c = Pt(c, (o = Pt(o, u, h, c, t[n + 8], 7, 1770035416)), u, h, t[n + 9], 12, -1958414417)), o, u, t[n + 10], 17, -42063)),
                                  c,
                                  o,
                                  t[n + 11],
                                  22,
                                  -1990404162,
                                )),
                                (h = Pt(h, (c = Pt(c, (o = Pt(o, u, h, c, t[n + 12], 7, 1804603682)), u, h, t[n + 13], 12, -40341101)), o, u, t[n + 14], 17, -1502002290)),
                                c,
                                o,
                                t[n + 15],
                                22,
                                1236535329,
                              )),
                              (h = Rt(h, (c = Rt(c, (o = Rt(o, u, h, c, t[n + 1], 5, -165796510)), u, h, t[n + 6], 9, -1069501632)), o, u, t[n + 11], 14, 643717713)),
                              c,
                              o,
                              t[n],
                              20,
                              -373897302,
                            )),
                            (h = Rt(h, (c = Rt(c, (o = Rt(o, u, h, c, t[n + 5], 5, -701558691)), u, h, t[n + 10], 9, 38016083)), o, u, t[n + 15], 14, -660478335)),
                            c,
                            o,
                            t[n + 4],
                            20,
                            -405537848,
                          )),
                          (h = Rt(h, (c = Rt(c, (o = Rt(o, u, h, c, t[n + 9], 5, 568446438)), u, h, t[n + 14], 9, -1019803690)), o, u, t[n + 3], 14, -187363961)),
                          c,
                          o,
                          t[n + 8],
                          20,
                          1163531501,
                        )),
                        (h = Rt(h, (c = Rt(c, (o = Rt(o, u, h, c, t[n + 13], 5, -1444681467)), u, h, t[n + 2], 9, -51403784)), o, u, t[n + 7], 14, 1735328473)),
                        c,
                        o,
                        t[n + 12],
                        20,
                        -1926607734,
                      )),
                      (h = Ot(h, (c = Ot(c, (o = Ot(o, u, h, c, t[n + 5], 4, -378558)), u, h, t[n + 8], 11, -2022574463)), o, u, t[n + 11], 16, 1839030562)),
                      c,
                      o,
                      t[n + 14],
                      23,
                      -35309556,
                    )),
                    (h = Ot(h, (c = Ot(c, (o = Ot(o, u, h, c, t[n + 1], 4, -1530992060)), u, h, t[n + 4], 11, 1272893353)), o, u, t[n + 7], 16, -155497632)),
                    c,
                    o,
                    t[n + 10],
                    23,
                    -1094730640,
                  )),
                  (h = Ot(h, (c = Ot(c, (o = Ot(o, u, h, c, t[n + 13], 4, 681279174)), u, h, t[n], 11, -358537222)), o, u, t[n + 3], 16, -722521979)),
                  c,
                  o,
                  t[n + 6],
                  23,
                  76029189,
                )),
                (h = Ot(h, (c = Ot(c, (o = Ot(o, u, h, c, t[n + 9], 4, -640364487)), u, h, t[n + 12], 11, -421815835)), o, u, t[n + 15], 16, 530742520)),
                c,
                o,
                t[n + 2],
                23,
                -995338651,
              )),
              (h = Bt(h, (c = Bt(c, (o = Bt(o, u, h, c, t[n], 6, -198630844)), u, h, t[n + 7], 10, 1126891415)), o, u, t[n + 14], 15, -1416354905)),
              c,
              o,
              t[n + 5],
              21,
              -57434055,
            )),
            (h = Bt(h, (c = Bt(c, (o = Bt(o, u, h, c, t[n + 12], 6, 1700485571)), u, h, t[n + 3], 10, -1894986606)), o, u, t[n + 10], 15, -1051523)),
            c,
            o,
            t[n + 1],
            21,
            -2054922799,
          )),
          (h = Bt(h, (c = Bt(c, (o = Bt(o, u, h, c, t[n + 8], 6, 1873313359)), u, h, t[n + 15], 10, -30611744)), o, u, t[n + 6], 15, -1560198380)),
          c,
          o,
          t[n + 13],
          21,
          1309151649,
        )),
        (h = Bt(h, (c = Bt(c, (o = Bt(o, u, h, c, t[n + 4], 6, -145523070)), u, h, t[n + 11], 10, -1120210379)), o, u, t[n + 2], 15, 718787259)),
        c,
        o,
        t[n + 9],
        21,
        -343485551,
      )),
        (o = At(o, r)),
        (u = At(u, i)),
        (h = At(h, s)),
        (c = At(c, a));
    return [o, u, h, c];
  }
  function It(t) {
    var e,
      n = "",
      r = 32 * t.length;
    for (e = 0; e < r; e += 8) n += String.fromCharCode((t[e >> 5] >>> e % 32) & 255);
    return n;
  }
  function Nt(t) {
    var e,
      n = [];
    for (n[(t.length >> 2) - 1] = void 0, e = 0; e < n.length; e += 1) n[e] = 0;
    var r = 8 * t.length;
    for (e = 0; e < r; e += 8) n[e >> 5] |= (255 & t.charCodeAt(e / 8)) << e % 32;
    return n;
  }
  function Ut(t) {
    var e,
      n,
      r = "0123456789abcdef",
      i = "";
    for (n = 0; n < t.length; n += 1) (e = t.charCodeAt(n)), (i += r.charAt((e >>> 4) & 15) + r.charAt(15 & e));
    return i;
  }
  function Lt(t) {
    return unescape(encodeURIComponent(t));
  }
  function Mt(t) {
    return (function(t) {
      return It(Ct(Nt(t), 8 * t.length));
    })(Lt(t));
  }
  function Vt(t, e) {
    return (function(t, e) {
      var n,
        r,
        i = Nt(t),
        s = [],
        a = [];
      for (s[15] = a[15] = void 0, 16 < i.length && (i = Ct(i, 8 * t.length)), n = 0; n < 16; n += 1) (s[n] = 909522486 ^ i[n]), (a[n] = 1549556828 ^ i[n]);
      return (r = Ct(s.concat(Nt(e)), 512 + 8 * e.length)), It(Ct(a.concat(r), 640));
    })(Lt(t), Lt(e));
  }
  function qt(t, e, n) {
    return e
      ? n
        ? Vt(e, t)
        : (function(t, e) {
            return Ut(Vt(t, e));
          })(e, t)
      : n
      ? Mt(t)
      : (function(t) {
          return Ut(Mt(t));
        })(t);
  }
  var Ht =
    (n(Ft, [
      {
        key: "getPayload",
        value: function() {
          return this.data;
        },
      },
      {
        key: "getTimestampMS",
        value: function() {
          return this.timestamp;
        },
      },
      {
        key: "toString",
        value: function() {
          return (
            "RTP(version:" +
            this.version +
            ", padding:" +
            this.padding +
            ", has_extension:" +
            this.has_extension +
            ", csrc:" +
            this.csrc +
            ", marker:" +
            this.marker +
            ", pt:" +
            this.pt +
            ", sequence:" +
            this.sequence +
            ", timestamp:" +
            this.timestamp +
            ", ssrc:" +
            this.ssrc +
            ")"
          );
        },
      },
      {
        key: "isVideo",
        value: function() {
          return "video" == this.media.type;
        },
      },
      {
        key: "isAudio",
        value: function() {
          return "audio" == this.media.type;
        },
      },
    ]),
    Ft);
  function Ft(t, e) {
    p(this, Ft);
    var n = new DataView(t.buffer, t.byteOffset, t.byteLength);
    (this.version = n.getUint8(0) >>> 6),
      (this.padding = 32 & n.getUint8(0)),
      (this.has_extension = 16 & n.getUint8(0)),
      (this.csrc = 15 & n.getUint8(0)),
      (this.marker = n.getUint8(1) >>> 7),
      (this.pt = 127 & n.getUint8(1)),
      (this.sequence = n.getUint16(2)),
      (this.timestamp = n.getUint32(4)),
      (this.ssrc = n.getUint32(8)),
      (this.csrcs = []);
    var r = 12;
    0 < this.csrc && (this.csrcs.push(n.getUint32(r)), (r += 4)),
      0 < this.has_extension && ((this.extension = n.getUint16(r)), (this.ehl = 4 * n.getUint16(r + 2)), (r += 4), (this.header_data = t.slice(r, this.ehl)), (r += this.ehl)),
      (this.headerLength = r);
    0 < this.padding && n.getUint8(t.byteLength - 1),
      (this.media = e.getMediaBlockByPayloadType(this.pt)),
      null === this.media ? S.log("Media description for payload type: " + this.pt + " not provided.") : (this.type = this.media.ptype),
      (this.data = t.subarray(r));
  }
  var jt =
    (n(zt, null, [
      {
        key: "RTSP_1_0",
        get: function() {
          return "RTSP/1.0";
        },
      },
    ]),
    n(zt, [
      {
        key: "build",
        value: function(t, e, n, r) {
          var i = 2 < arguments.length && void 0 !== n ? n : {},
            s = 3 < arguments.length && void 0 !== r ? r : null,
            a = t + " " + e + " " + this.version + "\r\n";
          for (var o in i) a += o + ": " + i[o] + "\r\n";
          return s && (a += "Content-Length: " + s.length + "\r\n"), (a += "\r\n"), s && (a += s), a;
        },
      },
      {
        key: "parse",
        value: function(t) {
          var e = t.split("\r\n"),
            n = { headers: {}, body: null, code: 0, statusLine: "" },
            r = e[0].match(new RegExp(this.version + "[ ]+([0-9]{3})[ ]+(.*)")),
            i = k(r, 3);
          i[0], (n.code = i[1]), (n.statusLine = i[2]), (n.code = Number(n.code));
          for (var s = 1; e[s]; ) {
            var a = e[s].split(/:(.+)/),
              o = k(a, 2),
              u = o[0],
              h = o[1];
            (n.headers[u.toLowerCase()] = h.trim()), s++;
          }
          return (n.body = e.slice(s).join("\n\r")), n;
        },
      },
    ]),
    zt);
  function zt(t) {
    p(this, zt), (this.version = t);
  }
  var Kt = new jt(jt.RTSP_1_0),
    Gt =
      (n(
        Wt,
        [
          {
            key: "parseSingleNALUPacket",
            value: function(t, e, n, r) {
              return new et(e.type, e.nri, t.subarray(0), n, r);
            },
          },
          {
            key: "parseAggregationPacket",
            value: function(t, e, n, r) {
              var i = new DataView(t.buffer, t.byteOffset, t.byteLength),
                s = 0;
              et.STAP_B === e.type && (i.getUint16(s), (s += 2));
              for (var a = []; s < i.byteLength; ) {
                var o = i.getUint16(s);
                s += 2;
                var u = Wt.parseNALHeader(i.getInt8(s));
                s++;
                var h = this.parseSingleNALUPacket(t.subarray(s, s + o), u, n, r);
                null !== h && a.push(h), (s += o);
              }
              return a;
            },
          },
          {
            key: "parseFragmentationUnit",
            value: function(t, e, n, r) {
              var i = new DataView(t.buffer, t.byteOffset, t.byteLength),
                s = 0,
                a = i.getUint8(s),
                o = (128 & a) >>> 7,
                u = (64 & a) >>> 6,
                h = 31 & a,
                c = null;
              return (
                s++,
                et.FU_B === e.type && (i.getUint16(s), (s += 2)),
                o && (this.fragmented_nalu = new et(h, e.nri, t.subarray(s), n, r)),
                this.fragmented_nalu && this.fragmented_nalu.ntype === h && (o || this.fragmented_nalu.appendData(t.subarray(s)), u)
                  ? ((c = this.fragmented_nalu), (this.fragmented_nalu = null), c)
                  : null
              );
            },
          },
          {
            key: "onNALUFragment",
            value: function(t, e, n) {
              var r = new DataView(t.buffer, t.byteOffset, t.byteLength),
                i = Wt.parseNALHeader(r.getUint8(0)),
                s = null;
              if (0 < i.type && i.type < 24) s = this.parseSingleNALUPacket(t.subarray(1), i, e, n);
              else {
                if (et.FU_A !== i.type && et.FU_B !== i.type)
                  return et.STAP_A === i.type || et.STAP_B === i.type ? this.parseAggregationPacket(t.subarray(1), i, e, n) : (S.log("Undefined NAL unit, type: " + i.type), null);
                s = this.parseFragmentationUnit(t.subarray(1), i, e, n);
              }
              return s ? [s] : null;
            },
          },
        ],
        [
          {
            key: "parseNALHeader",
            value: function(t) {
              return { nri: 96 & t, type: 31 & t };
            },
          },
        ],
      ),
      Wt);
  function Wt() {
    p(this, Wt), (this.fragmented_nalu = null);
  }
  var Zt =
    (n(Yt, [
      {
        key: "onAACFragment",
        value: function(t) {
          var e = t.getPayload();
          if (!t.media) return null;
          var n = new DataView(e.buffer, e.byteOffset, e.byteLength),
            r = Number(t.media.fmtp.sizelength || 0),
            i = Number(t.media.fmtp.indexlength || 0),
            s = Number(t.media.fmtp.indexdeltalength || 0),
            a = Number(t.media.fmtp.ctsdeltalength || 0),
            o = Number(t.media.fmtp.dtsdeltalength || 0),
            u = Number(t.media.fmtp.randomaccessindication || 0),
            h = Number(t.media.fmtp.streamstateindication || 0),
            c = Number(t.media.fmtp.auxiliarydatasizelength || 0),
            l = r + Math.max(i, s) + a + o + u + h + c,
            d = 0,
            f = 0,
            p = (9e4 * (Math.round(t.getTimestampMS() / 1024) << 10)) / this.config.samplerate;
          if (0 !== l) {
            var v = n.getUint16(0);
            d = 2 + (v >>> 3) + (7 & v ? 1 : 0);
            for (var y = [], g = 0, m = new X(e.subarray(2 + f)), b = 0, S = 0, k = 0; k < v; ) {
              var x = m.readBits(r);
              m.readBits(k ? s : i),
                (k += r + (k ? s : i)),
                a && (m.readBits(1), (b = m.readBits(a)), (k += a)),
                o && (m.readBits(1), (S = m.readBits(o)), (k += a)),
                u && (m.skipBits(1), (k += 1)),
                h && (m.skipBits(h), (k += h)),
                y.push(new vt(e.subarray(d + g, d + g + x), p + S, p + b)),
                (g += x);
            }
            return y;
          }
          for (var T = e.subarray(d); 255 == T[f]; ) ++f;
          return ++f, [new vt(e.subarray(d + f), p)];
        },
      },
    ]),
    Yt);
  function Yt() {
    p(this, Yt), (this.config = null);
  }
  var Qt =
    (n($t, [
      {
        key: "parse",
        value: function(t) {
          return "video" == t.media.type ? this.h264parser.parse(t) : "audio" == t.media.type ? this.aacparser.parse(t) : null;
        },
      },
    ]),
    $t);
  function $t() {
    p(this, $t), (this.h264parser = new ne()), (this.aacparser = new ie());
  }
  var Jt =
    (n(Xt, [
      {
        key: "getDtsWithPts",
        value: function(t) {
          if (t <= this.last_pts) return this.last_dts;
          for (var e = 0; e < this.queue.length && !(t < this.queue[e]); e++);
          this.queue.splice(e, 0, t);
          var n = this.queue.shift();
          return n <= this.last_dts && (n = this.last_dts + 1), t < n && (t = n), (this.last_pts = t), (this.last_dts = n);
        },
      },
    ]),
    Xt);
  function Xt() {
    p(this, Xt), (this.queue = [0, 0, 0, 0]), (this.last_pts = void 0), (this.last_dts = void 0);
  }
  var te =
    (n(ee, [
      {
        key: "checkOverflow",
        value: function(t) {
          void 0 === this.last_timestamp && (this.last_timestamp = t),
            2147483647 < Math.abs(t - this.last_timestamp) &&
              ((this.offset += 4294967295), console.log("check overflow, last_timestamp: ", this.last_timestamp, " timestamp: ", t, " offset: ", this.offset)),
            (this.last_timestamp = t);
        },
      },
      {
        key: "adjust",
        value: function(t) {
          return (t += this.offset), void 0 === this.first_timestamp && (this.first_timestamp = t), t - this.first_timestamp;
        },
      },
    ]),
    ee);
  function ee() {
    p(this, ee), (this.offset = 0), (this.last_timestamp = void 0), (this.first_timestamp = void 0);
  }
  var ne =
    (n(re, [
      {
        key: "parse",
        value: function(t) {
          var e = this.naluasm.onNALUFragment(t.getPayload(), 0, 0);
          if (!e) return null;
          var n = !0,
            r = !0,
            i = !1,
            s = void 0;
          try {
            for (var a, o = e[Symbol.iterator](); !(r = (a = o.next()).done); r = !0) a.value.isSEI() || (n = !1);
          } catch (t) {
            (i = !0), (s = t);
          } finally {
            try {
              !r && o.return && o.return();
            } finally {
              if (i) throw s;
            }
          }
          n || this.rtpTimestampHandler.checkOverflow(t.timestamp), (t.timestamp = this.rtpTimestampHandler.adjust(t.timestamp));
          var u = t.getTimestampMS(),
            h = u;
          n || (h = this.dtsGenerator.getDtsWithPts(u));
          var c = !0,
            l = !1,
            d = void 0;
          try {
            for (var f, p = e[Symbol.iterator](); !(c = (f = p.next()).done); c = !0) {
              var v = f.value;
              (v.dts = h), (v.pts = u);
            }
          } catch (t) {
            (l = !0), (d = t);
          } finally {
            try {
              !c && p.return && p.return();
            } finally {
              if (l) throw d;
            }
          }
          return e;
        },
      },
    ]),
    re);
  function re() {
    p(this, re), (this.naluasm = new Gt()), (this.dtsGenerator = new Jt()), (this.rtpTimestampHandler = new te());
  }
  var ie =
    (n(se, [
      {
        key: "setConfig",
        value: function(t) {
          this.asm.config = t;
        },
      },
      {
        key: "parse",
        value: function(t) {
          return this.rtpTimestampHandler.checkOverflow(t.timestamp), (t.timestamp = this.rtpTimestampHandler.adjust(t.timestamp)), this.asm.onAACFragment(t);
        },
      },
    ]),
    se);
  function se() {
    p(this, se), (this.scale = 1), (this.asm = new Zt()), (this.rtpTimestampHandler = new te());
  }
  var ae = b("client:base"),
    oe =
      (n(
        ue,
        [
          {
            key: "destroy",
            value: function() {
              this.detachTransport(), this.stopStreamFlush();
            },
          },
          {
            key: "attachTransport",
            value: function(t) {
              this.transport && this.detachTransport(),
                (this.transport = t),
                this.transport.eventSource.addEventListener("data", this._onData),
                this.transport.eventSource.addEventListener("connected", this._onConnect),
                this.transport.eventSource.addEventListener("disconnected", this._onDisconnect),
                this.transport.eventSource.addEventListener("reconnected", this._onReconnect);
            },
          },
          {
            key: "detachTransport",
            value: function() {
              this.transport &&
                (this.transport.eventSource.removeEventListener("data", this._onData),
                this.transport.eventSource.removeEventListener("connected", this._onConnect),
                this.transport.eventSource.removeEventListener("disconnected", this._onDisconnect),
                this.transport.eventSource.removeEventListener("reconnected", this._onReconnect),
                (this.transport = null));
            },
          },
          { key: "reset", value: function() {} },
          {
            key: "start",
            value: function() {
              ae.debug("Client started"), (this.paused = !1);
            },
          },
          {
            key: "stop",
            value: function() {
              ae.debug("Client paused"), console.trace(), (this.paused = !0);
            },
          },
          { key: "seek", value: function(t) {} },
          {
            key: "setSource",
            value: function(t) {
              this.stop(), (this.endpoint = t), (this.sourceUrl = t.urlpath);
            },
          },
          {
            key: "startStreamFlush",
            value: function() {
              var t = this;
              this.flushInterval = setInterval(function() {
                t.paused || t.eventSource.dispatchEvent("flush");
              }, this.options.flush);
            },
          },
          {
            key: "stopStreamFlush",
            value: function() {
              clearInterval(this.flushInterval), ae.debug("stopped stream flush");
            },
          },
          { key: "onData", value: function(t) {} },
          {
            key: "onConnected",
            value: function() {
              this.seekable || (this.transport.dataQueue = []), (this.connected = !0);
            },
          },
          {
            key: "onDisconnected",
            value: function() {
              (this.connected = !1), this.stopStreamFlush();
            },
          },
          {
            key: "onReconnected",
            value: function() {
              return x(
                regeneratorRuntime
                  .mark(function t() {
                    return regeneratorRuntime.wrap(
                      function(t) {
                        for (;;)
                          switch ((t.prev = t.next)) {
                            case 0:
                              return (t.next = 2), this.reset();
                            case 2:
                              this.eventSource.dispatchEvent("reconnected");
                            case 3:
                            case "end":
                              return t.stop();
                          }
                      },
                      t,
                      this,
                    );
                  })
                  .call(this),
              );
            },
          },
          {
            key: "queryCredentials",
            value: function() {
              return Promise.resolve();
            },
          },
          {
            key: "setCredentials",
            value: function(t, e) {
              (this.endpoint.user = t), (this.endpoint.pass = e), (this.endpoint.auth = t + ":" + e);
            },
          },
        ],
        [
          {
            key: "streamType",
            value: function() {
              return null;
            },
          },
        ],
      ),
      ue);
  function ue() {
    var t = this,
      e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : { flush: 100 };
    p(this, ue),
      (this.options = e),
      (this.eventSource = new P()),
      Object.defineProperties(this, { sourceUrl: { value: null, writable: !0 }, paused: { value: !0, writable: !0 }, seekable: { value: !1, writable: !0 }, connected: { value: !1, writable: !0 } }),
      (this._onData = function() {
        if (t.connected) for (; t.transport.dataQueue.length; ) t.onData(t.transport.dataQueue.pop());
      }),
      (this._onConnect = this.onConnected.bind(this)),
      (this._onDisconnect = this.onDisconnected.bind(this)),
      (this._onError = e.onError || null),
      (this._onReconnect = this.onReconnected.bind(this));
  }
  function he(t) {
    p(this, he), (this.message = t), (this.name = this.constructor.name), (this.stack = new Error().stack);
  }
  he.prototype = Object.create(Error.prototype);
  var ce = b("client:rtsp"),
    le =
      (n(de, [
        {
          key: "reset",
          value: function() {
            this.stopKeepAlive(), this.client.forgetRTPChannel(this.rtpChannel), (this.client = null), (this.track = null);
          },
        },
        {
          key: "start",
          value: function() {
            return this.sendSetup().then(this.sendPlay.bind(this));
          },
        },
        {
          key: "stop",
          value: function() {
            return this.sendTeardown();
          },
        },
        {
          key: "getSetupURL",
          value: function(t) {
            var e = this.client.sdp.getSessionBlock();
            return T.isAbsolute(t.control)
              ? t.control
              : T.isAbsolute("" + e.control + t.control)
              ? "" + e.control + t.control
              : T.isAbsolute("" + this.client.contentBase + t.control)
              ? "" + this.client.contentBase + t.control
              : t.control;
          },
        },
        {
          key: "getControlURL",
          value: function() {
            var t = this.client.sdp.getSessionBlock().control;
            return T.isAbsolute(t) ? t : t && "*" !== t ? "" + this.client.contentBase + t : this.client.contentBase;
          },
        },
        {
          key: "sendKeepalive",
          value: function() {
            return this.client.methods.includes("GET_PARAMETER") && !this.client.hacks.options_keepalive
              ? this.client.sendRequest("GET_PARAMETER", this.getSetupURL(this.track), { Session: this.session })
              : this.client.sendRequest("OPTIONS", "*");
          },
        },
        {
          key: "stopKeepAlive",
          value: function() {
            clearInterval(this.keepaliveInterval);
          },
        },
        {
          key: "startKeepAlive",
          value: function() {
            var e = this;
            this.keepaliveInterval = setInterval(function() {
              e.sendKeepalive().catch(function(t) {
                ce.error(t), (t instanceof me && 501 == Number(t.data.parsed.code)) || e.client.reconnect();
              });
            }, 3e4);
          },
        },
        {
          key: "sendRequest",
          value: function(t, e) {
            var n = 1 < arguments.length && void 0 !== e ? e : {},
              r = {};
            return this.session && (r.Session = this.session), Object.assign(r, n), this.client.sendRequest(t, this.getControlURL(), r);
          },
        },
        {
          key: "sendSetup",
          value: function() {
            var r = this;
            (this.state = pe.STATE_SETUP), (this.rtpChannel = this.client.interleaveChannelIndex);
            var t = this.client.interleaveChannelIndex++ + "-" + this.client.interleaveChannelIndex++;
            return this.client.sendRequest("SETUP", this.getSetupURL(this.track), { Transport: "RTP/AVP/TCP;unicast;interleaved=" + t, Date: new Date().toUTCString() }).then(function(t) {
              r.session = t.headers.session.split(";")[0];
              var e = t.headers.transport;
              if (e) {
                var n = e.match(/interleaved=([0-9]+)-([0-9]+)/)[1];
                n && (r.rtpChannel = Number(n));
              }
              r.startKeepAlive();
            });
          },
        },
        {
          key: "sendPlay",
          value: function() {
            return x(
              regeneratorRuntime
                .mark(function t() {
                  var e, n, r;
                  return regeneratorRuntime.wrap(
                    function(t) {
                      for (;;)
                        switch ((t.prev = t.next)) {
                          case 0:
                            return (
                              (this.state = de.STATE_PLAY),
                              (e = {}),
                              (n = this.client.sdp.sessionBlock.range) && -1 == n[0] && (n[0] = 0),
                              this.client.useRTPChannel(this.rtpChannel),
                              (t.next = 7),
                              this.sendRequest("PLAY", e)
                            );
                          case 7:
                            return (r = t.sent), (this.state = pe.STATE_PLAYING), t.abrupt("return", { track: this.track, data: r });
                          case 10:
                          case "end":
                            return t.stop();
                        }
                    },
                    t,
                    this,
                  );
                })
                .call(this),
            );
          },
        },
        {
          key: "sendPause",
          value: function() {
            return x(
              regeneratorRuntime
                .mark(function t() {
                  return regeneratorRuntime.wrap(
                    function(t) {
                      for (;;)
                        switch ((t.prev = t.next)) {
                          case 0:
                            if (this.client.supports("PAUSE")) {
                              t.next = 2;
                              break;
                            }
                            return t.abrupt("return");
                          case 2:
                            return (this.state = pe.STATE_PAUSE), (t.next = 5), this.sendRequest("PAUSE");
                          case 5:
                            this.state = pe.STATE_PAUSED;
                          case 6:
                          case "end":
                            return t.stop();
                        }
                    },
                    t,
                    this,
                  );
                })
                .call(this),
            );
          },
        },
        {
          key: "sendTeardown",
          value: function() {
            return x(
              regeneratorRuntime
                .mark(function t() {
                  return regeneratorRuntime.wrap(
                    function(t) {
                      for (;;)
                        switch ((t.prev = t.next)) {
                          case 0:
                            if (this.state != pe.STATE_TEARDOWN)
                              return this.client.forgetRTPChannel(this.rtpChannel), (this.state = pe.STATE_TEARDOWN), this.stopKeepAlive(), (t.next = 6), this.sendRequest("TEARDOWN");
                            t.next = 7;
                            break;
                          case 6:
                            ce.log("RTSPClient: STATE_TEARDOWN");
                          case 7:
                          case "end":
                            return t.stop();
                        }
                    },
                    t,
                    this,
                  );
                })
                .call(this),
            );
          },
        },
      ]),
      de);
  function de(t, e) {
    p(this, de), (this.state = null), (this.client = t), (this.track = e), (this.rtpChannel = 1), this.stopKeepAlive(), (this.keepaliveInterval = null);
  }
  s(fe, he);
  function fe(t, e, n) {
    p(this, fe);
    var r = a(this, (fe.__proto__ || Object.getPrototypeOf(fe)).call(this, t));
    return (r.file = e), (r.line = n), r;
  }
  var pe =
    (s(ve, oe),
    n(
      ve,
      [
        {
          key: "setSource",
          value: function(t) {
            o(ve.prototype.__proto__ || Object.getPrototypeOf(ve.prototype), "setSource", this).call(this, t), this.clientSM.setSource(t);
          },
        },
        {
          key: "attachTransport",
          value: function(t) {
            o(ve.prototype.__proto__ || Object.getPrototypeOf(ve.prototype), "attachTransport", this).call(this, t), (this.clientSM.transport = t);
          },
        },
        {
          key: "detachTransport",
          value: function() {
            o(ve.prototype.__proto__ || Object.getPrototypeOf(ve.prototype), "detachTransport", this).call(this), (this.clientSM.transport = null);
          },
        },
        {
          key: "reset",
          value: function() {
            var e = this;
            return x(
              regeneratorRuntime
                .mark(function t(e) {
                  return regeneratorRuntime.wrap(
                    function(t) {
                      for (;;)
                        switch ((t.prev = t.next)) {
                          case 0:
                            return e("reset").call(this), (t.next = 3), this.clientSM.reset();
                          case 3:
                            (this.sampleQueues = {}), ce.debug("rtsp client reset");
                          case 5:
                          case "end":
                            return t.stop();
                        }
                    },
                    t,
                    this,
                  );
                })
                .call(this, function(t) {
                  return o(ve.prototype.__proto__ || Object.getPrototypeOf(ve.prototype), t, e);
                }),
            );
          },
        },
        {
          key: "destroy",
          value: function() {
            return this.clientSM.destroy(), o(ve.prototype.__proto__ || Object.getPrototypeOf(ve.prototype), "destroy", this).call(this);
          },
        },
        {
          key: "start",
          value: function() {
            var e = this;
            return (
              o(ve.prototype.__proto__ || Object.getPrototypeOf(ve.prototype), "start", this).call(this),
              this.transport
                ? this.transport
                    .ready()
                    .then(function() {
                      return e.clientSM.start();
                    })
                    .catch(function(t) {
                      if (!e._onError) throw t;
                      e._onError(t);
                    })
                : Promise.reject("no transport attached")
            );
          },
        },
        {
          key: "onData",
          value: function(t) {
            this.clientSM.onData(t);
          },
        },
        {
          key: "onConnected",
          value: function() {
            this.clientSM.onConnected(), o(ve.prototype.__proto__ || Object.getPrototypeOf(ve.prototype), "onConnected", this).call(this);
          },
        },
        {
          key: "onDisconnected",
          value: function() {
            o(ve.prototype.__proto__ || Object.getPrototypeOf(ve.prototype), "onDisconnected", this).call(this), this.clientSM.onDisconnected();
          },
        },
      ],
      [
        {
          key: "streamType",
          value: function() {
            return "rtsp";
          },
        },
      ],
    ),
    ve);
  function ve() {
    var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : { flush: 200 };
    p(this, ve);
    var e = a(this, (ve.__proto__ || Object.getPrototypeOf(ve)).call(this, t));
    return (
      (e.clientSM = new Se(e)),
      (e.clientSM.ontracks = function(t) {
        e.eventSource.dispatchEvent("tracks", t), e.stopStreamFlush(), e.startStreamFlush();
      }),
      (e.sampleQueues = {}),
      e
    );
  }
  var ye = (s(ge, he), ge);
  function ge(t) {
    return p(this, ge), a(this, (ge.__proto__ || Object.getPrototypeOf(ge)).call(this, t));
  }
  var me = (s(be, he), be);
  function be(t) {
    p(this, be);
    var e = a(this, (be.__proto__ || Object.getPrototypeOf(be)).call(this, t.msg));
    return (e.data = t), e;
  }
  var Se =
    (s(ke, xt),
    n(ke, null, [
      {
        key: "USER_AGENT",
        get: function() {
          return "SFRtsp 0.3";
        },
      },
      {
        key: "STATE_INITIAL",
        get: function() {
          return 1;
        },
      },
      {
        key: "STATE_OPTIONS",
        get: function() {
          return 2;
        },
      },
      {
        key: "STATE_DESCRIBE",
        get: function() {
          return 4;
        },
      },
      {
        key: "STATE_SETUP",
        get: function() {
          return 8;
        },
      },
      {
        key: "STATE_STREAMS",
        get: function() {
          return 16;
        },
      },
      {
        key: "STATE_TEARDOWN",
        get: function() {
          return 32;
        },
      },
    ]),
    n(ke, [
      {
        key: "destroy",
        value: function() {
          var t = Object.keys(this.streams),
            e = !0,
            n = !1,
            r = void 0;
          try {
            for (var i, s = t[Symbol.iterator](); !(e = (i = s.next()).done); e = !0) {
              var a = i.value;
              ("audio" !== a && "video" !== a) || (this.streams[a].stopKeepAlive(), ce.debug("stopped keepalive " + a));
            }
          } catch (t) {
            (n = !0), (r = t);
          } finally {
            try {
              !e && s.return && s.return();
            } finally {
              if (n) throw r;
            }
          }
          this.parent = null;
        },
      },
      {
        key: "setSource",
        value: function(t) {
          this.reset();
          var e = (this.endpoint = t).protocol + "://" + t.location + t.urlpath;
          this.url = e;
        },
      },
      {
        key: "onConnected",
        value: function() {
          this.shouldReconnect && (this.start(), (this.shouldReconnect = !1));
        },
      },
      {
        key: "onDisconnected",
        value: function() {
          return x(
            regeneratorRuntime
              .mark(function t() {
                return regeneratorRuntime.wrap(
                  function(t) {
                    for (;;)
                      switch ((t.prev = t.next)) {
                        case 0:
                          return (t.next = 2), this.reset();
                        case 2:
                          return (this.shouldReconnect = !0), (t.next = 5), this.transitionTo(ke.STATE_TEARDOWN);
                        case 5:
                          return (t.next = 7), this.transitionTo(ke.STATE_INITIAL);
                        case 7:
                        case "end":
                          return t.stop();
                      }
                  },
                  t,
                  this,
                );
              })
              .call(this),
          );
        },
      },
      {
        key: "transitionTo",
        value: function(t) {
          var e = this;
          return o(ke.prototype.__proto__ || Object.getPrototypeOf(ke.prototype), "transitionTo", this)
            .call(this, t)
            .catch(function(t) {
              if (!e.parent._onError) throw t;
              e.parent._onError(t);
            });
        },
      },
      {
        key: "start",
        value: function() {
          this.currentState.name !== ke.STATE_STREAMS && this.transitionTo(ke.STATE_OPTIONS);
        },
      },
      {
        key: "onData",
        value: function(t) {
          var e = t[1];
          this.rtp_channels.has(e) && this.onRTP({ packet: t.subarray(4), type: e });
        },
      },
      {
        key: "useRTPChannel",
        value: function(t) {
          this.rtp_channels.add(t);
        },
      },
      {
        key: "forgetRTPChannel",
        value: function(t) {
          this.rtp_channels.delete(t);
        },
      },
      {
        key: "stop",
        value: function() {
          this.shouldReconnect = !1;
        },
      },
      {
        key: "reset",
        value: function() {
          return x(
            regeneratorRuntime
              .mark(function t() {
                var e;
                return regeneratorRuntime.wrap(
                  function(t) {
                    for (;;)
                      switch ((t.prev = t.next)) {
                        case 0:
                          for (e in ((this.authenticator = ""), (this.methods = []), (this.tracks = []), (this.rtpBuffer = {}), this.streams)) this.streams[e].reset();
                          if (((this.streams = {}), (this.contentBase = ""), !this.currentState)) {
                            t.next = 15;
                            break;
                          }
                          if (this.currentState.name != ke.STATE_INITIAL) return (t.next = 11), this.transitionTo(ke.STATE_TEARDOWN);
                          t.next = 13;
                          break;
                        case 11:
                          return (t.next = 13), this.transitionTo(ke.STATE_INITIAL);
                        case 13:
                          t.next = 17;
                          break;
                        case 15:
                          return (t.next = 17), this.transitionTo(ke.STATE_INITIAL);
                        case 17:
                          (this.sdp = null), (this.interleaveChannelIndex = 0), (this.session = null), (this.timeOffset = {}), (this.lastTimestamp = {});
                        case 22:
                        case "end":
                          return t.stop();
                      }
                  },
                  t,
                  this,
                );
              })
              .call(this),
          );
        },
      },
      {
        key: "reconnect",
        value: function() {
          return x(
            regeneratorRuntime
              .mark(function t() {
                return regeneratorRuntime.wrap(
                  function(t) {
                    for (;;)
                      switch ((t.prev = t.next)) {
                        case 0:
                          return (t.next = 2), this.reset();
                        case 2:
                          if (this.currentState.name != ke.STATE_INITIAL) return (t.next = 5), this.transitionTo(ke.STATE_TEARDOWN);
                          t.next = 8;
                          break;
                        case 5:
                        case 8:
                          return t.abrupt("return", this.transitionTo(ke.STATE_OPTIONS));
                        case 9:
                        case "end":
                          return t.stop();
                      }
                  },
                  t,
                  this,
                );
              })
              .call(this),
          );
        },
      },
      {
        key: "supports",
        value: function(t) {
          return this.methods.includes(t);
        },
      },
      {
        key: "parse",
        value: function(t) {
          ce.debug(t.payload);
          var e = t.payload.split("\r\n\r\n"),
            n = Kt.parse(e[0]);
          if (Number(n.headers["content-length"])) {
            var r = t.payload.split("\r\n\r\n");
            n.body = r[1];
          } else n.body = "";
          return n;
        },
      },
      {
        key: "sendRequest",
        value: function(e, n, t, r) {
          var i = this,
            s = 2 < arguments.length && void 0 !== t ? t : {},
            a = 3 < arguments.length && void 0 !== r ? r : null;
          return (
            this.cSeq++,
            Object.assign(s, { CSeq: this.cSeq, "User-Agent": ke.USER_AGENT }),
            this.authenticator && (s.Authorization = this.authenticator(e)),
            this.send(Kt.build(e, n, s, a), e).catch(function(t) {
              if (t instanceof ye && !s.Authorization) return i.sendRequest(e, n, s, a);
              throw t;
            })
          );
        },
      },
      {
        key: "send",
        value: function(S, t) {
          return x(
            regeneratorRuntime
              .mark(function t() {
                var e,
                  n,
                  r,
                  i,
                  s,
                  a,
                  o,
                  u,
                  h,
                  c,
                  l,
                  d,
                  f,
                  p,
                  v,
                  y,
                  g,
                  m,
                  b = this;
                return regeneratorRuntime.wrap(
                  function(t) {
                    for (;;)
                      switch ((t.prev = t.next)) {
                        case 0:
                          if (this.transport) return (t.prev = 1), (t.next = 4), this.transport.ready();
                          t.next = 64;
                          break;
                        case 4:
                          t.next = 10;
                          break;
                        case 6:
                          throw ((t.prev = 6), (t.t0 = t.catch(1)), this.onDisconnected(), t.t0);
                        case 10:
                          return ce.debug(S), (t.next = 13), this.transport.send(S);
                        case 13:
                          if (((e = t.sent), 401 != (n = this.parse(e)).code)) {
                            t.next = 58;
                            break;
                          }
                          if (
                            (ce.debug(n.headers["www-authenticate"]),
                            (r = n.headers["www-authenticate"]),
                            (i = r.substring(0, r.indexOf(" "))),
                            (r = r.substr(i.length + 1)),
                            (s = r.split(",")),
                            (a = this.parent.endpoint).user && a.pass)
                          ) {
                            t.next = 31;
                            break;
                          }
                          return (t.prev = 23), (t.next = 26), this.parent.queryCredentials.call(this.parent);
                        case 26:
                          t.next = 31;
                          break;
                        case 28:
                          throw ((t.prev = 28), (t.t1 = t.catch(23)), new ye());
                        case 31:
                          if ("digest" != i.toLowerCase()) {
                            t.next = 56;
                            break;
                          }
                          for (o = {}, h = !(u = !0), c = void 0, t.prev = 36, l = s[Symbol.iterator](); !(u = (d = l.next()).done); u = !0)
                            (f = d.value), (p = f.trim()), (v = p.split("=")), (y = k(v, 2)), (g = y[0]), (m = y[1]), (o[g] = m.substr(1, m.length - 2));
                          t.next = 44;
                          break;
                        case 40:
                          (t.prev = 40), (t.t2 = t.catch(36)), (h = !0), (c = t.t2);
                        case 44:
                          (t.prev = 44), (t.prev = 45), !u && l.return && l.return();
                        case 47:
                          if (((t.prev = 47), h)) throw c;
                          t.next = 50;
                          break;
                        case 50:
                          return t.finish(47);
                        case 51:
                          return t.finish(44);
                        case 52:
                          "RTSP Server" == n.headers.server && "RTSP SERVER" == o.realm && (ce.debug("set OPTIONS keepalive hack"), (this.hacks.options_keepalive = !0)),
                            (this.authenticator = function(t) {
                              var e = b.parent.endpoint,
                                n = qt(e.user + ":" + o.realm + ":" + e.pass),
                                r = qt(t + ":" + b.url),
                                i = qt(n + ":" + o.nonce + ":" + r);
                              return 'Digest username="' + e.user + '", realm="' + o.realm + '", nonce="' + o.nonce + '", uri="' + b.url + '", response="' + i + '"';
                            }),
                            (t.next = 57);
                          break;
                        case 56:
                          this.authenticator = function() {
                            return "Basic " + btoa(b.parent.endpoint.auth);
                          };
                        case 57:
                          throw new ye(n);
                        case 58:
                          if (300 <= n.code) throw (ce.error("RTSP error:", n.statusLine), new me({ msg: "RTSP error: " + n.code + " " + n.statusLine, parsed: n }));
                          t.next = 61;
                          break;
                        case 61:
                          return t.abrupt("return", n);
                        case 64:
                          return t.abrupt("return", Promise.reject("No transport attached"));
                        case 65:
                        case "end":
                          return t.stop();
                      }
                  },
                  t,
                  this,
                  [
                    [1, 6],
                    [23, 28],
                    [36, 40, 44, 52],
                    [45, , 47, 51],
                  ],
                );
              })
              .call(this),
          );
        },
      },
      {
        key: "sendOptions",
        value: function() {
          return this.reset(), (this.started = !0), (this.cSeq = 0), this.sendRequest("OPTIONS", this.url, {});
        },
      },
      {
        key: "onOptions",
        value: function(t) {
          t.headers.public
            ? (this.methods = t.headers.public.split(",").map(function(t) {
                return t.trim();
              }))
            : (this.methods = ["OPTIONS", "DESCRIBE", "TEARDOWN", "PLAY"]),
            this.transitionTo(ke.STATE_DESCRIBE);
        },
      },
      {
        key: "sendDescribe",
        value: function() {
          var e = this;
          return this.sendRequest("DESCRIBE", this.url, { Accept: "application/sdp" }).then(function(t) {
            return (
              (e.sdp = new wt()),
              e.sdp
                .parse(t.body)
                .catch(function() {
                  throw new Error("Failed to parse SDP");
                })
                .then(function() {
                  return t;
                })
            );
          });
        },
      },
      {
        key: "onDescribe",
        value: function(t) {
          if (
            ((this.contentBase = t.headers["content-base"] || this.url),
            this.contentBase.endsWith("/") || (this.contentBase = this.contentBase + "/"),
            (this.tracks = this.sdp.getMediaBlockList()),
            ce.log("SDP contained " + this.tracks.length + " track(s). Calling SETUP for each."),
            t.headers.session && (this.session = t.headers.session),
            !this.tracks.length)
          )
            throw new Error("No tracks in SDP");
          this.transitionTo(ke.STATE_SETUP);
        },
      },
      {
        key: "sendSetup",
        value: function() {
          var g = this,
            t = [],
            e = !0,
            n = !1,
            r = void 0;
          try {
            for (var i, s = this.tracks[Symbol.iterator](); !(e = (i = s.next()).done); e = !0) {
              var a = i.value;
              if ("audio" == a || "video" == a) {
                var o = this.sdp.getMediaBlock(a);
                if (o.rtpmap[o.fmt[0]] && lt.string_map[o.rtpmap[o.fmt[0]].name]) {
                  ce.log("setup track: " + a), (this.streams[a] = new le(this, o));
                  var u = this.streams[a].start();
                  (this.parent.sampleQueues[lt.string_map[o.rtpmap[o.fmt[0]].name]] = []),
                    (this.rtpBuffer[o.fmt[0]] = []),
                    t.push(
                      u.then(function(t) {
                        var e = t.track,
                          n = t.data;
                        g.timeOffset[e.fmt[0]] = 0;
                        try {
                          var r = n.headers["rtp-info"].split(";"),
                            i = !0,
                            s = !1,
                            a = void 0;
                          try {
                            for (var o, u = r[Symbol.iterator](); !(i = (o = u.next()).done); i = !0) {
                              var h = o.value.split("="),
                                c = k(h, 2),
                                l = c[0],
                                d = c[1];
                              "rtptime" === l && (g.timeOffset[e.fmt[0]] = Number(d));
                            }
                          } catch (t) {
                            (s = !0), (a = t);
                          } finally {
                            try {
                              !i && u.return && u.return();
                            } finally {
                              if (s) throw a;
                            }
                          }
                        } catch (t) {}
                        var f = { timescale: 0, scaleFactor: 0 };
                        if (e.fmtp && e.fmtp["sprop-parameter-sets"]) {
                          var p = e.fmtp["sprop-parameter-sets"].split(",");
                          f = { sps: $(p[0]), pps: $(p[1]) };
                        } else if (e.fmtp && e.fmtp.config) {
                          var v = e.fmtp.config;
                          (g.has_config = "0" != e.fmtp.cpresent),
                            "MPEG4-GENERIC" == e.rtpmap[e.fmt[0]].name
                              ? ((f = { config: ft.parseAudioSpecificConfig(J(v)) }), g.payParser.aacparser.setConfig(f.config))
                              : v && ((f = { config: ft.parseStreamMuxConfig(J(v)) }), g.payParser.aacparser.setConfig(f.config));
                        }
                        if (((f.duration = null), (g.parent.seekable = !1), g.sdp.sessionBlock.range)) {
                          var y = g.sdp.sessionBlock.range[1] - g.sdp.sessionBlock.range[0];
                          1 < y && (ce.debug("set to seekable mode"), (g.parent.seekable = !0), (f.duration = y));
                        }
                        return { track: e, offset: g.timeOffset[e.fmt[0]], type: lt.string_map[e.rtpmap[e.fmt[0]].name], params: f, duration: f.duration };
                      }),
                    );
                }
              }
            }
          } catch (t) {
            (n = !0), (r = t);
          } finally {
            try {
              !e && s.return && s.return();
            } finally {
              if (n) throw r;
            }
          }
          return Promise.all(t)
            .then(function(t) {
              g.ontracks && g.ontracks(t);
            })
            .catch(function(t) {
              return ce.error("setup error: ", t), g.stop(), g.reset();
            });
        },
      },
      {
        key: "onSetup",
        value: function() {
          (this.firstKeyframeFound = !1), this.transitionTo(ke.STATE_STREAMS);
        },
      },
      {
        key: "onRTP",
        value: function(t) {
          var e = new Ht(t.packet, this.sdp);
          if (e.type) {
            var n = this.rtpBuffer[e.pt];
            for (n.push(e); n.length; ) {
              var r = n.shift();
              if (r.media) {
                var i = this.payParser.parse(r);
                if (i)
                  if (r.isVideo()) {
                    var s = !0,
                      a = !1,
                      o = void 0;
                    try {
                      for (var u, h = i[Symbol.iterator](); !(s = (u = h.next()).done); s = !0) {
                        var c = u.value;
                        c.isDataType() &&
                          (!this.firstKeyframeFound && c.isKeyframe() && (this.firstKeyframeFound = !0),
                          this.firstKeyframeFound ? this.parent.sampleQueues[r.type].push([c]) : console.log("drop broken nalu", c.toString()));
                      }
                    } catch (t) {
                      (a = !0), (o = t);
                    } finally {
                      try {
                        !s && h.return && h.return();
                      } finally {
                        if (a) throw o;
                      }
                    }
                  } else this.parent.sampleQueues[r.type].push(i);
              }
            }
          }
        },
      },
    ]),
    ke);
  function ke(t) {
    p(this, ke);
    var e = a(this, (ke.__proto__ || Object.getPrototypeOf(ke)).call(this));
    return (
      (e.parent = t),
      (e.transport = null),
      (e.payParser = new Qt()),
      (e.rtp_channels = new Set()),
      (e.ontracks = null),
      (e.hacks = {}),
      e
        .addState(ke.STATE_INITIAL, {})
        .addState(ke.STATE_OPTIONS, { activate: e.sendOptions, finishTransition: e.onOptions })
        .addState(ke.STATE_DESCRIBE, { activate: e.sendDescribe, finishTransition: e.onDescribe })
        .addState(ke.STATE_SETUP, { activate: e.sendSetup, finishTransition: e.onSetup })
        .addState(ke.STATE_STREAMS, {})
        .addState(ke.STATE_TEARDOWN, {
          activate: function() {
            e.started = !1;
          },
          finishTransition: function() {
            return e.transitionTo(ke.STATE_INITIAL);
          },
        })
        .addTransition(ke.STATE_INITIAL, ke.STATE_OPTIONS)
        .addTransition(ke.STATE_INITIAL, ke.STATE_TEARDOWN)
        .addTransition(ke.STATE_OPTIONS, ke.STATE_DESCRIBE)
        .addTransition(ke.STATE_DESCRIBE, ke.STATE_SETUP)
        .addTransition(ke.STATE_SETUP, ke.STATE_STREAMS)
        .addTransition(ke.STATE_TEARDOWN, ke.STATE_INITIAL)
        .addTransition(ke.STATE_STREAMS, ke.STATE_TEARDOWN)
        .addTransition(ke.STATE_SETUP, ke.STATE_TEARDOWN)
        .addTransition(ke.STATE_DESCRIBE, ke.STATE_TEARDOWN)
        .addTransition(ke.STATE_OPTIONS, ke.STATE_TEARDOWN),
      e.reset(),
      (e.shouldReconnect = !1),
      e
    );
  }
  var xe = function(t, e) {
      var n = document.createElement(t);
      return (n.className = e), n;
    },
    Te = function(t) {
      return document.createTextNode(t);
    },
    _e =
      (n(we, null, [
        {
          key: "hexDigits",
          get: function() {
            return "0123456789ABCDEF";
          },
        },
        {
          key: "reTime",
          get: function() {
            return /^((?:1[89]|2\d)?\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;
          },
        },
      ]),
      n(we, [
        {
          key: "get",
          value: function(t) {
            if ((void 0 === t && (t = this.pos++), t >= this.enc.length)) throw "Requesting byte offset " + t + " on a stream of length " + this.enc.length;
            return this.enc[t];
          },
        },
        {
          key: "hexByte",
          value: function(t) {
            return we.hexDigits.charAt((t >> 4) & 15) + we.hexDigits.charAt(15 & t);
          },
        },
        {
          key: "hexDump",
          value: function(t, e, n) {
            for (var r = "", i = t; i < e; ++i)
              if (((r += this.hexByte(this.get(i))), !0 !== n))
                switch (15 & i) {
                  case 7:
                    r += "  ";
                    break;
                  case 15:
                    r += "\n";
                    break;
                  default:
                    r += " ";
                }
            return r;
          },
        },
        {
          key: "parseStringISO",
          value: function(t, e) {
            for (var n = "", r = t; r < e; ++r) n += String.fromCharCode(this.get(r));
            return n;
          },
        },
        {
          key: "parseStringUTF",
          value: function(t, e) {
            for (var n = "", r = t; r < e; ) {
              var i = this.get(r++);
              n +=
                i < 128
                  ? String.fromCharCode(i)
                  : 191 < i && i < 224
                  ? String.fromCharCode(((31 & i) << 6) | (63 & this.get(r++)))
                  : String.fromCharCode(((15 & i) << 12) | ((63 & this.get(r++)) << 6) | (63 & this.get(r++)));
            }
            return n;
          },
        },
        {
          key: "parseStringBMP",
          value: function(t, e) {
            for (var n = "", r = t; r < e; r += 2) {
              var i = this.get(r),
                s = this.get(r + 1);
              n += String.fromCharCode((i << 8) + s);
            }
            return n;
          },
        },
        {
          key: "parseTime",
          value: function(t, e) {
            var n = this.parseStringISO(t, e),
              r = we.reTime.exec(n);
            return r
              ? ((n = r[1] + "-" + r[2] + "-" + r[3] + " " + r[4]),
                r[5] && ((n += ":" + r[5]), r[6] && ((n += ":" + r[6]), r[7] && (n += "." + r[7]))),
                r[8] && ((n += " UTC"), "Z" != r[8] && ((n += r[8]), r[9] && (n += ":" + r[9]))),
                n)
              : "Unrecognized time: " + n;
          },
        },
        {
          key: "parseInteger",
          value: function(t, e) {
            var n = e - t;
            if (4 < n) {
              n <<= 3;
              var r = this.get(t);
              if (0 === r) n -= 8;
              else for (; r < 128; ) (r <<= 1), --n;
              return "(" + n + " bit)";
            }
            for (var i = 0, s = t; s < e; ++s) i = (i << 8) | this.get(s);
            return i;
          },
        },
        {
          key: "parseBitString",
          value: function(t, e) {
            var n = this.get(t),
              r = ((e - t - 1) << 3) - n,
              i = "(" + r + " bit)";
            if (r <= 20) {
              var s = n;
              i += " ";
              for (var a = e - 1; t < a; --a) {
                for (var o = this.get(a), u = s; u < 8; ++u) i += (o >> u) & 1 ? "1" : "0";
                s = 0;
              }
            }
            return i;
          },
        },
        {
          key: "parseOctetString",
          value: function(t, e) {
            var n = e - t,
              r = "(" + n + " byte) ";
            100 < n && (e = t + 100);
            for (var i = t; i < e; ++i) r += this.hexByte(this.get(i));
            return 100 < n && (r += "…"), r;
          },
        },
        {
          key: "parseOID",
          value: function(t, e) {
            for (var n = "", r = 0, i = 0, s = t; s < e; ++s) {
              var a = this.get(s);
              if (((r = (r << 7) | (127 & a)), (i += 7), !(128 & a))) {
                if ("" === n) {
                  var o = r < 80 ? (r < 40 ? 0 : 1) : 2;
                  n = o + "." + (r - 40 * o);
                } else n += "." + (31 <= i ? "bigint" : r);
                r = i = 0;
              }
            }
            return n;
          },
        },
      ]),
      we);
  function we(t, e) {
    p(this, we), t instanceof we ? ((this.enc = t.enc), (this.pos = t.pos)) : ((this.enc = t), (this.pos = e));
  }
  var Ee =
    (n(Ae, null, [
      {
        key: "reSeemsASCII",
        get: function() {
          return /^[ -~]+$/;
        },
      },
    ]),
    n(Ae, [
      {
        key: "typeName",
        value: function() {
          if (void 0 === this.tag) return "unknown";
          var t = this.tag >> 6,
            e = (this.tag, 31 & this.tag);
          switch (t) {
            case 0:
              switch (e) {
                case 0:
                  return "EOC";
                case 1:
                  return "BOOLEAN";
                case 2:
                  return "INTEGER";
                case 3:
                  return "BIT_STRING";
                case 4:
                  return "OCTET_STRING";
                case 5:
                  return "NULL";
                case 6:
                  return "OBJECT_IDENTIFIER";
                case 7:
                  return "ObjectDescriptor";
                case 8:
                  return "EXTERNAL";
                case 9:
                  return "REAL";
                case 10:
                  return "ENUMERATED";
                case 11:
                  return "EMBEDDED_PDV";
                case 12:
                  return "UTF8String";
                case 16:
                  return "SEQUENCE";
                case 17:
                  return "SET";
                case 18:
                  return "NumericString";
                case 19:
                  return "PrintableString";
                case 20:
                  return "TeletexString";
                case 21:
                  return "VideotexString";
                case 22:
                  return "IA5String";
                case 23:
                  return "UTCTime";
                case 24:
                  return "GeneralizedTime";
                case 25:
                  return "GraphicString";
                case 26:
                  return "VisibleString";
                case 27:
                  return "GeneralString";
                case 28:
                  return "UniversalString";
                case 30:
                  return "BMPString";
                default:
                  return "Universal_" + e.toString(16);
              }
            case 1:
              return "Application_" + e.toString(16);
            case 2:
              return "[" + e + "]";
            case 3:
              return "Private_" + e.toString(16);
          }
        },
      },
      {
        key: "content",
        value: function() {
          if (void 0 === this.tag) return null;
          var t = this.tag >> 6,
            e = 31 & this.tag,
            n = this.posContent(),
            r = Math.abs(this.length);
          if (0 != t) {
            if (null !== this.sub) return "(" + this.sub.length + " elem)";
            var i = this.stream.parseStringISO(n, n + Math.min(r, 100));
            return Ae.reSeemsASCII.test(i) ? i.substring(0, 200) + (200 < i.length ? "…" : "") : this.stream.parseOctetString(n, n + r);
          }
          switch (e) {
            case 1:
              return 0 === this.stream.get(n) ? "false" : "true";
            case 2:
              return this.stream.parseInteger(n, n + r);
            case 3:
              return this.sub ? "(" + this.sub.length + " elem)" : this.stream.parseBitString(n, n + r);
            case 4:
              return this.sub ? "(" + this.sub.length + " elem)" : this.stream.parseOctetString(n, n + r);
            case 6:
              return this.stream.parseOID(n, n + r);
            case 16:
            case 17:
              return "(" + this.sub.length + " elem)";
            case 12:
              return this.stream.parseStringUTF(n, n + r);
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 26:
              return this.stream.parseStringISO(n, n + r);
            case 30:
              return this.stream.parseStringBMP(n, n + r);
            case 23:
            case 24:
              return this.stream.parseTime(n, n + r);
          }
          return null;
        },
      },
      {
        key: "toString",
        value: function() {
          return this.typeName() + "@" + this.stream.pos + "[header:" + this.header + ",length:" + this.length + ",sub:" + (null === this.sub ? "null" : this.sub.length) + "]";
        },
      },
      {
        key: "print",
        value: function(t) {
          if ((void 0 === t && (t = ""), document.writeln(t + this), null !== this.sub)) {
            t += "  ";
            for (var e = 0, n = this.sub.length; e < n; ++e) this.sub[e].print(t);
          }
        },
      },
      {
        key: "toPrettyString",
        value: function(t) {
          void 0 === t && (t = "");
          var e = t + this.typeName() + " @" + this.stream.pos;
          if (
            (0 <= this.length && (e += "+"),
            (e += this.length),
            32 & this.tag ? (e += " (constructed)") : (3 != this.tag && 4 != this.tag) || null === this.sub || (e += " (encapsulates)"),
            (e += "\n"),
            null !== this.sub)
          ) {
            t += "  ";
            for (var n = 0, r = this.sub.length; n < r; ++n) e += this.sub[n].toPrettyString(t);
          }
          return e;
        },
      },
      {
        key: "toDOM",
        value: function() {
          var t = xe("div", "node");
          t.asn1 = this;
          var e = xe("div", "head"),
            n = this.typeName().replace(/_/g, " ");
          e.innerHTML = n;
          var r = this.content();
          if (null !== r) {
            r = String(r).replace(/</g, "&lt;");
            var i = xe("span", "preview");
            i.appendChild(Te(r)), e.appendChild(i);
          }
          t.appendChild(e), (this.node = t), (this.head = e);
          var s = xe("div", "value");
          if (
            ((n = "Offset: " + this.stream.pos + "<br/>"),
            (n += "Length: " + this.header + "+"),
            0 <= this.length ? (n += this.length) : (n += -this.length + " (undefined)"),
            32 & this.tag ? (n += "<br/>(constructed)") : (3 != this.tag && 4 != this.tag) || null === this.sub || (n += "<br/>(encapsulates)"),
            null !== r && ((n += "<br/>Value:<br/><b>" + r + "</b>"), "object" === ("undefined" == typeof oids ? "undefined" : f(oids)) && 6 == this.tag))
          ) {
            var a = oids[r];
            a && (a.d && (n += "<br/>" + a.d), a.c && (n += "<br/>" + a.c), a.w && (n += "<br/>(warning!)"));
          }
          (s.innerHTML = n), t.appendChild(s);
          var o = xe("div", "sub");
          if (null !== this.sub) for (var u = 0, h = this.sub.length; u < h; ++u) o.appendChild(this.sub[u].toDOM());
          return (
            t.appendChild(o),
            (e.onclick = function() {
              t.className = "node collapsed" == t.className ? "node" : "node collapsed";
            }),
            t
          );
        },
      },
      {
        key: "posStart",
        value: function() {
          return this.stream.pos;
        },
      },
      {
        key: "posContent",
        value: function() {
          return this.stream.pos + this.header;
        },
      },
      {
        key: "posEnd",
        value: function() {
          return this.stream.pos + this.header + Math.abs(this.length);
        },
      },
      {
        key: "fakeHover",
        value: function(t) {
          (this.node.className += " hover"), t && (this.head.className += " hover");
        },
      },
      {
        key: "fakeOut",
        value: function(t) {
          var e = / ?hover/;
          (this.node.className = this.node.className.replace(e, "")), t && (this.head.className = this.head.className.replace(e, ""));
        },
      },
      {
        key: "toHexDOM_sub",
        value: function(t, e, n, r, i) {
          if (!(i <= r)) {
            var s = xe("span", e);
            s.appendChild(Te(n.hexDump(r, i))), t.appendChild(s);
          }
        },
      },
      {
        key: "toHexDOM",
        value: function(e) {
          var t = xe("span", "hex");
          if (
            (void 0 === e && (e = t),
            (this.head.hexNode = t),
            (this.head.onmouseover = function() {
              this.hexNode.className = "hexCurrent";
            }),
            (this.head.onmouseout = function() {
              this.hexNode.className = "hex";
            }),
            (t.asn1 = this),
            (t.onmouseover = function() {
              var t = !e.selected;
              t && ((e.selected = this.asn1), (this.className = "hexCurrent")), this.asn1.fakeHover(t);
            }),
            (t.onmouseout = function() {
              var t = e.selected == this.asn1;
              this.asn1.fakeOut(t), t && ((e.selected = null), (this.className = "hex"));
            }),
            this.toHexDOM_sub(t, "tag", this.stream, this.posStart(), this.posStart() + 1),
            this.toHexDOM_sub(t, 0 <= this.length ? "dlen" : "ulen", this.stream, this.posStart() + 1, this.posContent()),
            null === this.sub)
          )
            t.appendChild(Te(this.stream.hexDump(this.posContent(), this.posEnd())));
          else if (0 < this.sub.length) {
            var n = this.sub[0],
              r = this.sub[this.sub.length - 1];
            this.toHexDOM_sub(t, "intro", this.stream, this.posContent(), n.posStart());
            for (var i = 0, s = this.sub.length; i < s; ++i) t.appendChild(this.sub[i].toHexDOM(e));
            this.toHexDOM_sub(t, "outro", this.stream, r.posEnd(), this.posEnd());
          }
          return t;
        },
      },
      {
        key: "toHexString",
        value: function(t) {
          return this.stream.hexDump(this.posStart(), this.posEnd(), !0);
        },
      },
    ]),
    Ae);
  function Ae(t, e, n, r, i) {
    p(this, Ae), (this.stream = t), (this.header = e), (this.length = n), (this.tag = r), (this.sub = i);
  }
  (Ee.decodeLength = function(t) {
    var e = t.get(),
      n = 127 & e;
    if (n == e) return n;
    if (3 < n) throw "Length over 24 bits not supported at position " + (t.pos - 1);
    if (0 == n) return -1;
    for (var r = (e = 0); r < n; ++r) e = (e << 8) | t.get();
    return e;
  }),
    (Ee.hasContent = function(t, e, n) {
      if (32 & t) return !0;
      if (t < 3 || 4 < t) return !1;
      var r = new _e(n);
      if ((3 == t && r.get(), (r.get() >> 6) & 1)) return !1;
      try {
        var i = Ee.decodeLength(r);
        return r.pos - n.pos + i == e;
      } catch (t) {
        return !1;
      }
    }),
    (Ee.decode = function(t) {
      t instanceof _e || (t = new _e(t, 0));
      var e = new _e(t),
        n = t.get(),
        r = Ee.decodeLength(t),
        i = t.pos - e.pos,
        s = null;
      if (Ee.hasContent(n, r, t)) {
        var a = t.pos;
        if ((3 == n && t.get(), (s = []), 0 <= r)) {
          for (var o = a + r; t.pos < o; ) s[s.length] = Ee.decode(t);
          if (t.pos != o) throw "Content size is not correct for container starting at offset " + a;
        } else
          try {
            for (;;) {
              var u = Ee.decode(t);
              if (0 === u.tag) break;
              s[s.length] = u;
            }
            r = a - t.pos;
          } catch (t) {
            throw "Exception while decoding undefined length content: " + t;
          }
      } else t.pos += r;
      return new Ee(e, i, r, n, s);
    }),
    (Ee.test = function() {
      for (
        var t = [
            { value: [39], expected: 39 },
            { value: [129, 201], expected: 201 },
            { value: [131, 254, 220, 186], expected: 16702650 },
          ],
          e = 0,
          n = t.length;
        e < n;
        ++e
      ) {
        var r = new _e(t[e].value, 0),
          i = Ee.decodeLength(r);
        i != t[e].expected && document.write("In test[" + e + "] expected " + t[e].expected + " got " + i + "\n");
      }
    });
  var De = function t() {
    p(this, t), (this.i = 0), (this.j = 0), (this.S = []);
  };
  (De.prototype.init = function(t) {
    var e, n, r;
    for (e = 0; e < 256; ++e) this.S[e] = e;
    for (e = n = 0; e < 256; ++e) (n = (n + this.S[e] + t[e % t.length]) & 255), (r = this.S[e]), (this.S[e] = this.S[n]), (this.S[n] = r);
    (this.i = 0), (this.j = 0);
  }),
    (De.prototype.next = function() {
      var t;
      return (
        (this.i = (this.i + 1) & 255), (this.j = (this.j + this.S[this.i]) & 255), (t = this.S[this.i]), (this.S[this.i] = this.S[this.j]), (this.S[this.j] = t), this.S[(t + this.S[this.i]) & 255]
      );
    });
  var Pe,
    Re,
    Oe,
    Be = 256;
  if (null == Re) {
    var Ce;
    if (((Re = new Array()), (Oe = 0), window.crypto && window.crypto.getRandomValues)) {
      var Ie = new Uint32Array(256);
      for (window.crypto.getRandomValues(Ie), Ce = 0; Ce < Ie.length; ++Ce) Re[Oe++] = 255 & Ie[Ce];
    }
    var Ne = function t(e) {
      if (((this.count = this.count || 0), 256 <= this.count || Be <= Oe))
        window.removeEventListener ? window.removeEventListener("mousemove", t, !1) : window.detachEvent && window.detachEvent("onmousemove", t);
      else
        try {
          var n = e.x + e.y;
          (Re[Oe++] = 255 & n), (this.count += 1);
        } catch (t) {}
    };
    window.addEventListener ? window.addEventListener("mousemove", Ne, !1) : window.attachEvent && window.attachEvent("onmousemove", Ne);
  }
  function Ue() {
    if (null == Pe) {
      for (Pe = new De(); Oe < Be; ) {
        var t = Math.floor(65536 * Math.random());
        Re[Oe++] = 255 & t;
      }
      for (Pe.init(Re), Oe = 0; Oe < Re.length; ++Oe) Re[Oe] = 0;
      Oe = 0;
    }
    return Pe.next();
  }
  var Le,
    Me = function t() {
      p(this, t);
    };
  Me.prototype.nextBytes = function(t) {
    var e;
    for (e = 0; e < t.length; ++e) t[e] = Ue();
  };
  var Ve = function t(e, n, r) {
    p(this, t), null != e && ("number" == typeof e ? this.fromNumber(e, n, r) : null == n && "string" != typeof e ? this.fromString(e, 256) : this.fromString(e, n));
  };
  function qe() {
    return new Ve(null);
  }
  (Le =
    "Microsoft Internet Explorer" == navigator.appName
      ? ((Ve.prototype.am = function(t, e, n, r, i, s) {
          for (var a = 32767 & e, o = e >> 15; 0 <= --s; ) {
            var u = 32767 & this[t],
              h = this[t++] >> 15,
              c = o * u + h * a;
            (i = ((u = a * u + ((32767 & c) << 15) + n[r] + (1073741823 & i)) >>> 30) + (c >>> 15) + o * h + (i >>> 30)), (n[r++] = 1073741823 & u);
          }
          return i;
        }),
        30)
      : "Netscape" != navigator.appName
      ? ((Ve.prototype.am = function(t, e, n, r, i, s) {
          for (; 0 <= --s; ) {
            var a = e * this[t++] + n[r] + i;
            (i = Math.floor(a / 67108864)), (n[r++] = 67108863 & a);
          }
          return i;
        }),
        26)
      : ((Ve.prototype.am = function(t, e, n, r, i, s) {
          for (var a = 16383 & e, o = e >> 14; 0 <= --s; ) {
            var u = 16383 & this[t],
              h = this[t++] >> 14,
              c = o * u + h * a;
            (i = ((u = a * u + ((16383 & c) << 14) + n[r] + i) >> 28) + (c >> 14) + o * h), (n[r++] = 268435455 & u);
          }
          return i;
        }),
        28)),
    (Ve.prototype.DB = Le),
    (Ve.prototype.DM = (1 << Le) - 1),
    (Ve.prototype.DV = 1 << Le);
  (Ve.prototype.FV = Math.pow(2, 52)), (Ve.prototype.F1 = 52 - Le), (Ve.prototype.F2 = 2 * Le - 52);
  var He,
    Fe,
    je = "0123456789abcdefghijklmnopqrstuvwxyz",
    ze = [];
  for (He = "0".charCodeAt(0), Fe = 0; Fe <= 9; ++Fe) ze[He++] = Fe;
  for (He = "a".charCodeAt(0), Fe = 10; Fe < 36; ++Fe) ze[He++] = Fe;
  for (He = "A".charCodeAt(0), Fe = 10; Fe < 36; ++Fe) ze[He++] = Fe;
  function Ke(t) {
    return je.charAt(t);
  }
  function Ge(t, e) {
    var n = ze[t.charCodeAt(e)];
    return null == n ? -1 : n;
  }
  function We(t) {
    var e = qe();
    return e.fromInt(t), e;
  }
  function Ze(t) {
    var e,
      n = 1;
    return (
      0 != (e = t >>> 16) && ((t = e), (n += 16)),
      0 != (e = t >> 8) && ((t = e), (n += 8)),
      0 != (e = t >> 4) && ((t = e), (n += 4)),
      0 != (e = t >> 2) && ((t = e), (n += 2)),
      0 != (e = t >> 1) && ((t = e), (n += 1)),
      n
    );
  }
  function Ye(t) {
    p(this, Ye), (this.m = t);
  }
  (Ye.prototype.convert = function(t) {
    return t.s < 0 || 0 <= t.compareTo(this.m) ? t.mod(this.m) : t;
  }),
    (Ye.prototype.revert = function(t) {
      return t;
    }),
    (Ye.prototype.reduce = function(t) {
      t.divRemTo(this.m, null, t);
    }),
    (Ye.prototype.mulTo = function(t, e, n) {
      t.multiplyTo(e, n), this.reduce(n);
    }),
    (Ye.prototype.sqrTo = function(t, e) {
      t.squareTo(e), this.reduce(e);
    });
  function Qe(t) {
    p(this, Qe), (this.m = t), (this.mp = t.invDigit()), (this.mpl = 32767 & this.mp), (this.mph = this.mp >> 15), (this.um = (1 << (t.DB - 15)) - 1), (this.mt2 = 2 * t.t);
  }
  function $e(t, e) {
    return t & e;
  }
  function Je(t, e) {
    return t | e;
  }
  function Xe(t, e) {
    return t ^ e;
  }
  function tn(t, e) {
    return t & ~e;
  }
  function en(t) {
    if (0 == t) return -1;
    var e = 0;
    return 0 == (65535 & t) && ((t >>= 16), (e += 16)), 0 == (255 & t) && ((t >>= 8), (e += 8)), 0 == (15 & t) && ((t >>= 4), (e += 4)), 0 == (3 & t) && ((t >>= 2), (e += 2)), 0 == (1 & t) && ++e, e;
  }
  function nn(t) {
    for (var e = 0; 0 != t; ) (t &= t - 1), ++e;
    return e;
  }
  function rn() {}
  function sn(t) {
    return t;
  }
  function an(t) {
    (this.r2 = qe()), (this.q3 = qe()), Ve.ONE.dlShiftTo(2 * t.t, this.r2), (this.mu = this.r2.divide(t)), (this.m = t);
  }
  (Qe.prototype.convert = function(t) {
    var e = qe();
    return t.abs().dlShiftTo(this.m.t, e), e.divRemTo(this.m, null, e), t.s < 0 && 0 < e.compareTo(Ve.ZERO) && this.m.subTo(e, e), e;
  }),
    (Qe.prototype.revert = function(t) {
      var e = qe();
      return t.copyTo(e), this.reduce(e), e;
    }),
    (Qe.prototype.reduce = function(t) {
      for (; t.t <= this.mt2; ) t[t.t++] = 0;
      for (var e = 0; e < this.m.t; ++e) {
        var n = 32767 & t[e],
          r = (n * this.mpl + (((n * this.mph + (t[e] >> 15) * this.mpl) & this.um) << 15)) & t.DM;
        for (t[(n = e + this.m.t)] += this.m.am(0, r, t, e, 0, this.m.t); t[n] >= t.DV; ) (t[n] -= t.DV), t[++n]++;
      }
      t.clamp(), t.drShiftTo(this.m.t, t), 0 <= t.compareTo(this.m) && t.subTo(this.m, t);
    }),
    (Qe.prototype.mulTo = function(t, e, n) {
      t.multiplyTo(e, n), this.reduce(n);
    }),
    (Qe.prototype.sqrTo = function(t, e) {
      t.squareTo(e), this.reduce(e);
    }),
    (Ve.prototype.copyTo = function(t) {
      for (var e = this.t - 1; 0 <= e; --e) t[e] = this[e];
      (t.t = this.t), (t.s = this.s);
    }),
    (Ve.prototype.fromInt = function(t) {
      (this.t = 1), (this.s = t < 0 ? -1 : 0), 0 < t ? (this[0] = t) : t < -1 ? (this[0] = t + this.DV) : (this.t = 0);
    }),
    (Ve.prototype.fromString = function(t, e) {
      var n;
      if (16 == e) n = 4;
      else if (8 == e) n = 3;
      else if (256 == e) n = 8;
      else if (2 == e) n = 1;
      else if (32 == e) n = 5;
      else {
        if (4 != e) return void this.fromRadix(t, e);
        n = 2;
      }
      (this.t = 0), (this.s = 0);
      for (var r = t.length, i = !1, s = 0; 0 <= --r; ) {
        var a = 8 == n ? 255 & t[r] : Ge(t, r);
        a < 0
          ? "-" == t.charAt(r) && (i = !0)
          : ((i = !1),
            0 == s ? (this[this.t++] = a) : s + n > this.DB ? ((this[this.t - 1] |= (a & ((1 << (this.DB - s)) - 1)) << s), (this[this.t++] = a >> (this.DB - s))) : (this[this.t - 1] |= a << s),
            (s += n) >= this.DB && (s -= this.DB));
      }
      8 == n && 0 != (128 & t[0]) && ((this.s = -1), 0 < s && (this[this.t - 1] |= ((1 << (this.DB - s)) - 1) << s)), this.clamp(), i && Ve.ZERO.subTo(this, this);
    }),
    (Ve.prototype.clamp = function() {
      for (var t = this.s & this.DM; 0 < this.t && this[this.t - 1] == t; ) --this.t;
    }),
    (Ve.prototype.dlShiftTo = function(t, e) {
      var n;
      for (n = this.t - 1; 0 <= n; --n) e[n + t] = this[n];
      for (n = t - 1; 0 <= n; --n) e[n] = 0;
      (e.t = this.t + t), (e.s = this.s);
    }),
    (Ve.prototype.drShiftTo = function(t, e) {
      for (var n = t; n < this.t; ++n) e[n - t] = this[n];
      (e.t = Math.max(this.t - t, 0)), (e.s = this.s);
    }),
    (Ve.prototype.lShiftTo = function(t, e) {
      var n,
        r = t % this.DB,
        i = this.DB - r,
        s = (1 << i) - 1,
        a = Math.floor(t / this.DB),
        o = (this.s << r) & this.DM;
      for (n = this.t - 1; 0 <= n; --n) (e[n + a + 1] = (this[n] >> i) | o), (o = (this[n] & s) << r);
      for (n = a - 1; 0 <= n; --n) e[n] = 0;
      (e[a] = o), (e.t = this.t + a + 1), (e.s = this.s), e.clamp();
    }),
    (Ve.prototype.rShiftTo = function(t, e) {
      e.s = this.s;
      var n = Math.floor(t / this.DB);
      if (n >= this.t) e.t = 0;
      else {
        var r = t % this.DB,
          i = this.DB - r,
          s = (1 << r) - 1;
        e[0] = this[n] >> r;
        for (var a = n + 1; a < this.t; ++a) (e[a - n - 1] |= (this[a] & s) << i), (e[a - n] = this[a] >> r);
        0 < r && (e[this.t - n - 1] |= (this.s & s) << i), (e.t = this.t - n), e.clamp();
      }
    }),
    (Ve.prototype.subTo = function(t, e) {
      for (var n = 0, r = 0, i = Math.min(t.t, this.t); n < i; ) (r += this[n] - t[n]), (e[n++] = r & this.DM), (r >>= this.DB);
      if (t.t < this.t) {
        for (r -= t.s; n < this.t; ) (r += this[n]), (e[n++] = r & this.DM), (r >>= this.DB);
        r += this.s;
      } else {
        for (r += this.s; n < t.t; ) (r -= t[n]), (e[n++] = r & this.DM), (r >>= this.DB);
        r -= t.s;
      }
      (e.s = r < 0 ? -1 : 0), r < -1 ? (e[n++] = this.DV + r) : 0 < r && (e[n++] = r), (e.t = n), e.clamp();
    }),
    (Ve.prototype.multiplyTo = function(t, e) {
      var n = this.abs(),
        r = t.abs(),
        i = n.t;
      for (e.t = i + r.t; 0 <= --i; ) e[i] = 0;
      for (i = 0; i < r.t; ++i) e[i + n.t] = n.am(0, r[i], e, i, 0, n.t);
      (e.s = 0), e.clamp(), this.s != t.s && Ve.ZERO.subTo(e, e);
    }),
    (Ve.prototype.squareTo = function(t) {
      for (var e = this.abs(), n = (t.t = 2 * e.t); 0 <= --n; ) t[n] = 0;
      for (n = 0; n < e.t - 1; ++n) {
        var r = e.am(n, e[n], t, 2 * n, 0, 1);
        (t[n + e.t] += e.am(n + 1, 2 * e[n], t, 2 * n + 1, r, e.t - n - 1)) >= e.DV && ((t[n + e.t] -= e.DV), (t[n + e.t + 1] = 1));
      }
      0 < t.t && (t[t.t - 1] += e.am(n, e[n], t, 2 * n, 0, 1)), (t.s = 0), t.clamp();
    }),
    (Ve.prototype.divRemTo = function(t, e, n) {
      var r = t.abs();
      if (!(r.t <= 0)) {
        var i = this.abs();
        if (i.t < r.t) return null != e && e.fromInt(0), void (null != n && this.copyTo(n));
        null == n && (n = qe());
        var s = qe(),
          a = this.s,
          o = t.s,
          u = this.DB - Ze(r[r.t - 1]);
        0 < u ? (r.lShiftTo(u, s), i.lShiftTo(u, n)) : (r.copyTo(s), i.copyTo(n));
        var h = s.t,
          c = s[h - 1];
        if (0 != c) {
          var l = c * (1 << this.F1) + (1 < h ? s[h - 2] >> this.F2 : 0),
            d = this.FV / l,
            f = (1 << this.F1) / l,
            p = 1 << this.F2,
            v = n.t,
            y = v - h,
            g = null == e ? qe() : e;
          for (s.dlShiftTo(y, g), 0 <= n.compareTo(g) && ((n[n.t++] = 1), n.subTo(g, n)), Ve.ONE.dlShiftTo(h, g), g.subTo(s, s); s.t < h; ) s[s.t++] = 0;
          for (; 0 <= --y; ) {
            var m = n[--v] == c ? this.DM : Math.floor(n[v] * d + (n[v - 1] + p) * f);
            if ((n[v] += s.am(0, m, n, y, 0, h)) < m) for (s.dlShiftTo(y, g), n.subTo(g, n); n[v] < --m; ) n.subTo(g, n);
          }
          null != e && (n.drShiftTo(h, e), a != o && Ve.ZERO.subTo(e, e)), (n.t = h), n.clamp(), 0 < u && n.rShiftTo(u, n), a < 0 && Ve.ZERO.subTo(n, n);
        }
      }
    }),
    (Ve.prototype.invDigit = function() {
      if (this.t < 1) return 0;
      var t = this[0];
      if (0 == (1 & t)) return 0;
      var e = 3 & t;
      return 0 < (e = ((e = ((e = ((e = (e * (2 - (15 & t) * e)) & 15) * (2 - (255 & t) * e)) & 255) * (2 - (((65535 & t) * e) & 65535))) & 65535) * (2 - ((t * e) % this.DV))) % this.DV)
        ? this.DV - e
        : -e;
    }),
    (Ve.prototype.isEven = function() {
      return 0 == (0 < this.t ? 1 & this[0] : this.s);
    }),
    (Ve.prototype.exp = function(t, e) {
      if (4294967295 < t || t < 1) return Ve.ONE;
      var n = qe(),
        r = qe(),
        i = e.convert(this),
        s = Ze(t) - 1;
      for (i.copyTo(n); 0 <= --s; )
        if ((e.sqrTo(n, r), 0 < (t & (1 << s)))) e.mulTo(r, i, n);
        else {
          var a = n;
          (n = r), (r = a);
        }
      return e.revert(n);
    }),
    (Ve.prototype.toString = function(t) {
      if (this.s < 0) return "-" + this.negate().toString(t);
      var e;
      if (16 == t) e = 4;
      else if (8 == t) e = 3;
      else if (2 == t) e = 1;
      else if (32 == t) e = 5;
      else {
        if (4 != t) return this.toRadix(t);
        e = 2;
      }
      var n,
        r = (1 << e) - 1,
        i = !1,
        s = "",
        a = this.t,
        o = this.DB - ((a * this.DB) % e);
      if (0 < a--)
        for (o < this.DB && 0 < (n = this[a] >> o) && ((i = !0), (s = Ke(n))); 0 <= a; )
          o < e ? ((n = (this[a] & ((1 << o) - 1)) << (e - o)), (n |= this[--a] >> (o += this.DB - e))) : ((n = (this[a] >> (o -= e)) & r), o <= 0 && ((o += this.DB), --a)),
            0 < n && (i = !0),
            i && (s += Ke(n));
      return i ? s : "0";
    }),
    (Ve.prototype.negate = function() {
      var t = qe();
      return Ve.ZERO.subTo(this, t), t;
    }),
    (Ve.prototype.abs = function() {
      return this.s < 0 ? this.negate() : this;
    }),
    (Ve.prototype.compareTo = function(t) {
      var e = this.s - t.s;
      if (0 != e) return e;
      var n = this.t;
      if (0 != (e = n - t.t)) return this.s < 0 ? -e : e;
      for (; 0 <= --n; ) if (0 != (e = this[n] - t[n])) return e;
      return 0;
    }),
    (Ve.prototype.bitLength = function() {
      return this.t <= 0 ? 0 : this.DB * (this.t - 1) + Ze(this[this.t - 1] ^ (this.s & this.DM));
    }),
    (Ve.prototype.mod = function(t) {
      var e = qe();
      return this.abs().divRemTo(t, null, e), this.s < 0 && 0 < e.compareTo(Ve.ZERO) && t.subTo(e, e), e;
    }),
    (Ve.prototype.modPowInt = function(t, e) {
      var n;
      return (n = t < 256 || e.isEven() ? new Ye(e) : new Qe(e)), this.exp(t, n);
    }),
    (Ve.ZERO = We(0)),
    (Ve.ONE = We(1)),
    (rn.prototype.convert = sn),
    (rn.prototype.revert = sn),
    (rn.prototype.mulTo = function(t, e, n) {
      t.multiplyTo(e, n);
    }),
    (rn.prototype.sqrTo = function(t, e) {
      t.squareTo(e);
    }),
    (an.prototype.convert = function(t) {
      if (t.s < 0 || t.t > 2 * this.m.t) return t.mod(this.m);
      if (t.compareTo(this.m) < 0) return t;
      var e = qe();
      return t.copyTo(e), this.reduce(e), e;
    }),
    (an.prototype.revert = function(t) {
      return t;
    }),
    (an.prototype.reduce = function(t) {
      for (
        t.drShiftTo(this.m.t - 1, this.r2),
          t.t > this.m.t + 1 && ((t.t = this.m.t + 1), t.clamp()),
          this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3),
          this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
        t.compareTo(this.r2) < 0;

      )
        t.dAddOffset(1, this.m.t + 1);
      for (t.subTo(this.r2, t); 0 <= t.compareTo(this.m); ) t.subTo(this.m, t);
    }),
    (an.prototype.mulTo = function(t, e, n) {
      t.multiplyTo(e, n), this.reduce(n);
    }),
    (an.prototype.sqrTo = function(t, e) {
      t.squareTo(e), this.reduce(e);
    });
  var on = [
      2,
      3,
      5,
      7,
      11,
      13,
      17,
      19,
      23,
      29,
      31,
      37,
      41,
      43,
      47,
      53,
      59,
      61,
      67,
      71,
      73,
      79,
      83,
      89,
      97,
      101,
      103,
      107,
      109,
      113,
      127,
      131,
      137,
      139,
      149,
      151,
      157,
      163,
      167,
      173,
      179,
      181,
      191,
      193,
      197,
      199,
      211,
      223,
      227,
      229,
      233,
      239,
      241,
      251,
      257,
      263,
      269,
      271,
      277,
      281,
      283,
      293,
      307,
      311,
      313,
      317,
      331,
      337,
      347,
      349,
      353,
      359,
      367,
      373,
      379,
      383,
      389,
      397,
      401,
      409,
      419,
      421,
      431,
      433,
      439,
      443,
      449,
      457,
      461,
      463,
      467,
      479,
      487,
      491,
      499,
      503,
      509,
      521,
      523,
      541,
      547,
      557,
      563,
      569,
      571,
      577,
      587,
      593,
      599,
      601,
      607,
      613,
      617,
      619,
      631,
      641,
      643,
      647,
      653,
      659,
      661,
      673,
      677,
      683,
      691,
      701,
      709,
      719,
      727,
      733,
      739,
      743,
      751,
      757,
      761,
      769,
      773,
      787,
      797,
      809,
      811,
      821,
      823,
      827,
      829,
      839,
      853,
      857,
      859,
      863,
      877,
      881,
      883,
      887,
      907,
      911,
      919,
      929,
      937,
      941,
      947,
      953,
      967,
      971,
      977,
      983,
      991,
      997,
    ],
    un = (1 << 26) / on[on.length - 1];
  function hn(t, e) {
    return new Ve(t, e);
  }
  (Ve.prototype.chunkSize = function(t) {
    return Math.floor((Math.LN2 * this.DB) / Math.log(t));
  }),
    (Ve.prototype.toRadix = function(t) {
      if ((null == t && (t = 10), 0 == this.signum() || t < 2 || 36 < t)) return "0";
      var e = this.chunkSize(t),
        n = Math.pow(t, e),
        r = We(n),
        i = qe(),
        s = qe(),
        a = "";
      for (this.divRemTo(r, i, s); 0 < i.signum(); ) (a = (n + s.intValue()).toString(t).substr(1) + a), i.divRemTo(r, i, s);
      return s.intValue().toString(t) + a;
    }),
    (Ve.prototype.fromRadix = function(t, e) {
      this.fromInt(0), null == e && (e = 10);
      for (var n = this.chunkSize(e), r = Math.pow(e, n), i = !1, s = 0, a = 0, o = 0; o < t.length; ++o) {
        var u = Ge(t, o);
        u < 0 ? "-" == t.charAt(o) && 0 == this.signum() && (i = !0) : ((a = e * a + u), ++s >= n && (this.dMultiply(r), this.dAddOffset(a, 0), (a = s = 0)));
      }
      0 < s && (this.dMultiply(Math.pow(e, s)), this.dAddOffset(a, 0)), i && Ve.ZERO.subTo(this, this);
    }),
    (Ve.prototype.fromNumber = function(t, e, n) {
      if ("number" == typeof e)
        if (t < 2) this.fromInt(1);
        else
          for (this.fromNumber(t, n), this.testBit(t - 1) || this.bitwiseTo(Ve.ONE.shiftLeft(t - 1), Je, this), this.isEven() && this.dAddOffset(1, 0); !this.isProbablePrime(e); )
            this.dAddOffset(2, 0), this.bitLength() > t && this.subTo(Ve.ONE.shiftLeft(t - 1), this);
      else {
        var r = [],
          i = 7 & t;
        (r.length = 1 + (t >> 3)), e.nextBytes(r), 0 < i ? (r[0] &= (1 << i) - 1) : (r[0] = 0), this.fromString(r, 256);
      }
    }),
    (Ve.prototype.bitwiseTo = function(t, e, n) {
      var r,
        i,
        s = Math.min(t.t, this.t);
      for (r = 0; r < s; ++r) n[r] = e(this[r], t[r]);
      if (t.t < this.t) {
        for (i = t.s & this.DM, r = s; r < this.t; ++r) n[r] = e(this[r], i);
        n.t = this.t;
      } else {
        for (i = this.s & this.DM, r = s; r < t.t; ++r) n[r] = e(i, t[r]);
        n.t = t.t;
      }
      (n.s = e(this.s, t.s)), n.clamp();
    }),
    (Ve.prototype.changeBit = function(t, e) {
      var n = Ve.ONE.shiftLeft(t);
      return this.bitwiseTo(n, e, n), n;
    }),
    (Ve.prototype.addTo = function(t, e) {
      for (var n = 0, r = 0, i = Math.min(t.t, this.t); n < i; ) (r += this[n] + t[n]), (e[n++] = r & this.DM), (r >>= this.DB);
      if (t.t < this.t) {
        for (r += t.s; n < this.t; ) (r += this[n]), (e[n++] = r & this.DM), (r >>= this.DB);
        r += this.s;
      } else {
        for (r += this.s; n < t.t; ) (r += t[n]), (e[n++] = r & this.DM), (r >>= this.DB);
        r += t.s;
      }
      (e.s = r < 0 ? -1 : 0), 0 < r ? (e[n++] = r) : r < -1 && (e[n++] = this.DV + r), (e.t = n), e.clamp();
    }),
    (Ve.prototype.dMultiply = function(t) {
      (this[this.t] = this.am(0, t - 1, this, 0, 0, this.t)), ++this.t, this.clamp();
    }),
    (Ve.prototype.dAddOffset = function(t, e) {
      if (0 != t) {
        for (; this.t <= e; ) this[this.t++] = 0;
        for (this[e] += t; this[e] >= this.DV; ) (this[e] -= this.DV), ++e >= this.t && (this[this.t++] = 0), ++this[e];
      }
    }),
    (Ve.prototype.multiplyLowerTo = function(t, e, n) {
      var r,
        i = Math.min(this.t + t.t, e);
      for (n.s = 0, n.t = i; 0 < i; ) n[--i] = 0;
      for (r = n.t - this.t; i < r; ++i) n[i + this.t] = this.am(0, t[i], n, i, 0, this.t);
      for (r = Math.min(t.t, e); i < r; ++i) this.am(0, t[i], n, i, 0, e - i);
      n.clamp();
    }),
    (Ve.prototype.multiplyUpperTo = function(t, e, n) {
      --e;
      var r = (n.t = this.t + t.t - e);
      for (n.s = 0; 0 <= --r; ) n[r] = 0;
      for (r = Math.max(e - this.t, 0); r < t.t; ++r) n[this.t + r - e] = this.am(e - r, t[r], n, 0, 0, this.t + r - e);
      n.clamp(), n.drShiftTo(1, n);
    }),
    (Ve.prototype.modInt = function(t) {
      if (t <= 0) return 0;
      var e = this.DV % t,
        n = this.s < 0 ? t - 1 : 0;
      if (0 < this.t)
        if (0 == e) n = this[0] % t;
        else for (var r = this.t - 1; 0 <= r; --r) n = (e * n + this[r]) % t;
      return n;
    }),
    (Ve.prototype.millerRabin = function(t) {
      var e = this.subtract(Ve.ONE),
        n = e.getLowestSetBit();
      if (n <= 0) return !1;
      var r = e.shiftRight(n);
      on.length < (t = (t + 1) >> 1) && (t = on.length);
      for (var i = qe(), s = 0; s < t; ++s) {
        i.fromInt(on[Math.floor(Math.random() * on.length)]);
        var a = i.modPow(r, this);
        if (0 != a.compareTo(Ve.ONE) && 0 != a.compareTo(e)) {
          for (var o = 1; o++ < n && 0 != a.compareTo(e); ) if (0 == (a = a.modPowInt(2, this)).compareTo(Ve.ONE)) return !1;
          if (0 != a.compareTo(e)) return !1;
        }
      }
      return !0;
    }),
    (Ve.prototype.clone = function() {
      var t = qe();
      return this.copyTo(t), t;
    }),
    (Ve.prototype.intValue = function() {
      if (this.s < 0) {
        if (1 == this.t) return this[0] - this.DV;
        if (0 == this.t) return -1;
      } else {
        if (1 == this.t) return this[0];
        if (0 == this.t) return 0;
      }
      return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];
    }),
    (Ve.prototype.byteValue = function() {
      return 0 == this.t ? this.s : (this[0] << 24) >> 24;
    }),
    (Ve.prototype.shortValue = function() {
      return 0 == this.t ? this.s : (this[0] << 16) >> 16;
    }),
    (Ve.prototype.signum = function() {
      return this.s < 0 ? -1 : this.t <= 0 || (1 == this.t && this[0] <= 0) ? 0 : 1;
    }),
    (Ve.prototype.toByteArray = function() {
      var t = this.t,
        e = [];
      e[0] = this.s;
      var n,
        r = this.DB - ((t * this.DB) % 8),
        i = 0;
      if (0 < t--)
        for (r < this.DB && (n = this[t] >> r) != (this.s & this.DM) >> r && (e[i++] = n | (this.s << (this.DB - r))); 0 <= t; )
          r < 8 ? ((n = (this[t] & ((1 << r) - 1)) << (8 - r)), (n |= this[--t] >> (r += this.DB - 8))) : ((n = (this[t] >> (r -= 8)) & 255), r <= 0 && ((r += this.DB), --t)),
            0 != (128 & n) && (n |= -256),
            0 == i && (128 & this.s) != (128 & n) && ++i,
            (0 < i || n != this.s) && (e[i++] = n);
      return e;
    }),
    (Ve.prototype.equals = function(t) {
      return 0 == this.compareTo(t);
    }),
    (Ve.prototype.min = function(t) {
      return this.compareTo(t) < 0 ? this : t;
    }),
    (Ve.prototype.max = function(t) {
      return 0 < this.compareTo(t) ? this : t;
    }),
    (Ve.prototype.and = function(t) {
      var e = qe();
      return this.bitwiseTo(t, $e, e), e;
    }),
    (Ve.prototype.or = function(t) {
      var e = qe();
      return this.bitwiseTo(t, Je, e), e;
    }),
    (Ve.prototype.xor = function(t) {
      var e = qe();
      return this.bitwiseTo(t, Xe, e), e;
    }),
    (Ve.prototype.andNot = function(t) {
      var e = qe();
      return this.bitwiseTo(t, tn, e), e;
    }),
    (Ve.prototype.not = function() {
      for (var t = qe(), e = 0; e < this.t; ++e) t[e] = this.DM & ~this[e];
      return (t.t = this.t), (t.s = ~this.s), t;
    }),
    (Ve.prototype.shiftLeft = function(t) {
      var e = qe();
      return t < 0 ? this.rShiftTo(-t, e) : this.lShiftTo(t, e), e;
    }),
    (Ve.prototype.shiftRight = function(t) {
      var e = qe();
      return t < 0 ? this.lShiftTo(-t, e) : this.rShiftTo(t, e), e;
    }),
    (Ve.prototype.getLowestSetBit = function() {
      for (var t = 0; t < this.t; ++t) if (0 != this[t]) return t * this.DB + en(this[t]);
      return this.s < 0 ? this.t * this.DB : -1;
    }),
    (Ve.prototype.bitCount = function() {
      for (var t = 0, e = this.s & this.DM, n = 0; n < this.t; ++n) t += nn(this[n] ^ e);
      return t;
    }),
    (Ve.prototype.testBit = function(t) {
      var e = Math.floor(t / this.DB);
      return e >= this.t ? 0 != this.s : 0 != (this[e] & (1 << t % this.DB));
    }),
    (Ve.prototype.setBit = function(t) {
      return this.changeBit(t, Je);
    }),
    (Ve.prototype.clearBit = function(t) {
      return this.changeBit(t, tn);
    }),
    (Ve.prototype.flipBit = function(t) {
      return this.changeBit(t, Xe);
    }),
    (Ve.prototype.add = function(t) {
      var e = qe();
      return this.addTo(t, e), e;
    }),
    (Ve.prototype.subtract = function(t) {
      var e = qe();
      return this.subTo(t, e), e;
    }),
    (Ve.prototype.multiply = function(t) {
      var e = qe();
      return this.multiplyTo(t, e), e;
    }),
    (Ve.prototype.divide = function(t) {
      var e = qe();
      return this.divRemTo(t, e, null), e;
    }),
    (Ve.prototype.remainder = function(t) {
      var e = qe();
      return this.divRemTo(t, null, e), e;
    }),
    (Ve.prototype.divideAndRemainder = function(t) {
      var e = qe(),
        n = qe();
      return this.divRemTo(t, e, n), new Array(e, n);
    }),
    (Ve.prototype.modPow = function(t, e) {
      var n,
        r,
        i = t.bitLength(),
        s = We(1);
      if (i <= 0) return s;
      (n = i < 18 ? 1 : i < 48 ? 3 : i < 144 ? 4 : i < 768 ? 5 : 6), (r = i < 8 ? new Ye(e) : e.isEven() ? new an(e) : new Qe(e));
      var a = [],
        o = 3,
        u = n - 1,
        h = (1 << n) - 1;
      if (((a[1] = r.convert(this)), 1 < n)) {
        var c = qe();
        for (r.sqrTo(a[1], c); o <= h; ) (a[o] = qe()), r.mulTo(c, a[o - 2], a[o]), (o += 2);
      }
      var l,
        d,
        f = t.t - 1,
        p = !0,
        v = qe();
      for (i = Ze(t[f]) - 1; 0 <= f; ) {
        for (u <= i ? (l = (t[f] >> (i - u)) & h) : ((l = (t[f] & ((1 << (i + 1)) - 1)) << (u - i)), 0 < f && (l |= t[f - 1] >> (this.DB + i - u))), o = n; 0 == (1 & l); ) (l >>= 1), --o;
        if (((i -= o) < 0 && ((i += this.DB), --f), p)) a[l].copyTo(s), (p = !1);
        else {
          for (; 1 < o; ) r.sqrTo(s, v), r.sqrTo(v, s), (o -= 2);
          0 < o ? r.sqrTo(s, v) : ((d = s), (s = v), (v = d)), r.mulTo(v, a[l], s);
        }
        for (; 0 <= f && 0 == (t[f] & (1 << i)); ) r.sqrTo(s, v), (d = s), (s = v), (v = d), --i < 0 && ((i = this.DB - 1), --f);
      }
      return r.revert(s);
    }),
    (Ve.prototype.modInverse = function(t) {
      var e = t.isEven();
      if ((this.isEven() && e) || 0 == t.signum()) return Ve.ZERO;
      for (var n = t.clone(), r = this.clone(), i = We(1), s = We(0), a = We(0), o = We(1); 0 != n.signum(); ) {
        for (; n.isEven(); ) n.rShiftTo(1, n), e ? ((i.isEven() && s.isEven()) || (i.addTo(this, i), s.subTo(t, s)), i.rShiftTo(1, i)) : s.isEven() || s.subTo(t, s), s.rShiftTo(1, s);
        for (; r.isEven(); ) r.rShiftTo(1, r), e ? ((a.isEven() && o.isEven()) || (a.addTo(this, a), o.subTo(t, o)), a.rShiftTo(1, a)) : o.isEven() || o.subTo(t, o), o.rShiftTo(1, o);
        0 <= n.compareTo(r) ? (n.subTo(r, n), e && i.subTo(a, i), s.subTo(o, s)) : (r.subTo(n, r), e && a.subTo(i, a), o.subTo(s, o));
      }
      return 0 != r.compareTo(Ve.ONE) ? Ve.ZERO : 0 <= o.compareTo(t) ? o.subtract(t) : o.signum() < 0 ? (o.addTo(t, o), o.signum() < 0 ? o.add(t) : o) : o;
    }),
    (Ve.prototype.pow = function(t) {
      return this.exp(t, new rn());
    }),
    (Ve.prototype.gcd = function(t) {
      var e = this.s < 0 ? this.negate() : this.clone(),
        n = t.s < 0 ? t.negate() : t.clone();
      if (e.compareTo(n) < 0) {
        var r = e;
        (e = n), (n = r);
      }
      var i = e.getLowestSetBit(),
        s = n.getLowestSetBit();
      if (s < 0) return e;
      for (i < s && (s = i), 0 < s && (e.rShiftTo(s, e), n.rShiftTo(s, n)); 0 < e.signum(); )
        0 < (i = e.getLowestSetBit()) && e.rShiftTo(i, e),
          0 < (i = n.getLowestSetBit()) && n.rShiftTo(i, n),
          0 <= e.compareTo(n) ? (e.subTo(n, e), e.rShiftTo(1, e)) : (n.subTo(e, n), n.rShiftTo(1, n));
      return 0 < s && n.lShiftTo(s, n), n;
    }),
    (Ve.prototype.isProbablePrime = function(t) {
      var e,
        n = this.abs();
      if (1 == n.t && n[0] <= on[on.length - 1]) {
        for (e = 0; e < on.length; ++e) if (n[0] == on[e]) return !0;
        return !1;
      }
      if (n.isEven()) return !1;
      for (e = 1; e < on.length; ) {
        for (var r = on[e], i = e + 1; i < on.length && r < un; ) r *= on[i++];
        for (r = n.modInt(r); e < i; ) if (r % on[e++] == 0) return !1;
      }
      return n.millerRabin(t);
    }),
    (Ve.prototype.square = function() {
      var t = qe();
      return this.squareTo(t), t;
    });
  function cn() {
    p(this, cn), (this.n = null), (this.e = 0), (this.d = null), (this.p = null), (this.q = null), (this.dmp1 = null), (this.dmq1 = null), (this.coeff = null);
  }
  (cn.prototype.doPublic = function(t) {
    return t.modPowInt(this.e, this.n);
  }),
    (cn.prototype.setPublic = function(t, e) {
      null != t && null != e && 0 < t.length && 0 < e.length ? ((this.n = hn(t, 16)), (this.e = parseInt(e, 16))) : console.error("Invalid RSA public key");
    }),
    (cn.prototype.encrypt = function(t) {
      var e = (function(t, e) {
        if (e < t.length + 11) return console.error("Message too long for RSA"), null;
        for (var n = [], r = t.length - 1; 0 <= r && 0 < e; ) {
          var i = t.charCodeAt(r--);
          i < 128
            ? (n[--e] = i)
            : 127 < i && i < 2048
            ? ((n[--e] = (63 & i) | 128), (n[--e] = (i >> 6) | 192))
            : ((n[--e] = (63 & i) | 128), (n[--e] = ((i >> 6) & 63) | 128), (n[--e] = (i >> 12) | 224));
        }
        n[--e] = 0;
        for (var s = new Me(), a = []; 2 < e; ) {
          for (a[0] = 0; 0 == a[0]; ) s.nextBytes(a);
          n[--e] = a[0];
        }
        return (n[--e] = 2), (n[--e] = 0), new Ve(n);
      })(t, (this.n.bitLength() + 7) >> 3);
      if (null == e) return null;
      var n = this.doPublic(e);
      if (null == n) return null;
      var r = n.toString(16);
      return 0 == (1 & r.length) ? r : "0" + r;
    }),
    (cn.prototype.doPrivate = function(t) {
      if (null == this.p || null == this.q) return t.modPow(this.d, this.n);
      for (var e = t.mod(this.p).modPow(this.dmp1, this.p), n = t.mod(this.q).modPow(this.dmq1, this.q); e.compareTo(n) < 0; ) e = e.add(this.p);
      return e
        .subtract(n)
        .multiply(this.coeff)
        .mod(this.p)
        .multiply(this.q)
        .add(n);
    }),
    (cn.prototype.setPrivate = function(t, e, n) {
      null != t && null != e && 0 < t.length && 0 < e.length ? ((this.n = hn(t, 16)), (this.e = parseInt(e, 16)), (this.d = hn(n, 16))) : console.error("Invalid RSA private key");
    }),
    (cn.prototype.setPrivateEx = function(t, e, n, r, i, s, a, o) {
      null != t && null != e && 0 < t.length && 0 < e.length
        ? ((this.n = hn(t, 16)),
          (this.e = parseInt(e, 16)),
          (this.d = hn(n, 16)),
          (this.p = hn(r, 16)),
          (this.q = hn(i, 16)),
          (this.dmp1 = hn(s, 16)),
          (this.dmq1 = hn(a, 16)),
          (this.coeff = hn(o, 16)))
        : console.error("Invalid RSA private key");
    }),
    (cn.prototype.generate = function(t, e) {
      var n = new Me(),
        r = t >> 1;
      this.e = parseInt(e, 16);
      for (var i = new Ve(e, 16); ; ) {
        for (
          ;
          (this.p = new Ve(t - r, 1, n)),
            0 !=
              this.p
                .subtract(Ve.ONE)
                .gcd(i)
                .compareTo(Ve.ONE) || !this.p.isProbablePrime(10);

        );
        for (
          ;
          (this.q = new Ve(r, 1, n)),
            0 !=
              this.q
                .subtract(Ve.ONE)
                .gcd(i)
                .compareTo(Ve.ONE) || !this.q.isProbablePrime(10);

        );
        if (this.p.compareTo(this.q) <= 0) {
          var s = this.p;
          (this.p = this.q), (this.q = s);
        }
        var a = this.p.subtract(Ve.ONE),
          o = this.q.subtract(Ve.ONE),
          u = a.multiply(o);
        if (0 == u.gcd(i).compareTo(Ve.ONE)) {
          (this.n = this.p.multiply(this.q)), (this.d = i.modInverse(u)), (this.dmp1 = this.d.mod(a)), (this.dmq1 = this.d.mod(o)), (this.coeff = this.q.modInverse(this.p));
          break;
        }
      }
    }),
    (cn.prototype.decrypt = function(t) {
      var e = hn(t, 16),
        n = this.doPrivate(e);
      return null == n
        ? null
        : (function(t, e) {
            for (var n = t.toByteArray(), r = 0; r < n.length && 0 == n[r]; ) ++r;
            if (n.length - r != e - 1 || 2 != n[r]) return null;
            for (++r; 0 != n[r]; ) if (++r >= n.length) return null;
            for (var i = ""; ++r < n.length; ) {
              var s = 255 & n[r];
              s < 128
                ? (i += String.fromCharCode(s))
                : 191 < s && s < 224
                ? ((i += String.fromCharCode(((31 & s) << 6) | (63 & n[r + 1]))), ++r)
                : ((i += String.fromCharCode(((15 & s) << 12) | ((63 & n[r + 1]) << 6) | (63 & n[r + 2]))), (r += 2));
            }
            return i;
          })(n, (this.n.bitLength() + 7) >> 3);
    });
  var ln = {},
    dn = void 0;
  (ln.decode = function(t) {
    var e;
    if (void 0 === dn) {
      var n = "= \f\n\r\t \u2028\u2029";
      for (dn = [], e = 0; e < 64; ++e) dn["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)] = e;
      for (e = 0; e < n.length; ++e) dn[n.charAt(e)] = -1;
    }
    var r = [],
      i = 0,
      s = 0;
    for (e = 0; e < t.length; ++e) {
      var a = t.charAt(e);
      if ("=" == a) break;
      if (-1 != (a = dn[a])) {
        if (void 0 === a) throw "Illegal character at offset " + e;
        (i |= a), 4 <= ++s ? ((r[r.length] = i >> 16), (r[r.length] = (i >> 8) & 255), (r[r.length] = 255 & i), (s = i = 0)) : (i <<= 6);
      }
    }
    switch (s) {
      case 1:
        throw "Base64 encoding incomplete: at least 2 bits missing";
      case 2:
        r[r.length] = i >> 10;
        break;
      case 3:
        (r[r.length] = i >> 16), (r[r.length] = (i >> 8) & 255);
    }
    return r;
  }),
    (ln.re = /-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/),
    (ln.unarmor = function(t) {
      var e = ln.re.exec(t);
      if (e)
        if (e[1]) t = e[1];
        else {
          if (!e[2]) throw "RegExp out of sync";
          t = e[2];
        }
      return ln.decode(t);
    });
  var fn = {},
    pn = void 0;
  fn.decode = function(t) {
    var e;
    if (void 0 === pn) {
      var n = "0123456789ABCDEF",
        r = " \f\n\r\t \u2028\u2029";
      for (pn = [], e = 0; e < 16; ++e) pn[n.charAt(e)] = e;
      for (n = n.toLowerCase(), e = 10; e < 16; ++e) pn[n.charAt(e)] = e;
      for (e = 0; e < r.length; ++e) pn[r.charAt(e)] = -1;
    }
    var i = [],
      s = 0,
      a = 0;
    for (e = 0; e < t.length; ++e) {
      var o = t.charAt(e);
      if ("=" == o) break;
      if (-1 != (o = pn[o])) {
        if (void 0 === o) throw "Illegal character at offset " + e;
        (s |= o), 2 <= ++a ? ((i[i.length] = s), (a = s = 0)) : (s <<= 4);
      }
    }
    if (a) throw "Hex encoding incomplete: 4 bits missing";
    return i;
  };
  var vn = {};
  vn.env = vn.env || {};
  var yn = vn,
    gn = Object.prototype,
    mn = ["toString", "valueOf"];
  (vn.env.parseUA = function(t) {
    function e(t) {
      var e = 0;
      return parseFloat(
        t.replace(/\./g, function() {
          return 1 == e++ ? "" : ".";
        }),
      );
    }
    var n,
      r = navigator,
      i = { ie: 0, opera: 0, gecko: 0, webkit: 0, chrome: 0, mobile: null, air: 0, ipad: 0, iphone: 0, ipod: 0, ios: null, android: 0, webos: 0, caja: r && r.cajaVersion, secure: !1, os: null },
      s = t || (navigator && navigator.userAgent),
      a = window && window.location,
      o = a && a.href;
    return (
      (i.secure = o && 0 === o.toLowerCase().indexOf("https")),
      s &&
        (/windows|win32/i.test(s) ? (i.os = "windows") : /macintosh/i.test(s) ? (i.os = "macintosh") : /rhino/i.test(s) && (i.os = "rhino"),
        /KHTML/.test(s) && (i.webkit = 1),
        (n = s.match(/AppleWebKit\/([^\s]*)/)) &&
          n[1] &&
          ((i.webkit = e(n[1])),
          / Mobile\//.test(s)
            ? ((i.mobile = "Apple"),
              (n = s.match(/OS ([^\s]*)/)) && n[1] && (n = e(n[1].replace("_", "."))),
              (i.ios = n),
              (i.ipad = i.ipod = i.iphone = 0),
              (n = s.match(/iPad|iPod|iPhone/)) && n[0] && (i[n[0].toLowerCase()] = i.ios))
            : ((n = s.match(/NokiaN[^\/]*|Android \d\.\d|webOS\/\d\.\d/)) && (i.mobile = n[0]),
              /webOS/.test(s) && ((i.mobile = "WebOS"), (n = s.match(/webOS\/([^\s]*);/)) && n[1] && (i.webos = e(n[1]))),
              / Android/.test(s) && ((i.mobile = "Android"), (n = s.match(/Android ([^\s]*);/)) && n[1] && (i.android = e(n[1])))),
          (n = s.match(/Chrome\/([^\s]*)/)) && n[1] ? (i.chrome = e(n[1])) : (n = s.match(/AdobeAIR\/([^\s]*)/)) && (i.air = n[0])),
        i.webkit ||
          ((n = s.match(/Opera[\s\/]([^\s]*)/)) && n[1]
            ? ((i.opera = e(n[1])), (n = s.match(/Version\/([^\s]*)/)) && n[1] && (i.opera = e(n[1])), (n = s.match(/Opera Mini[^;]*/)) && (i.mobile = n[0]))
            : (n = s.match(/MSIE\s([^;]*)/)) && n[1]
            ? (i.ie = e(n[1]))
            : (n = s.match(/Gecko\/([^\s]*)/)) && ((i.gecko = 1), (n = s.match(/rv:([^\s\)]*)/)) && n[1] && (i.gecko = e(n[1]))))),
      i
    );
  }),
    (vn.env.ua = vn.env.parseUA()),
    (vn.isFunction = function(t) {
      return "function" == typeof t || "[object Function]" === gn.toString.apply(t);
    }),
    (vn._IEEnumFix = vn.env.ua.ie
      ? function(t, e) {
          var n, r, i;
          for (n = 0; n < mn.length; n += 1) (i = e[(r = mn[n])]), yn.isFunction(i) && i != gn[r] && (t[r] = i);
        }
      : function() {}),
    (vn.extend = function(t, e, n) {
      if (!e || !t) throw new Error("extend failed, please check that all dependencies are included.");
      function r() {}
      var i;
      if (
        ((r.prototype = e.prototype), (t.prototype = new r()), ((t.prototype.constructor = t).superclass = e.prototype), e.prototype.constructor == gn.constructor && (e.prototype.constructor = e), n)
      ) {
        for (i in n) yn.hasOwnProperty(n, i) && (t.prototype[i] = n[i]);
        yn._IEEnumFix(t.prototype, n);
      }
    });
  var bn = {};
  (void 0 !== bn.asn1 && bn.asn1) || (bn.asn1 = {}),
    (bn.asn1.ASN1Util = new (function() {
      (this.integerToByteHex = function(t) {
        var e = t.toString(16);
        return e.length % 2 == 1 && (e = "0" + e), e;
      }),
        (this.bigIntToMinTwosComplementsHex = function(t) {
          var e = t.toString(16);
          if ("-" != e.substr(0, 1)) e.length % 2 == 1 ? (e = "0" + e) : e.match(/^[0-7]/) || (e = "00" + e);
          else {
            var n = e.substr(1).length;
            n % 2 == 1 ? (n += 1) : e.match(/^[0-7]/) || (n += 2);
            for (var r = "", i = 0; i < n; i++) r += "f";
            e = new Ve(r, 16)
              .xor(t)
              .add(Ve.ONE)
              .toString(16)
              .replace(/^-/, "");
          }
          return e;
        }),
        (this.getPEMStringFromHex = function(t, e) {
          var n = CryptoJS.enc.Hex.parse(t),
            r = CryptoJS.enc.Base64.stringify(n).replace(/(.{64})/g, "$1\r\n");
          return "-----BEGIN " + e + "-----\r\n" + (r = r.replace(/\r\n$/, "")) + "\r\n-----END " + e + "-----\r\n";
        });
    })()),
    (bn.asn1.ASN1Object = function() {
      (this.getLengthHexFromValue = function() {
        if (void 0 === this.hV || null == this.hV) throw "this.hV is null or undefined.";
        if (this.hV.length % 2 == 1) throw "value hex must be even length: n=" + "".length + ",v=" + this.hV;
        var t = this.hV.length / 2,
          e = t.toString(16);
        if ((e.length % 2 == 1 && (e = "0" + e), t < 128)) return e;
        var n = e.length / 2;
        if (15 < n) throw "ASN.1 length too long to represent by 8x: n = " + t.toString(16);
        return (128 + n).toString(16) + e;
      }),
        (this.getEncodedHex = function() {
          return (
            (null != this.hTLV && !this.isModified) ||
              ((this.hV = this.getFreshValueHex()), (this.hL = this.getLengthHexFromValue()), (this.hTLV = this.hT + this.hL + this.hV), (this.isModified = !1)),
            this.hTLV
          );
        }),
        (this.getValueHex = function() {
          return this.getEncodedHex(), this.hV;
        }),
        (this.getFreshValueHex = function() {
          return "";
        });
    }),
    (bn.asn1.DERAbstractString = function(t) {
      bn.asn1.DERAbstractString.superclass.constructor.call(this),
        (this.getString = function() {
          return this.s;
        }),
        (this.setString = function(t) {
          (this.hTLV = null), (this.isModified = !0), (this.s = t), (this.hV = stohex(this.s));
        }),
        (this.setStringHex = function(t) {
          (this.hTLV = null), (this.isModified = !0), (this.s = null), (this.hV = t);
        }),
        (this.getFreshValueHex = function() {
          return this.hV;
        }),
        void 0 !== t && (void 0 !== t.str ? this.setString(t.str) : void 0 !== t.hex && this.setStringHex(t.hex));
    }),
    vn.extend(bn.asn1.DERAbstractString, bn.asn1.ASN1Object),
    (bn.asn1.DERAbstractTime = function(t) {
      bn.asn1.DERAbstractTime.superclass.constructor.call(this),
        (this.localDateToUTC = function(t) {
          return (utc = t.getTime() + 6e4 * t.getTimezoneOffset()), new Date(utc);
        }),
        (this.formatDate = function(t, e) {
          var n = this.zeroPadding,
            r = this.localDateToUTC(t),
            i = String(r.getFullYear());
          return (
            "utc" == e && (i = i.substr(2, 2)),
            i + n(String(r.getMonth() + 1), 2) + n(String(r.getDate()), 2) + n(String(r.getHours()), 2) + n(String(r.getMinutes()), 2) + n(String(r.getSeconds()), 2) + "Z"
          );
        }),
        (this.zeroPadding = function(t, e) {
          return t.length >= e ? t : new Array(e - t.length + 1).join("0") + t;
        }),
        (this.getString = function() {
          return this.s;
        }),
        (this.setString = function(t) {
          (this.hTLV = null), (this.isModified = !0), (this.s = t), (this.hV = stohex(this.s));
        }),
        (this.setByDateValue = function(t, e, n, r, i, s) {
          var a = new Date(Date.UTC(t, e - 1, n, r, i, s, 0));
          this.setByDate(a);
        }),
        (this.getFreshValueHex = function() {
          return this.hV;
        });
    }),
    vn.extend(bn.asn1.DERAbstractTime, bn.asn1.ASN1Object),
    (bn.asn1.DERAbstractStructured = function(t) {
      bn.asn1.DERAbstractString.superclass.constructor.call(this),
        (this.setByASN1ObjectArray = function(t) {
          (this.hTLV = null), (this.isModified = !0), (this.asn1Array = t);
        }),
        (this.appendASN1Object = function(t) {
          (this.hTLV = null), (this.isModified = !0), this.asn1Array.push(t);
        }),
        (this.asn1Array = new Array()),
        void 0 !== t && void 0 !== t.array && (this.asn1Array = t.array);
    }),
    vn.extend(bn.asn1.DERAbstractStructured, bn.asn1.ASN1Object),
    (bn.asn1.DERBoolean = function() {
      bn.asn1.DERBoolean.superclass.constructor.call(this), (this.hT = "01"), (this.hTLV = "0101ff");
    }),
    vn.extend(bn.asn1.DERBoolean, bn.asn1.ASN1Object),
    (bn.asn1.DERInteger = function(t) {
      bn.asn1.DERInteger.superclass.constructor.call(this),
        (this.hT = "02"),
        (this.setByBigInteger = function(t) {
          (this.hTLV = null), (this.isModified = !0), (this.hV = bn.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t));
        }),
        (this.setByInteger = function(t) {
          var e = new Ve(String(t), 10);
          this.setByBigInteger(e);
        }),
        (this.setValueHex = function(t) {
          this.hV = t;
        }),
        (this.getFreshValueHex = function() {
          return this.hV;
        }),
        void 0 !== t && (void 0 !== t.bigint ? this.setByBigInteger(t.bigint) : void 0 !== t.int ? this.setByInteger(t.int) : void 0 !== t.hex && this.setValueHex(t.hex));
    }),
    vn.extend(bn.asn1.DERInteger, bn.asn1.ASN1Object),
    (bn.asn1.DERBitString = function(t) {
      bn.asn1.DERBitString.superclass.constructor.call(this),
        (this.hT = "03"),
        (this.setHexValueIncludingUnusedBits = function(t) {
          (this.hTLV = null), (this.isModified = !0), (this.hV = t);
        }),
        (this.setUnusedBitsAndHexValue = function(t, e) {
          if (t < 0 || 7 < t) throw "unused bits shall be from 0 to 7: u = " + t;
          var n = "0" + t;
          (this.hTLV = null), (this.isModified = !0), (this.hV = n + e);
        }),
        (this.setByBinaryString = function(t) {
          var e = 8 - ((t = t.replace(/0+$/, "")).length % 8);
          8 == e && (e = 0);
          for (var n = 0; n <= e; n++) t += "0";
          var r = "";
          for (n = 0; n < t.length - 1; n += 8) {
            var i = t.substr(n, 8),
              s = parseInt(i, 2).toString(16);
            1 == s.length && (s = "0" + s), (r += s);
          }
          (this.hTLV = null), (this.isModified = !0), (this.hV = "0" + e + r);
        }),
        (this.setByBooleanArray = function(t) {
          for (var e = "", n = 0; n < t.length; n++) 1 == t[n] ? (e += "1") : (e += "0");
          this.setByBinaryString(e);
        }),
        (this.newFalseArray = function(t) {
          for (var e = new Array(t), n = 0; n < t; n++) e[n] = !1;
          return e;
        }),
        (this.getFreshValueHex = function() {
          return this.hV;
        }),
        void 0 !== t && (void 0 !== t.hex ? this.setHexValueIncludingUnusedBits(t.hex) : void 0 !== t.bin ? this.setByBinaryString(t.bin) : void 0 !== t.array && this.setByBooleanArray(t.array));
    }),
    vn.extend(bn.asn1.DERBitString, bn.asn1.ASN1Object),
    (bn.asn1.DEROctetString = function(t) {
      bn.asn1.DEROctetString.superclass.constructor.call(this, t), (this.hT = "04");
    }),
    vn.extend(bn.asn1.DEROctetString, bn.asn1.DERAbstractString),
    (bn.asn1.DERNull = function() {
      bn.asn1.DERNull.superclass.constructor.call(this), (this.hT = "05"), (this.hTLV = "0500");
    }),
    vn.extend(bn.asn1.DERNull, bn.asn1.ASN1Object),
    (bn.asn1.DERObjectIdentifier = function(t) {
      function o(t) {
        var e = t.toString(16);
        return 1 == e.length && (e = "0" + e), e;
      }
      function s(t) {
        var e = "",
          n = new Ve(t, 10).toString(2),
          r = 7 - (n.length % 7);
        7 == r && (r = 0);
        for (var i = "", s = 0; s < r; s++) i += "0";
        for (n = i + n, s = 0; s < n.length - 1; s += 7) {
          var a = n.substr(s, 7);
          s != n.length - 7 && (a = "1" + a), (e += o(parseInt(a, 2)));
        }
        return e;
      }
      bn.asn1.DERObjectIdentifier.superclass.constructor.call(this),
        (this.hT = "06"),
        (this.setValueHex = function(t) {
          (this.hTLV = null), (this.isModified = !0), (this.s = null), (this.hV = t);
        }),
        (this.setValueOidString = function(t) {
          if (!t.match(/^[0-9.]+$/)) throw "malformed oid string: " + t;
          var e = "",
            n = t.split("."),
            r = 40 * parseInt(n[0]) + parseInt(n[1]);
          (e += o(r)), n.splice(0, 2);
          for (var i = 0; i < n.length; i++) e += s(n[i]);
          (this.hTLV = null), (this.isModified = !0), (this.s = null), (this.hV = e);
        }),
        (this.setValueName = function(t) {
          if (void 0 === bn.asn1.x509.OID.name2oidList[t]) throw "DERObjectIdentifier oidName undefined: " + t;
          var e = bn.asn1.x509.OID.name2oidList[t];
          this.setValueOidString(e);
        }),
        (this.getFreshValueHex = function() {
          return this.hV;
        }),
        void 0 !== t && (void 0 !== t.oid ? this.setValueOidString(t.oid) : void 0 !== t.hex ? this.setValueHex(t.hex) : void 0 !== t.name && this.setValueName(t.name));
    }),
    vn.extend(bn.asn1.DERObjectIdentifier, bn.asn1.ASN1Object),
    (bn.asn1.DERUTF8String = function(t) {
      bn.asn1.DERUTF8String.superclass.constructor.call(this, t), (this.hT = "0c");
    }),
    vn.extend(bn.asn1.DERUTF8String, bn.asn1.DERAbstractString),
    (bn.asn1.DERNumericString = function(t) {
      bn.asn1.DERNumericString.superclass.constructor.call(this, t), (this.hT = "12");
    }),
    vn.extend(bn.asn1.DERNumericString, bn.asn1.DERAbstractString),
    (bn.asn1.DERPrintableString = function(t) {
      bn.asn1.DERPrintableString.superclass.constructor.call(this, t), (this.hT = "13");
    }),
    vn.extend(bn.asn1.DERPrintableString, bn.asn1.DERAbstractString),
    (bn.asn1.DERTeletexString = function(t) {
      bn.asn1.DERTeletexString.superclass.constructor.call(this, t), (this.hT = "14");
    }),
    vn.extend(bn.asn1.DERTeletexString, bn.asn1.DERAbstractString),
    (bn.asn1.DERIA5String = function(t) {
      bn.asn1.DERIA5String.superclass.constructor.call(this, t), (this.hT = "16");
    }),
    vn.extend(bn.asn1.DERIA5String, bn.asn1.DERAbstractString),
    (bn.asn1.DERUTCTime = function(t) {
      bn.asn1.DERUTCTime.superclass.constructor.call(this, t),
        (this.hT = "17"),
        (this.setByDate = function(t) {
          (this.hTLV = null), (this.isModified = !0), (this.date = t), (this.s = this.formatDate(this.date, "utc")), (this.hV = stohex(this.s));
        }),
        void 0 !== t && (void 0 !== t.str ? this.setString(t.str) : void 0 !== t.hex ? this.setStringHex(t.hex) : void 0 !== t.date && this.setByDate(t.date));
    }),
    vn.extend(bn.asn1.DERUTCTime, bn.asn1.DERAbstractTime),
    (bn.asn1.DERGeneralizedTime = function(t) {
      bn.asn1.DERGeneralizedTime.superclass.constructor.call(this, t),
        (this.hT = "18"),
        (this.setByDate = function(t) {
          (this.hTLV = null), (this.isModified = !0), (this.date = t), (this.s = this.formatDate(this.date, "gen")), (this.hV = stohex(this.s));
        }),
        void 0 !== t && (void 0 !== t.str ? this.setString(t.str) : void 0 !== t.hex ? this.setStringHex(t.hex) : void 0 !== t.date && this.setByDate(t.date));
    }),
    vn.extend(bn.asn1.DERGeneralizedTime, bn.asn1.DERAbstractTime),
    (bn.asn1.DERSequence = function(t) {
      bn.asn1.DERSequence.superclass.constructor.call(this, t),
        (this.hT = "30"),
        (this.getFreshValueHex = function() {
          for (var t = "", e = 0; e < this.asn1Array.length; e++) {
            t += this.asn1Array[e].getEncodedHex();
          }
          return (this.hV = t), this.hV;
        });
    }),
    vn.extend(bn.asn1.DERSequence, bn.asn1.DERAbstractStructured),
    (bn.asn1.DERSet = function(t) {
      bn.asn1.DERSet.superclass.constructor.call(this, t),
        (this.hT = "31"),
        (this.getFreshValueHex = function() {
          for (var t = new Array(), e = 0; e < this.asn1Array.length; e++) {
            var n = this.asn1Array[e];
            t.push(n.getEncodedHex());
          }
          return t.sort(), (this.hV = t.join("")), this.hV;
        });
    }),
    vn.extend(bn.asn1.DERSet, bn.asn1.DERAbstractStructured),
    (bn.asn1.DERTaggedObject = function(t) {
      bn.asn1.DERTaggedObject.superclass.constructor.call(this),
        (this.hT = "a0"),
        (this.hV = ""),
        (this.isExplicit = !0),
        (this.asn1Object = null),
        (this.setASN1Object = function(t, e, n) {
          (this.hT = e),
            (this.isExplicit = t),
            (this.asn1Object = n),
            this.isExplicit
              ? ((this.hV = this.asn1Object.getEncodedHex()), (this.hTLV = null), (this.isModified = !0))
              : ((this.hV = null), (this.hTLV = n.getEncodedHex()), (this.hTLV = this.hTLV.replace(/^../, e)), (this.isModified = !1));
        }),
        (this.getFreshValueHex = function() {
          return this.hV;
        }),
        void 0 !== t &&
          (void 0 !== t.tag && (this.hT = t.tag),
          void 0 !== t.explicit && (this.isExplicit = t.explicit),
          void 0 !== t.obj && ((this.asn1Object = t.obj), this.setASN1Object(this.isExplicit, this.hT, this.asn1Object)));
    }),
    vn.extend(bn.asn1.DERTaggedObject, bn.asn1.ASN1Object);
  var Sn = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  function kn(t) {
    var e,
      n,
      r = "";
    for (e = 0; e + 3 <= t.length; e += 3) (n = parseInt(t.substring(e, e + 3), 16)), (r += Sn.charAt(n >> 6) + Sn.charAt(63 & n));
    for (
      e + 1 == t.length
        ? ((n = parseInt(t.substring(e, e + 1), 16)), (r += Sn.charAt(n << 2)))
        : e + 2 == t.length && ((n = parseInt(t.substring(e, e + 2), 16)), (r += Sn.charAt(n >> 2) + Sn.charAt((3 & n) << 4)));
      0 < (3 & r.length);

    )
      r += "=";
    return r;
  }
  (Ee.prototype.getHexStringValue = function() {
    var t = this.toHexString(),
      e = 2 * this.header,
      n = 2 * this.length;
    return t.substr(e, n);
  }),
    (cn.prototype.parseKey = function(t) {
      try {
        var e = 0,
          n = 0,
          r = /^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t) ? fn.decode(t) : ln.unarmor(t),
          i = Ee.decode(r);
        if ((3 === i.sub.length && (i = i.sub[2].sub[0]), 9 === i.sub.length)) {
          (e = i.sub[1].getHexStringValue()), (this.n = hn(e, 16)), (n = i.sub[2].getHexStringValue()), (this.e = parseInt(n, 16));
          var s = i.sub[3].getHexStringValue();
          this.d = hn(s, 16);
          var a = i.sub[4].getHexStringValue();
          this.p = hn(a, 16);
          var o = i.sub[5].getHexStringValue();
          this.q = hn(o, 16);
          var u = i.sub[6].getHexStringValue();
          this.dmp1 = hn(u, 16);
          var h = i.sub[7].getHexStringValue();
          this.dmq1 = hn(h, 16);
          var c = i.sub[8].getHexStringValue();
          this.coeff = hn(c, 16);
        } else {
          if (2 !== i.sub.length) return !1;
          var l = i.sub[1].sub[0];
          (e = l.sub[0].getHexStringValue()), (this.n = hn(e, 16)), (n = l.sub[1].getHexStringValue()), (this.e = parseInt(n, 16));
        }
        return !0;
      } catch (t) {
        return !1;
      }
    }),
    (cn.prototype.getPrivateBaseKey = function() {
      var t = {
        array: [
          new bn.asn1.DERInteger({ int: 0 }),
          new bn.asn1.DERInteger({ bigint: this.n }),
          new bn.asn1.DERInteger({ int: this.e }),
          new bn.asn1.DERInteger({ bigint: this.d }),
          new bn.asn1.DERInteger({ bigint: this.p }),
          new bn.asn1.DERInteger({ bigint: this.q }),
          new bn.asn1.DERInteger({ bigint: this.dmp1 }),
          new bn.asn1.DERInteger({ bigint: this.dmq1 }),
          new bn.asn1.DERInteger({ bigint: this.coeff }),
        ],
      };
      return new bn.asn1.DERSequence(t).getEncodedHex();
    }),
    (cn.prototype.getPrivateBaseKeyB64 = function() {
      return kn(this.getPrivateBaseKey());
    }),
    (cn.prototype.getPublicBaseKey = function() {
      var t = { array: [new bn.asn1.DERObjectIdentifier({ oid: "1.2.840.113549.1.1.1" }), new bn.asn1.DERNull()] },
        e = new bn.asn1.DERSequence(t);
      return (
        (t = { array: [new bn.asn1.DERInteger({ bigint: this.n }), new bn.asn1.DERInteger({ int: this.e })] }),
        (t = { hex: "00" + new bn.asn1.DERSequence(t).getEncodedHex() }),
        (t = { array: [e, new bn.asn1.DERBitString(t)] }),
        new bn.asn1.DERSequence(t).getEncodedHex()
      );
    }),
    (cn.prototype.getPublicBaseKeyB64 = function() {
      return kn(this.getPublicBaseKey());
    }),
    (cn.prototype.wordwrap = function(t, e) {
      if (!t) return t;
      var n = "(.{1," + (e = e || 64) + "})( +|$\n?)|(.{1," + e + "})";
      return t.match(RegExp(n, "g")).join("\n");
    }),
    (cn.prototype.getPrivateKey = function() {
      var t = "-----BEGIN RSA PRIVATE KEY-----\n";
      return (t += this.wordwrap(this.getPrivateBaseKeyB64()) + "\n"), (t += "-----END RSA PRIVATE KEY-----");
    }),
    (cn.prototype.getPublicKey = function() {
      var t = "-----BEGIN PUBLIC KEY-----\n";
      return (t += this.wordwrap(this.getPublicBaseKeyB64()) + "\n"), (t += "-----END PUBLIC KEY-----");
    }),
    (cn.prototype.hasPublicKeyProperty = function(t) {
      return (t = t || {}).hasOwnProperty("n") && t.hasOwnProperty("e");
    }),
    (cn.prototype.hasPrivateKeyProperty = function(t) {
      return (
        (t = t || {}).hasOwnProperty("n") &&
        t.hasOwnProperty("e") &&
        t.hasOwnProperty("d") &&
        t.hasOwnProperty("p") &&
        t.hasOwnProperty("q") &&
        t.hasOwnProperty("dmp1") &&
        t.hasOwnProperty("dmq1") &&
        t.hasOwnProperty("coeff")
      );
    }),
    (cn.prototype.parsePropertiesFrom = function(t) {
      (this.n = t.n), (this.e = t.e), t.hasOwnProperty("d") && ((this.d = t.d), (this.p = t.p), (this.q = t.q), (this.dmp1 = t.dmp1), (this.dmq1 = t.dmq1), (this.coeff = t.coeff));
    });
  var xn = (s(Tn, cn), Tn);
  function Tn(t) {
    p(this, Tn);
    var e = a(this, (Tn.__proto__ || Object.getPrototypeOf(Tn)).call(this));
    return t && ("string" == typeof t ? e.parseKey(t) : (e.hasPrivateKeyProperty(t) || e.hasPublicKeyProperty(t)) && e.parsePropertiesFrom(t)), e;
  }
  function _n(t) {
    p(this, _n),
      (t = t || {}),
      (this.default_key_size = parseInt(t.default_key_size) || 1024),
      (this.default_public_exponent = t.default_public_exponent || "010001"),
      (this.log = t.log || !1),
      (this.key = null);
  }
  (_n.prototype.setKey = function(t) {
    this.log && this.key && console.warn("A key was already set, overriding existing."), (this.key = new xn(t));
  }),
    (_n.prototype.setPrivateKey = function(t) {
      this.setKey(t);
    }),
    (_n.prototype.setPublicKey = function(t) {
      this.setKey(t);
    }),
    (_n.prototype.decrypt = function(t) {
      try {
        return this.getKey().decrypt(
          (function(t) {
            var e,
              n,
              r = "",
              i = 0;
            for (e = 0; e < t.length && "=" != t.charAt(e); ++e) {
              var s = Sn.indexOf(t.charAt(e));
              s < 0 ||
                (i =
                  0 == i
                    ? ((r += Ke(s >> 2)), (n = 3 & s), 1)
                    : 1 == i
                    ? ((r += Ke((n << 2) | (s >> 4))), (n = 15 & s), 2)
                    : 2 == i
                    ? ((r += Ke(n)), (r += Ke(s >> 2)), (n = 3 & s), 3)
                    : ((r += Ke((n << 2) | (s >> 4))), (r += Ke(15 & s)), 0));
            }
            return 1 == i && (r += Ke(n << 2)), r;
          })(t),
        );
      } catch (t) {
        return !1;
      }
    }),
    (_n.prototype.encrypt = function(t) {
      try {
        return kn(this.getKey().encrypt(t));
      } catch (t) {
        return !1;
      }
    }),
    (_n.prototype.getKey = function(t) {
      if (!this.key) {
        if (((this.key = new xn()), t && "[object Function]" === {}.toString.call(t))) return void this.key.generateAsync(this.default_key_size, this.default_public_exponent, t);
        this.key.generate(this.default_key_size, this.default_public_exponent);
      }
      return this.key;
    }),
    (_n.prototype.getPrivateKey = function() {
      return this.getKey().getPrivateKey();
    }),
    (_n.prototype.getPrivateKeyB64 = function() {
      return this.getKey().getPrivateBaseKeyB64();
    }),
    (_n.prototype.getPublicKey = function() {
      return this.getKey().getPublicKey();
    }),
    (_n.prototype.getPublicKeyB64 = function() {
      return this.getKey().getPublicBaseKeyB64();
    });
  n(wn, [
    {
      key: "send",
      value: function() {
        return this.before(this.data);
      },
    },
    {
      key: "before",
      value: function(t) {
        return Promise.resolve;
      },
    },
  ]);
  function wn(t) {
    p(this, wn),
      (this.data = t),
      (this.before = function(t) {
        return Promise.resolve(t);
      });
  }
  var En =
    (n(
      An,
      [
        {
          key: "destroy",
          value: function() {
            this.eventSource.destroy();
          },
        },
        { key: "connect", value: function() {} },
        { key: "disconnect", value: function() {} },
        {
          key: "reconnect",
          value: function() {
            var t = this;
            return this.disconnect().then(function() {
              return t.connect();
            });
          },
        },
        { key: "ready", value: function() {} },
        {
          key: "setEndpoint",
          value: function(t) {
            return (this.endpoint = t), this.reconnect();
          },
        },
        { key: "send", value: function(t) {} },
        { key: "prepare", value: function(t) {} },
      ],
      [
        {
          key: "canTransfer",
          value: function(t) {
            return An.streamTypes().includes(t);
          },
        },
        {
          key: "streamTypes",
          value: function() {
            return [];
          },
        },
      ],
    ),
    An);
  function An(t, e) {
    p(this, An), (this.stream_type = e), (this.endpoint = t), (this.eventSource = new P()), (this.dataQueue = []);
  }
  /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  var Dn = b("transport:ws"),
    Pn = (s(Rn, he), Rn);
  function Rn(t) {
    return p(this, Rn), a(this, (Rn.__proto__ || Object.getPrototypeOf(Rn)).call(this, "failed to parse " + t + " websocket protocol"));
  }
  var On =
    (s(Bn, En),
    n(
      Bn,
      [
        {
          key: "destroy",
          value: function() {
            var t = this;
            this.disconnect().then(function() {
              o(Bn.prototype.__proto__ || Object.getPrototypeOf(Bn.prototype), "destroy", t).call(t), Dn.debug("WebsocketTransport destroy");
            });
          },
        },
        {
          key: "ready",
          value: function() {
            return this._ready;
          },
        },
        {
          key: "defaultReconnectHandler",
          value: function(n) {
            return new Promise(function(t, e) {
              confirm(n.code + ": " + n.msg + "\nDo You Want To Reconnect ?") ? t() : e();
            });
          },
        },
        {
          key: "connect",
          value: function() {
            var r = this;
            return this.disconnect().then(function() {
              for (var t = [], e = 0; e < r.workers; ++e) {
                var n = new Nn(r.socket_url, r.endpoint, r.stream_type);
                n.set_reconnect_handler(function(t) {
                  return r.reconnectHandler(t);
                }),
                  n.set_disconnect_handler(function(t) {
                    r.eventSource.dispatchEvent("disconnected", { code: t.code, reason: t.reason }),
                      [0, 1e3, 1006, 1013, 1011].includes(t.code) &&
                        setTimeout(function() {
                          r._ready && r._ready.reject && r._ready.reject(),
                            (r._ready = r.connect()),
                            r._ready.then(function() {
                              r.eventSource.dispatchEvent("reconnected");
                            });
                        }, 3e3);
                  }),
                  n.set_data_handler(function(t) {
                    r.dataQueue.push(new Uint8Array(t)), r.eventSource.dispatchEvent("data");
                  }),
                  t.push(
                    n
                      .connect()
                      .then(function() {
                        r.eventSource.dispatchEvent("connected");
                      })
                      .catch(function(t) {
                        throw (r.eventSource.dispatchEvent("error"), new Error(t));
                      }),
                  ),
                  r.proxies.push(n);
              }
              return Promise.all(t);
            });
          },
        },
        {
          key: "disconnect",
          value: function() {
            for (var t = [], e = 0; e < this.proxies.length; ++e) t.push(this.proxies[e].close());
            return (this.proxies = []), this.proxies.length ? Promise.all(t) : Promise.resolve();
          },
        },
        {
          key: "socket",
          value: function() {
            return this.proxies[this.currentProxy++ % this.proxies.length];
          },
        },
        {
          key: "send",
          value: function(t, e) {
            var n = this.socket().send(t);
            return e && e(n.seq), n.promise;
          },
        },
      ],
      [
        {
          key: "canTransfer",
          value: function(t) {
            return Bn.streamTypes().includes(t);
          },
        },
        {
          key: "streamTypes",
          value: function() {
            return ["hls", "rtsp"];
          },
        },
      ],
    ),
    Bn);
  function Bn(t, e) {
    var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : { socket: location.protocol.replace("http", "ws") + "//" + location.host + "/ws/", workers: 1 };
    p(this, Bn);
    var r = a(this, (Bn.__proto__ || Object.getPrototypeOf(Bn)).call(this, t, e));
    return (r.proxies = []), (r.currentProxy = 0), (r.workers = 1), (r.socket_url = n.socket), (r.reconnectHandler = n.reconnectHandler || r.defaultReconnectHandler), (r._ready = r.connect()), r;
  }
  var Cn =
    (n(In, null, [
      {
        key: "PROTO",
        get: function() {
          return "WSP";
        },
      },
      {
        key: "V1_1",
        get: function() {
          return "1.1";
        },
      },
      {
        key: "CMD_INIT",
        get: function() {
          return "INIT";
        },
      },
      {
        key: "CMD_JOIN",
        get: function() {
          return "JOIN";
        },
      },
      {
        key: "CMD_WRAP",
        get: function() {
          return "WRAP";
        },
      },
    ]),
    n(
      In,
      [
        {
          key: "build",
          value: function(t, e, n) {
            var r = 2 < arguments.length && void 0 !== n ? n : "",
              i = "";
            for (var s in (e.seq || (e.seq = ++In.seq), e)) i += s + ": " + e[s] + "\r\n";
            return In.PROTO + "/" + this.ver + " " + t + "\r\n" + i + "\r\n" + r;
          },
        },
      ],
      [
        {
          key: "parse",
          value: function(t) {
            var e = t.indexOf("\r\n\r\n"),
              n = t.substr(0, e).split("\r\n"),
              r = n.shift().match(new RegExp(In.PROTO + "/" + In.V1_1 + "\\s+(\\d+)\\s+(.+)"));
            if (r) {
              for (var i = { code: Number(r[1]), msg: r[2], data: {}, payload: "" }; n.length; ) {
                var s = n.shift();
                if (!s) break;
                var a = s.split(":"),
                  o = k(a, 2),
                  u = o[0],
                  h = o[1];
                i.data[u.trim()] = h.trim();
              }
              return (i.payload = t.substr(e + 4)), i;
            }
            return null;
          },
        },
      ],
    ),
    In);
  function In(t) {
    p(this, In), (this.ver = t);
  }
  Cn.seq = 0;
  var Nn =
    (n(Un, null, [
      {
        key: "CHN_CONTROL",
        get: function() {
          return "control";
        },
      },
      {
        key: "CHN_DATA",
        get: function() {
          return "data";
        },
      },
    ]),
    n(Un, [
      {
        key: "set_data_handler",
        value: function(t) {
          this.data_handler = t;
        },
      },
      {
        key: "set_disconnect_handler",
        value: function(t) {
          this.disconnect_handler = t;
        },
      },
      {
        key: "set_reconnect_handler",
        value: function(t) {
          this.reconnect_handler = t;
        },
      },
      {
        key: "close",
        value: function() {
          var e = this;
          return (
            Dn.log("closing connection"),
            new Promise(function(t) {
              (e.ctrlChannel.onclose = function() {
                e.dataChannel
                  ? ((e.dataChannel.onclose = function() {
                      Dn.log("closed"), t();
                    }),
                    e.dataChannel.close())
                  : (Dn.log("closed"), t());
              }),
                e.ctrlChannel.close();
            })
          );
        },
      },
      {
        key: "onDisconnect",
        value: function(t) {
          (this.ctrlChannel.onclose = null), this.ctrlChannel.close(), this.dataChannel && ((this.dataChannel.onclose = null), this.dataChannel.close()), this.disconnect_handler(t);
        },
      },
      {
        key: "initDataChannel",
        value: function(r) {
          var i = this;
          return new Promise(function(e, n) {
            (i.dataChannel = new WebSocket(i.url, Un.CHN_DATA)),
              (i.dataChannel.binaryType = "arraybuffer"),
              (i.dataChannel.onopen = function() {
                var t = i.builder.build(Cn.CMD_JOIN, { channel: r });
                Dn.debug(t), i.dataChannel.send(t);
              }),
              (i.dataChannel.onmessage = function(t) {
                if ((Dn.debug("[data]\r\n" + t.data), !Cn.parse(t.data))) return n(new Pn("data"));
                (i.dataChannel.onmessage = function(t) {
                  i.data_handler && i.data_handler(t.data);
                }),
                  e();
              }),
              (i.dataChannel.onerror = function(t) {
                Dn.error("[data] " + t.type + ". code: " + t.code + ", reason: " + (t.reason || "unknown reason")), i.dataChannel.close();
              }),
              (i.dataChannel.onclose = function(t) {
                Dn.error("[data] " + t.type + ". code: " + t.code + ", reason: " + (t.reason || "unknown reason")), i.onDisconnect(t);
              });
          });
        },
      },
      {
        key: "connect",
        value: function() {
          var i = this;
          return (
            (this.encryptionKey = null),
            new Promise(function(n, r) {
              (i.ctrlChannel = new WebSocket(i.url, Un.CHN_CONTROL)),
                (i.connected = !1),
                (i.ctrlChannel.onopen = function() {
                  var t = { proto: i.stream_type };
                  i.endpoint.socket ? (t.socket = i.endpoint.socket) : Object.assign(t, { host: i.endpoint.host, port: i.endpoint.port });
                  var e = i.builder.build(Cn.CMD_INIT, t);
                  Dn.debug(e), i.ctrlChannel.send(e);
                }),
                (i.ctrlChannel.onmessage = function(t) {
                  Dn.debug("[ctrl] onmessage\r\n" + t.data);
                  var e = Cn.parse(t.data);
                  return e
                    ? 300 <= e.code
                      ? (Dn.error("[ctrl]\r\n" + e.code + ": " + e.msg),
                        i.reconnect_handler(e).then(function() {
                          i.disconnect_handler({ code: 0, reason: "reconnect" });
                        }),
                        r(new Error(e.msg)))
                      : ((i.ctrlChannel.onmessage = function(t) {
                          var e = Cn.parse(t.data);
                          Dn.debug("[ctrl] onmessage1\r\n" + t.data),
                            e.data.seq in i.awaitingPromises &&
                              (e || i.awaitingPromises[e.data.seq].reject(new Pn("ctrl")),
                              e.code < 300 ? i.awaitingPromises[e.data.seq].resolve(e) : i.awaitingPromises[e.data.seq].reject(new Error(e.msg)),
                              delete i.awaitingPromises[e.data.seq]);
                        }),
                        (i.encryptionKey = e.data.pubkey || null),
                        i.encryptionKey && i.encryptor.setPublicKey(i.encryptionKey),
                        void i
                          .initDataChannel(e.data.channel)
                          .then(n)
                          .catch(r))
                    : r(new Pn("ctrl"));
                }),
                (i.ctrlChannel.onerror = function(t) {
                  Dn.error("[ctrl] " + t.type + ". code: " + t.code + " " + (t.reason || "unknown reason")), i.ctrlChannel.close(1011, "onerror");
                }),
                (i.ctrlChannel.onclose = function(t) {
                  Dn.error("[ctrl] " + t.type + ". code: " + t.code + " " + (t.reason || "unknown reason")), i.onDisconnect(t);
                });
            })
          );
        },
      },
      {
        key: "encrypt",
        value: function(t) {
          if (this.encryptionKey) {
            var e = this.encryptor.encrypt(t);
            if (!1 === e) throw new Error("Encryption failed. Stopping");
            return e;
          }
          return t;
        },
      },
      {
        key: "send",
        value: function(r) {
          var i = this;
          if (this.ctrlChannel.readyState != WebSocket.OPEN) throw (this.close(), new Error("disconnected"));
          var s = { contentLength: r.length, seq: ++Cn.seq };
          return {
            seq: s.seq,
            promise: new Promise(function(t, e) {
              i.awaitingPromises[s.seq] = { resolve: t, reject: e };
              var n = i.builder.build(Cn.CMD_WRAP, s, r);
              Dn.debug(n), i.ctrlChannel.send(i.encrypt(n));
            }),
          };
        },
      },
    ]),
    Un);
  function Un(t, e, n) {
    p(this, Un),
      (this.url = t),
      (this.stream_type = n),
      (this.endpoint = e),
      (this.data_handler = function() {}),
      (this.disconnect_handler = function() {}),
      (this.reconnect_handler = function() {}),
      (this.builder = new Cn(Cn.V1_1)),
      (this.awaitingPromises = {}),
      (this.seq = 0),
      (this.encryptor = new _n());
  }
  var Ln = b("wsp"),
    Mn =
      (n(Vn, null, [
        {
          key: "isSupported",
          value: function(t) {
            return [Vn.HLS, Vn.RTSP].includes(t);
          },
        },
        {
          key: "fromUrl",
          value: function(t) {
            var e = void 0;
            try {
              e = T.parse(t);
            } catch (t) {
              return null;
            }
            switch (e.protocol) {
              case "rtsp":
                return Vn.RTSP;
              case "http":
              case "https":
                return 0 <= t.indexOf(".m3u8") ? Vn.HLS : null;
              default:
                return null;
            }
          },
        },
        {
          key: "fromMime",
          value: function(t) {
            switch (t) {
              case "application/x-rtsp":
                return Vn.RTSP;
              case "application/vnd.apple.mpegurl":
              case "application/x-mpegurl":
                return Vn.HLS;
              default:
                return null;
            }
          },
        },
        {
          key: "HLS",
          get: function() {
            return "hls";
          },
        },
        {
          key: "RTSP",
          get: function() {
            return "rtsp";
          },
        },
      ]),
      Vn);
  function Vn() {
    p(this, Vn);
  }
  var qn,
    Hn =
      (n(
        Fn,
        [
          {
            key: "isPlaying",
            value: function() {
              return !(this.player.paused || this.client.paused);
            },
          },
          {
            key: "canPlayUrl",
            value: function(t) {
              return Mn.fromUrl(t) in this.modules;
            },
          },
          {
            key: "_checkSource",
            value: function(t) {
              return !(
                t.dataset.ignore ||
                !t.src ||
                this.player.canPlayType(t.type) ||
                (!Mn.fromMime(t.type) && !Mn.fromUrl(t.src)) ||
                ((this.url = t.src), (this.type = t.type ? Mn.fromMime(t.type) : Mn.fromUrl(t.src)), 0)
              );
            },
          },
          {
            key: "setSource",
            value: function(i, s) {
              return x(
                regeneratorRuntime
                  .mark(function t() {
                    var e, n, r;
                    return regeneratorRuntime.wrap(
                      function(t) {
                        for (;;)
                          switch ((t.prev = t.next)) {
                            case 0:
                              this.transport && (this.client && this.client.detachTransport(), this.transport.destroy()), (t.prev = 1), (this.endpoint = T.parse(i)), (t.next = 9);
                              break;
                            case 5:
                              return (t.prev = 5), (t.t0 = t.catch(1)), console.error("bad endpoint: ", t.t0), t.abrupt("return");
                            case 9:
                              if (
                                ((this.url = i),
                                (e = this.modules[s].transport),
                                (this.transport = new e.constructor(this.endpoint, this.type, e.options)),
                                (n = this.type),
                                (this.type = (!!Mn.isSupported(s) && s) || Mn.fromMime(s)),
                                this.type)
                              ) {
                                t.next = 16;
                                break;
                              }
                              throw new Error("Bad stream type");
                            case 16:
                              if (n == this.type && this.client) {
                                t.next = 22;
                                break;
                              }
                              this.client && this.client.destroy(), (r = this.modules[s].client), (this.client = new r({ flush: 200, onError: this.errorHandler })), (t.next = 24);
                              break;
                            case 22:
                              return (t.next = 24), this.client.reset();
                            case 24:
                              this.queryCredentials && (this.client.queryCredentials = this.queryCredentials),
                                this.remuxer && (this.remuxer.destroy(), (this.remuxer = null)),
                                (this.remuxer = new mt(this.player)),
                                this.remuxer.attachClient(this.client),
                                this.client.attachTransport(this.transport),
                                this.client.setSource(this.endpoint),
                                this.player.autoplay && this.start();
                            case 31:
                            case "end":
                              return t.stop();
                          }
                      },
                      t,
                      this,
                      [[1, 5]],
                    );
                  })
                  .call(this),
              );
            },
          },
          {
            key: "start",
            value: function() {
              this.transport && this.client && this.client.start();
            },
          },
          {
            key: "stop",
            value: function() {
              this.client && this.client.stop();
            },
          },
          {
            key: "destroy",
            value: function() {
              this.transport && (this.client && this.client.detachTransport(), this.transport.destroy()),
                this.client && this.client.destroy(),
                this.remuxer && (this.remuxer.destroy(), (this.remuxer = null));
            },
          },
          {
            key: "pullOOBData",
            value: function(t) {
              if (this.remuxer) return this.remuxer.pullOOBData(t);
            },
          },
        ],
        [
          {
            key: "canPlayWithModules",
            value: function(t, e) {
              var n = {},
                r = !0,
                i = !1,
                s = void 0;
              try {
                for (var a, o = e[Symbol.iterator](); !(r = (a = o.next()).done); r = !0) {
                  var u = a.value,
                    h = u.transport || On,
                    c = u.client || pe;
                  h.canTransfer(c.streamType()) && (n[c.streamType()] = !0);
                }
              } catch (t) {
                (i = !0), (s = t);
              } finally {
                try {
                  !r && o.return && o.return();
                } finally {
                  if (i) throw s;
                }
              }
              for (var l in n) if (l == Mn.fromMime(t)) return !0;
              return !1;
            },
          },
          {
            key: "canPlay",
            value: function(t) {
              return Mn.fromMime(t.type) || Mn.fromUrl(t.src);
            },
          },
        ],
      ),
      Fn);
  function Fn(t, e) {
    var n = this;
    p(this, Fn), (void 0 === t ? "undefined" : f(t)) == f("") ? (this.player = document.getElementById(t)) : (this.player = t);
    var r = e.modules || { client: pe, transport: { constructor: On } };
    (this.errorHandler = e.errorHandler || null), (this.queryCredentials = e.queryCredentials || null);
    var i = !0,
      s = !(this.modules = {}),
      a = void 0;
    try {
      for (var o, u = r[Symbol.iterator](); !(i = (o = u.next()).done); i = !0) {
        var h = o.value,
          c = h.transport || On,
          l = h.client || pe;
        c.constructor.canTransfer(l.streamType())
          ? (this.modules[l.streamType()] = { client: l, transport: c })
          : Ln.warn("Client stream type " + l.streamType() + " is incompatible with transport types [" + c.streamTypes().join(", ") + "]. Skip");
      }
    } catch (t) {
      (s = !0), (a = t);
    } finally {
      try {
        !i && u.return && u.return();
      } finally {
        if (s) throw a;
      }
    }
    if (((this.type = Mn.RTSP), (this.url = null), e.url && e.type)) (this.url = e.url), (this.type = e.type);
    else if (!this._checkSource(this.player)) for (var d = 0; d < this.player.children.length && !this._checkSource(this.player.children[d]); ++d);
    this.url && this.setSource(this.url, this.type),
      this.player.addEventListener(
        "play",
        function() {
          n.client && (n.isPlaying() || n.client.start());
        },
        !1,
      ),
      this.player.addEventListener(
        "pause",
        function() {
          n.client && n.client.stop();
        },
        !1,
      );
  }
  var jn = b("heatmap"),
    zn =
      (i(
        (qn = {
          jet: [
            { index: 0, rgb: [0, 0, 131] },
            { index: 0.125, rgb: [0, 60, 170] },
            { index: 0.375, rgb: [5, 255, 255] },
            { index: 0.625, rgb: [255, 255, 0] },
            { index: 0.875, rgb: [250, 0, 0] },
            { index: 1, rgb: [128, 0, 0] },
          ],
          hsv: [
            { index: 0, rgb: [255, 0, 0] },
            { index: 0.169, rgb: [253, 255, 2] },
            { index: 0.173, rgb: [247, 255, 2] },
            { index: 0.337, rgb: [0, 252, 4] },
            { index: 0.341, rgb: [0, 252, 10] },
            { index: 0.506, rgb: [1, 249, 255] },
            { index: 0.671, rgb: [2, 0, 253] },
            { index: 0.675, rgb: [8, 0, 253] },
            { index: 0.839, rgb: [255, 0, 251] },
            { index: 0.843, rgb: [255, 0, 245] },
            { index: 1, rgb: [255, 0, 6] },
          ],
          hot: [
            { index: 0, rgb: [0, 0, 0] },
            { index: 0.3, rgb: [230, 0, 0] },
            { index: 0.6, rgb: [255, 210, 0] },
            { index: 1, rgb: [255, 255, 255] },
          ],
          cool: [
            { index: 0, rgb: [0, 255, 255] },
            { index: 1, rgb: [255, 0, 255] },
          ],
          spring: [
            { index: 0, rgb: [255, 0, 255] },
            { index: 1, rgb: [255, 255, 0] },
          ],
          summer: [
            { index: 0, rgb: [0, 128, 102] },
            { index: 1, rgb: [255, 255, 102] },
          ],
          autumn: [
            { index: 0, rgb: [255, 0, 0] },
            { index: 1, rgb: [255, 255, 0] },
          ],
          winter: [
            { index: 0, rgb: [0, 0, 255] },
            { index: 1, rgb: [0, 255, 128] },
          ],
          bone: [
            { index: 0, rgb: [0, 0, 0] },
            { index: 0.376, rgb: [84, 84, 116] },
            { index: 0.753, rgb: [169, 200, 200] },
            { index: 1, rgb: [255, 255, 255] },
          ],
          copper: [
            { index: 0, rgb: [0, 0, 0] },
            { index: 0.804, rgb: [255, 160, 102] },
            { index: 1, rgb: [255, 199, 127] },
          ],
          greys: [
            { index: 0, rgb: [0, 0, 0] },
            { index: 1, rgb: [255, 255, 255] },
          ],
          yignbu: [
            { index: 0, rgb: [8, 29, 88] },
            { index: 0.125, rgb: [37, 52, 148] },
            { index: 0.25, rgb: [34, 94, 168] },
            { index: 0.375, rgb: [29, 145, 192] },
            { index: 0.5, rgb: [65, 182, 196] },
            { index: 0.625, rgb: [127, 205, 187] },
            { index: 0.75, rgb: [199, 233, 180] },
            { index: 0.875, rgb: [237, 248, 217] },
            { index: 1, rgb: [255, 255, 217] },
          ],
          greens: [
            { index: 0, rgb: [0, 68, 27] },
            { index: 0.125, rgb: [0, 109, 44] },
            { index: 0.25, rgb: [35, 139, 69] },
            { index: 0.375, rgb: [65, 171, 93] },
            { index: 0.5, rgb: [116, 196, 118] },
            { index: 0.625, rgb: [161, 217, 155] },
            { index: 0.75, rgb: [199, 233, 192] },
            { index: 0.875, rgb: [229, 245, 224] },
            { index: 1, rgb: [247, 252, 245] },
          ],
          yiorrd: [
            { index: 0, rgb: [128, 0, 38] },
            { index: 0.125, rgb: [189, 0, 38] },
            { index: 0.25, rgb: [227, 26, 28] },
            { index: 0.375, rgb: [252, 78, 42] },
            { index: 0.5, rgb: [253, 141, 60] },
            { index: 0.625, rgb: [254, 178, 76] },
            { index: 0.75, rgb: [254, 217, 118] },
            { index: 0.875, rgb: [255, 237, 160] },
            { index: 1, rgb: [255, 255, 204] },
          ],
          bluered: [
            { index: 0, rgb: [0, 0, 255] },
            { index: 1, rgb: [255, 0, 0] },
          ],
          rdbu: [
            { index: 0, rgb: [5, 10, 172] },
            { index: 0.35, rgb: [106, 137, 247] },
            { index: 0.5, rgb: [190, 190, 190] },
            { index: 0.6, rgb: [220, 170, 132] },
            { index: 0.7, rgb: [230, 145, 90] },
            { index: 1, rgb: [178, 10, 28] },
          ],
          picnic: [
            { index: 0, rgb: [0, 0, 255] },
            { index: 0.1, rgb: [51, 153, 255] },
            { index: 0.2, rgb: [102, 204, 255] },
            { index: 0.3, rgb: [153, 204, 255] },
            { index: 0.4, rgb: [204, 204, 255] },
            { index: 0.5, rgb: [255, 255, 255] },
            { index: 0.6, rgb: [255, 204, 255] },
            { index: 0.7, rgb: [255, 153, 255] },
            { index: 0.8, rgb: [255, 102, 204] },
            { index: 0.9, rgb: [255, 102, 102] },
            { index: 1, rgb: [255, 0, 0] },
          ],
          rainbow: [
            { index: 0, rgb: [150, 0, 90] },
            { index: 0.125, rgb: [0, 0, 200] },
            { index: 0.25, rgb: [0, 25, 255] },
            { index: 0.375, rgb: [0, 152, 255] },
            { index: 0.5, rgb: [44, 255, 150] },
            { index: 0.625, rgb: [151, 255, 0] },
            { index: 0.75, rgb: [255, 234, 0] },
            { index: 0.875, rgb: [255, 111, 0] },
            { index: 1, rgb: [255, 0, 0] },
          ],
          portland: [
            { index: 0, rgb: [12, 51, 131] },
            { index: 0.25, rgb: [10, 136, 186] },
            { index: 0.5, rgb: [242, 211, 56] },
            { index: 0.75, rgb: [242, 143, 56] },
            { index: 1, rgb: [217, 30, 30] },
          ],
          blackbody: [
            { index: 0, rgb: [0, 0, 0] },
            { index: 0.2, rgb: [230, 0, 0] },
            { index: 0.4, rgb: [230, 210, 0] },
            { index: 0.7, rgb: [255, 255, 255] },
            { index: 1, rgb: [160, 200, 255] },
          ],
          earth: [
            { index: 0, rgb: [0, 0, 130] },
            { index: 0.1, rgb: [0, 180, 180] },
            { index: 0.2, rgb: [40, 210, 40] },
            { index: 0.4, rgb: [230, 230, 50] },
            { index: 0.6, rgb: [120, 70, 20] },
            { index: 1, rgb: [255, 255, 255] },
          ],
          electric: [
            { index: 0, rgb: [0, 0, 0] },
            { index: 0.15, rgb: [30, 0, 100] },
            { index: 0.4, rgb: [120, 0, 100] },
            { index: 0.6, rgb: [160, 90, 0] },
            { index: 0.8, rgb: [230, 200, 0] },
            { index: 1, rgb: [255, 250, 220] },
          ],
          alpha: [
            { index: 0, rgb: [255, 255, 255, 0] },
            { index: 1, rgb: [255, 255, 255, 1] },
          ],
          viridis: [
            { index: 0, rgb: [68, 1, 84] },
            { index: 0.13, rgb: [71, 44, 122] },
            { index: 0.25, rgb: [59, 81, 139] },
            { index: 0.38, rgb: [44, 113, 142] },
            { index: 0.5, rgb: [33, 144, 141] },
            { index: 0.63, rgb: [39, 173, 129] },
            { index: 0.75, rgb: [92, 200, 99] },
            { index: 0.88, rgb: [170, 220, 50] },
            { index: 1, rgb: [253, 231, 37] },
          ],
          inferno: [
            { index: 0, rgb: [0, 0, 4] },
            { index: 0.13, rgb: [31, 12, 72] },
            { index: 0.25, rgb: [85, 15, 109] },
            { index: 0.38, rgb: [136, 34, 106] },
            { index: 0.5, rgb: [186, 54, 85] },
            { index: 0.63, rgb: [227, 89, 51] },
            { index: 0.75, rgb: [249, 140, 10] },
            { index: 0.88, rgb: [249, 201, 50] },
            { index: 1, rgb: [252, 255, 164] },
          ],
          magma: [
            { index: 0, rgb: [0, 0, 4] },
            { index: 0.13, rgb: [28, 16, 68] },
            { index: 0.25, rgb: [79, 18, 123] },
            { index: 0.38, rgb: [129, 37, 129] },
            { index: 0.5, rgb: [181, 54, 122] },
            { index: 0.63, rgb: [229, 80, 100] },
            { index: 0.75, rgb: [251, 135, 97] },
            { index: 0.88, rgb: [254, 194, 135] },
            { index: 1, rgb: [252, 253, 191] },
          ],
          plasma: [
            { index: 0, rgb: [13, 8, 135] },
            { index: 0.13, rgb: [75, 3, 161] },
            { index: 0.25, rgb: [125, 3, 168] },
            { index: 0.38, rgb: [168, 34, 150] },
            { index: 0.5, rgb: [203, 70, 121] },
            { index: 0.63, rgb: [229, 107, 93] },
            { index: 0.75, rgb: [248, 148, 65] },
            { index: 0.88, rgb: [253, 195, 40] },
            { index: 1, rgb: [240, 249, 33] },
          ],
          warm: [
            { index: 0, rgb: [125, 0, 179] },
            { index: 0.13, rgb: [172, 0, 187] },
            { index: 0.25, rgb: [219, 0, 170] },
            { index: 0.38, rgb: [255, 0, 130] },
            { index: 0.5, rgb: [255, 63, 74] },
            { index: 0.63, rgb: [255, 123, 0] },
            { index: 0.75, rgb: [234, 176, 0] },
            { index: 0.88, rgb: [190, 228, 0] },
            { index: 1, rgb: [147, 255, 0] },
          ],
        }),
        "cool",
        [
          { index: 0, rgb: [125, 0, 179] },
          { index: 0.13, rgb: [116, 0, 218] },
          { index: 0.25, rgb: [98, 74, 237] },
          { index: 0.38, rgb: [68, 146, 231] },
          { index: 0.5, rgb: [0, 204, 197] },
          { index: 0.63, rgb: [0, 247, 146] },
          { index: 0.75, rgb: [0, 255, 88] },
          { index: 0.88, rgb: [40, 255, 8] },
          { index: 1, rgb: [147, 255, 0] },
        ],
      ),
      i(qn, "rainbow-soft", [
        { index: 0, rgb: [125, 0, 179] },
        { index: 0.1, rgb: [199, 0, 180] },
        { index: 0.2, rgb: [255, 0, 121] },
        { index: 0.3, rgb: [255, 108, 0] },
        { index: 0.4, rgb: [222, 194, 0] },
        { index: 0.5, rgb: [150, 255, 0] },
        { index: 0.6, rgb: [0, 255, 55] },
        { index: 0.7, rgb: [0, 246, 150] },
        { index: 0.8, rgb: [50, 167, 222] },
        { index: 0.9, rgb: [103, 51, 235] },
        { index: 1, rgb: [124, 0, 186] },
      ]),
      i(qn, "bathymetry", [
        { index: 0, rgb: [40, 26, 44] },
        { index: 0.13, rgb: [59, 49, 90] },
        { index: 0.25, rgb: [64, 76, 139] },
        { index: 0.38, rgb: [63, 110, 151] },
        { index: 0.5, rgb: [72, 142, 158] },
        { index: 0.63, rgb: [85, 174, 163] },
        { index: 0.75, rgb: [120, 206, 163] },
        { index: 0.88, rgb: [187, 230, 172] },
        { index: 1, rgb: [253, 254, 204] },
      ]),
      i(qn, "cdom", [
        { index: 0, rgb: [47, 15, 62] },
        { index: 0.13, rgb: [87, 23, 86] },
        { index: 0.25, rgb: [130, 28, 99] },
        { index: 0.38, rgb: [171, 41, 96] },
        { index: 0.5, rgb: [206, 67, 86] },
        { index: 0.63, rgb: [230, 106, 84] },
        { index: 0.75, rgb: [242, 149, 103] },
        { index: 0.88, rgb: [249, 193, 135] },
        { index: 1, rgb: [254, 237, 176] },
      ]),
      i(qn, "chlorophyll", [
        { index: 0, rgb: [18, 36, 20] },
        { index: 0.13, rgb: [25, 63, 41] },
        { index: 0.25, rgb: [24, 91, 59] },
        { index: 0.38, rgb: [13, 119, 72] },
        { index: 0.5, rgb: [18, 148, 80] },
        { index: 0.63, rgb: [80, 173, 89] },
        { index: 0.75, rgb: [132, 196, 122] },
        { index: 0.88, rgb: [175, 221, 162] },
        { index: 1, rgb: [215, 249, 208] },
      ]),
      i(qn, "density", [
        { index: 0, rgb: [54, 14, 36] },
        { index: 0.13, rgb: [89, 23, 80] },
        { index: 0.25, rgb: [110, 45, 132] },
        { index: 0.38, rgb: [120, 77, 178] },
        { index: 0.5, rgb: [120, 113, 213] },
        { index: 0.63, rgb: [115, 151, 228] },
        { index: 0.75, rgb: [134, 185, 227] },
        { index: 0.88, rgb: [177, 214, 227] },
        { index: 1, rgb: [230, 241, 241] },
      ]),
      i(qn, "freesurface-blue", [
        { index: 0, rgb: [30, 4, 110] },
        { index: 0.13, rgb: [47, 14, 176] },
        { index: 0.25, rgb: [41, 45, 236] },
        { index: 0.38, rgb: [25, 99, 212] },
        { index: 0.5, rgb: [68, 131, 200] },
        { index: 0.63, rgb: [114, 156, 197] },
        { index: 0.75, rgb: [157, 181, 203] },
        { index: 0.88, rgb: [200, 208, 216] },
        { index: 1, rgb: [241, 237, 236] },
      ]),
      i(qn, "freesurface-red", [
        { index: 0, rgb: [60, 9, 18] },
        { index: 0.13, rgb: [100, 17, 27] },
        { index: 0.25, rgb: [142, 20, 29] },
        { index: 0.38, rgb: [177, 43, 27] },
        { index: 0.5, rgb: [192, 87, 63] },
        { index: 0.63, rgb: [205, 125, 105] },
        { index: 0.75, rgb: [216, 162, 148] },
        { index: 0.88, rgb: [227, 199, 193] },
        { index: 1, rgb: [241, 237, 236] },
      ]),
      i(qn, "oxygen", [
        { index: 0, rgb: [64, 5, 5] },
        { index: 0.13, rgb: [106, 6, 15] },
        { index: 0.25, rgb: [144, 26, 7] },
        { index: 0.38, rgb: [168, 64, 3] },
        { index: 0.5, rgb: [188, 100, 4] },
        { index: 0.63, rgb: [206, 136, 11] },
        { index: 0.75, rgb: [220, 174, 25] },
        { index: 0.88, rgb: [231, 215, 44] },
        { index: 1, rgb: [248, 254, 105] },
      ]),
      i(qn, "par", [
        { index: 0, rgb: [51, 20, 24] },
        { index: 0.13, rgb: [90, 32, 35] },
        { index: 0.25, rgb: [129, 44, 34] },
        { index: 0.38, rgb: [159, 68, 25] },
        { index: 0.5, rgb: [182, 99, 19] },
        { index: 0.63, rgb: [199, 134, 22] },
        { index: 0.75, rgb: [212, 171, 35] },
        { index: 0.88, rgb: [221, 210, 54] },
        { index: 1, rgb: [225, 253, 75] },
      ]),
      i(qn, "phase", [
        { index: 0, rgb: [145, 105, 18] },
        { index: 0.13, rgb: [184, 71, 38] },
        { index: 0.25, rgb: [186, 58, 115] },
        { index: 0.38, rgb: [160, 71, 185] },
        { index: 0.5, rgb: [110, 97, 218] },
        { index: 0.63, rgb: [50, 123, 164] },
        { index: 0.75, rgb: [31, 131, 110] },
        { index: 0.88, rgb: [77, 129, 34] },
        { index: 1, rgb: [145, 105, 18] },
      ]),
      i(qn, "salinity", [
        { index: 0, rgb: [42, 24, 108] },
        { index: 0.13, rgb: [33, 50, 162] },
        { index: 0.25, rgb: [15, 90, 145] },
        { index: 0.38, rgb: [40, 118, 137] },
        { index: 0.5, rgb: [59, 146, 135] },
        { index: 0.63, rgb: [79, 175, 126] },
        { index: 0.75, rgb: [120, 203, 104] },
        { index: 0.88, rgb: [193, 221, 100] },
        { index: 1, rgb: [253, 239, 154] },
      ]),
      i(qn, "temperature", [
        { index: 0, rgb: [4, 35, 51] },
        { index: 0.13, rgb: [23, 51, 122] },
        { index: 0.25, rgb: [85, 59, 157] },
        { index: 0.38, rgb: [129, 79, 143] },
        { index: 0.5, rgb: [175, 95, 130] },
        { index: 0.63, rgb: [222, 112, 101] },
        { index: 0.75, rgb: [249, 146, 66] },
        { index: 0.88, rgb: [249, 196, 65] },
        { index: 1, rgb: [232, 250, 91] },
      ]),
      i(qn, "turbidity", [
        { index: 0, rgb: [34, 31, 27] },
        { index: 0.13, rgb: [65, 50, 41] },
        { index: 0.25, rgb: [98, 69, 52] },
        { index: 0.38, rgb: [131, 89, 57] },
        { index: 0.5, rgb: [161, 112, 59] },
        { index: 0.63, rgb: [185, 140, 66] },
        { index: 0.75, rgb: [202, 174, 88] },
        { index: 0.88, rgb: [216, 209, 126] },
        { index: 1, rgb: [233, 246, 171] },
      ]),
      i(qn, "velocity-blue", [
        { index: 0, rgb: [17, 32, 64] },
        { index: 0.13, rgb: [35, 52, 116] },
        { index: 0.25, rgb: [29, 81, 156] },
        { index: 0.38, rgb: [31, 113, 162] },
        { index: 0.5, rgb: [50, 144, 169] },
        { index: 0.63, rgb: [87, 173, 176] },
        { index: 0.75, rgb: [149, 196, 189] },
        { index: 0.88, rgb: [203, 221, 211] },
        { index: 1, rgb: [254, 251, 230] },
      ]),
      i(qn, "velocity-green", [
        { index: 0, rgb: [23, 35, 19] },
        { index: 0.13, rgb: [24, 64, 38] },
        { index: 0.25, rgb: [11, 95, 45] },
        { index: 0.38, rgb: [39, 123, 35] },
        { index: 0.5, rgb: [95, 146, 12] },
        { index: 0.63, rgb: [152, 165, 18] },
        { index: 0.75, rgb: [201, 186, 69] },
        { index: 0.88, rgb: [233, 216, 137] },
        { index: 1, rgb: [255, 253, 205] },
      ]),
      i(qn, "cubehelix", [
        { index: 0, rgb: [0, 0, 0] },
        { index: 0.07, rgb: [22, 5, 59] },
        { index: 0.13, rgb: [60, 4, 105] },
        { index: 0.2, rgb: [109, 1, 135] },
        { index: 0.27, rgb: [161, 0, 147] },
        { index: 0.33, rgb: [210, 2, 142] },
        { index: 0.4, rgb: [251, 11, 123] },
        { index: 0.47, rgb: [255, 29, 97] },
        { index: 0.53, rgb: [255, 54, 69] },
        { index: 0.6, rgb: [255, 85, 46] },
        { index: 0.67, rgb: [255, 120, 34] },
        { index: 0.73, rgb: [255, 157, 37] },
        { index: 0.8, rgb: [241, 191, 57] },
        { index: 0.87, rgb: [224, 220, 93] },
        { index: 0.93, rgb: [218, 241, 142] },
        { index: 1, rgb: [227, 253, 198] },
      ]),
      qn),
    Kn = zn.jet,
    Gn =
      (n(Wn, [
        {
          key: "_configFromList",
          value: function(t) {
            for (var e, n = {}, r = 0; r < t.length; r++) n[(e = t[r]).index] = "rgb(" + e.rgb[0] + "," + e.rgb[1] + "," + e.rgb[2] + ")";
            return n;
          },
        },
        {
          key: "updateConfig",
          value: function(t) {
            t && (void 0 === t ? "undefined" : f(t)) == f("") && (t = zn[t]),
              t && (void 0 === t ? "undefined" : f(t)) == f([]) && (t = this._configFromList(t)),
              t || (jn.log("colormap config not set, use default"), (t = this._configFromList(Kn)));
            var e = document.createElement("canvas"),
              n = e.getContext("2d");
            (e.width = 256), (e.height = 1);
            var r = n.createLinearGradient(0, 0, 256, 1);
            for (var i in t) r.addColorStop(i, t[i]);
            (n.fillStyle = r), n.fillRect(0, 0, 256, 1), (this.data = n.getImageData(0, 0, 256, 1).data);
          },
        },
        {
          key: "getColor",
          value: function(t) {
            t < 0 ? (t = 0) : 255 < t && (t = 255);
            var e = 4 * t;
            return [this.data[e], this.data[1 + e], this.data[2 + e], this.data[3 + e]];
          },
        },
      ]),
      Wn);
  function Wn(t) {
    p(this, Wn), this.updateConfig(t);
  }
  var Zn = { canvas: "#canvas", canvasWidth: 854, canvasHeight: 480, pixelAlpha: 255, enableSmoothing: !0, colormap: null },
    Yn =
      (n(Qn, [
        {
          key: "updateConfig",
          value: function(t) {
            (t = t || Zn),
              (this.offlineCanvas = document.createElement("canvas")),
              (this.offlineCtx = this.offlineCanvas.getContext("2d")),
              f(t.canvas) == f("") ? (this.canvas = document.getElementById(t.canvas)) : (this.canvas = t.canvas),
              (this.canvasWidth = t.canvasWidth),
              (this.canvasHeight = t.canvasHeight),
              (this.pixelAlpha = t.pixelAlpha),
              (null != this.pixelAlpha && null != this.pixelAlpha) || (this.pixelAlpha = 255),
              (this.ctx = this.canvas.getContext("2d")),
              (this.ctx.imageSmoothingEnabled = t.enableSmoothing),
              (this.ctx.mozImageSmoothingEnabled = t.enableSmoothing),
              (this.ctx.webkitImageSmoothingEnabled = t.enableSmoothing),
              (this.ctx.msImageSmoothingEnabled = t.enableSmoothing),
              (this.colormap = new Gn(t.colormap));
          },
        },
        {
          key: "getColormap",
          value: function() {
            return this.colormap;
          },
        },
        {
          key: "render",
          value: function(t, e, n) {
            (this.offlineCanvas.width = e), (this.offlineCanvas.height = n);
            for (var r, i, s, a = this.offlineCtx.getImageData(0, 0, e, n), o = 0; o < n; o++)
              for (var u = 0; u < e; u++)
                (r = t[(i = o * e + u)]), (i *= 4), (s = this.colormap.getColor(r)), (a.data[i] = s[0]), (a.data[i + 1] = s[1]), (a.data[i + 2] = s[2]), (a.data[i + 3] = this.pixelAlpha);
            this.offlineCtx.putImageData(a, 0, 0), this.ctx.drawImage(this.offlineCanvas, 0, 0, this.canvasWidth, this.canvasHeight);
          },
        },
      ]),
      Qn);
  function Qn(t) {
    p(this, Qn), this.updateConfig(t);
  }
  (v = u),
    (window.Streamedian = {
      logger: function(t) {
        return b(t);
      },
      player: function(t, e) {
        if (!e.socket) throw new Error("socket parameter is not set");
        var n = {
          modules: [{ client: pe, transport: { constructor: On, options: { socket: e.socket, reconnectHandler: e.reconnectHandler || null } } }],
          errorHandler: function(t) {
            console.error("Failed to start player: " + t.message);
          },
          queryCredentials: function(r) {
            return new Promise(function(t, e) {
              var n = prompt("input credentials in format user:password");
              n ? (r.setCredentials.apply(r, n.split(":")), t()) : e();
            });
          },
        };
        return new Hn(t, n);
      },
      heatmapRenderer: function(t) {
        return new Yn(t);
      },
    });
})();
//# sourceMappingURL=streamedian.min.js.map
